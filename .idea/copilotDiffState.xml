<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/areas/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/areas/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { &#10;  Table, &#10;  TableBody, &#10;  TableCell, &#10;  TableHead, &#10;  TableHeader, &#10;  TableRow &#10;} from '@/components/ui/table';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown&#10;} from 'lucide-react';&#10;import { Area } from '@/lib/types';&#10;import { mockAreas } from '@/lib/mockData';&#10;import AreaModal from '../../components/areas/AreaModal';&#10;&#10;export default function AreasPage() {&#10;  const [areas, setAreas] = useState&lt;Area[]&gt;(mockAreas);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedArea, setSelectedArea] = useState&lt;Area | null&gt;(null);&#10;  const [showAreaModal, setShowAreaModal] = useState(false);&#10;  const [sortField, setSortField] = useState&lt;keyof Area | null&gt;(null);&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;&#10;  const handleSort = (field: keyof Area) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');&#10;    } else {&#10;      setSortField(field);&#10;      setSortDirection('asc');&#10;    }&#10;  };&#10;&#10;  const sortedAreas = [...areas].sort((a, b) =&gt; {&#10;    if (!sortField) return 0;&#10;    &#10;    const aValue = a[sortField];&#10;    const bValue = b[sortField];&#10;    &#10;    if (aValue === bValue) return 0;&#10;    &#10;    const direction = sortDirection === 'asc' ? 1 : -1;&#10;    &#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction;&#10;    }&#10;    &#10;    if (aValue &lt; bValue) return -1 * direction;&#10;    return 1 * direction;&#10;  });&#10;&#10;  const filteredAreas = sortedAreas.filter(area =&gt; &#10;    area.nmArea.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    area.dsArea.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    area.cdArea.toString().includes(searchQuery)&#10;  );&#10;&#10;  const handleCreateArea = () =&gt; {&#10;    setSelectedArea(null);&#10;    setShowAreaModal(true);&#10;  };&#10;&#10;  const handleEditArea = (area: Area) =&gt; {&#10;    setSelectedArea(area);&#10;    setShowAreaModal(true);&#10;  };&#10;&#10;  const handleDeleteArea = (id: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir esta área?')) {&#10;      setAreas(areas.filter(area =&gt; area.idArea !== id));&#10;    }&#10;  };&#10;&#10;  const handleSaveArea = (area: Area) =&gt; {&#10;    if (selectedArea) {&#10;      // Update existing area&#10;      setAreas(areas.map(a =&gt; a.idArea === area.idArea ? area : a));&#10;    } else {&#10;      // Add new area&#10;      setAreas([...areas, area]);&#10;    }&#10;    setShowAreaModal(false);&#10;    setSelectedArea(null);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Áreas&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateArea} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Nova Área&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome, código ou descrição...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button variant=&quot;secondary&quot; className=&quot;h-10 px-4&quot;&gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;w-24 cursor-pointer&quot; onClick={() =&gt; handleSort('cdArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Código&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Descrição&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dtCadastro')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Data de Cadastro&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredAreas.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={6} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhuma área encontrada&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredAreas.map((area) =&gt; (&#10;                &lt;TableRow key={area.idArea} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;{area.cdArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{area.nmArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{area.dsArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{new Date(area.dtCadastro).toLocaleDateString('pt-BR')}&lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleEditArea(area)}&#10;                      &gt;&#10;                        &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleDeleteArea(area.idArea)}&#10;                        className=&quot;text-red-500 hover:text-red-700&quot;&#10;                      &gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Area Modal */}&#10;      {showAreaModal &amp;&amp; (&#10;        &lt;AreaModal&#10;          area={selectedArea}&#10;          onClose={() =&gt; {&#10;            setShowAreaModal(false);&#10;            setSelectedArea(null);&#10;          }}&#10;          onSave={handleSaveArea}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { &#10;  Table, &#10;  TableBody, &#10;  TableCell, &#10;  TableHead, &#10;  TableHeader, &#10;  TableRow &#10;} from '@/components/ui/table';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown,&#10;  X&#10;} from 'lucide-react';&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogFooter&#10;} from '@/components/ui/dialog';&#10;import { Label } from '@/components/ui/label';&#10;import { Area } from '@/lib/types';&#10;import { mockAreas } from '@/lib/mockData';&#10;import AreaModal from '../../components/areas/AreaModal';&#10;&#10;export default function AreasPage() {&#10;  const [areas, setAreas] = useState&lt;Area[]&gt;(mockAreas);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedArea, setSelectedArea] = useState&lt;Area | null&gt;(null);&#10;  const [showAreaModal, setShowAreaModal] = useState(false);&#10;  const [showFilterModal, setShowFilterModal] = useState(false);&#10;  const [sortField, setSortField] = useState&lt;keyof Area | null&gt;(null);&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;  &#10;  // Filter states&#10;  const [filters, setFilters] = useState({&#10;    codigo: '',&#10;    nome: '',&#10;    descricao: '',&#10;    dataInicio: '',&#10;    dataFim: ''&#10;  });&#10;  const [activeFilters, setActiveFilters] = useState(filters);&#10;&#10;  const handleSort = (field: keyof Area) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');&#10;    } else {&#10;      setSortField(field);&#10;      setSortDirection('asc');&#10;    }&#10;  };&#10;&#10;  const sortedAreas = [...areas].sort((a, b) =&gt; {&#10;    if (!sortField) return 0;&#10;    &#10;    const aValue = a[sortField];&#10;    const bValue = b[sortField];&#10;    &#10;    if (aValue === bValue) return 0;&#10;    &#10;    const direction = sortDirection === 'asc' ? 1 : -1;&#10;    &#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction;&#10;    }&#10;    &#10;    if (aValue &lt; bValue) return -1 * direction;&#10;    return 1 * direction;&#10;  });&#10;&#10;  const handleClearFilters = () =&gt; {&#10;    const emptyFilters = {&#10;      codigo: '',&#10;      nome: '',&#10;      descricao: '',&#10;      dataInicio: '',&#10;      dataFim: ''&#10;    };&#10;    setFilters(emptyFilters);&#10;    setActiveFilters(emptyFilters);&#10;  };&#10;&#10;  const handleApplyFilters = () =&gt; {&#10;    setActiveFilters(filters);&#10;    setShowFilterModal(false);&#10;  };&#10;&#10;  const filteredAreas = sortedAreas.filter(area =&gt; {&#10;    // Search query filter&#10;    const matchesSearch = area.nmArea.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      area.dsArea.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      area.cdArea.toString().includes(searchQuery);&#10;&#10;    // Advanced filters&#10;    const matchesCodigo = !activeFilters.codigo || &#10;      area.cdArea.toString().includes(activeFilters.codigo);&#10;    &#10;    const matchesNome = !activeFilters.nome || &#10;      area.nmArea.toLowerCase().includes(activeFilters.nome.toLowerCase());&#10;    &#10;    const matchesDescricao = !activeFilters.descricao || &#10;      area.dsArea.toLowerCase().includes(activeFilters.descricao.toLowerCase());&#10;    &#10;    const matchesDataInicio = !activeFilters.dataInicio || &#10;      new Date(area.dtCadastro) &gt;= new Date(activeFilters.dataInicio);&#10;    &#10;    const matchesDataFim = !activeFilters.dataFim || &#10;      new Date(area.dtCadastro) &lt;= new Date(activeFilters.dataFim);&#10;&#10;    return matchesSearch &amp;&amp; matchesCodigo &amp;&amp; matchesNome &amp;&amp; matchesDescricao &amp;&amp; &#10;           matchesDataInicio &amp;&amp; matchesDataFim;&#10;  });&#10;&#10;  const hasActiveFilters = Object.values(activeFilters).some(value =&gt; value !== '');&#10;&#10;  const handleCreateArea = () =&gt; {&#10;    setSelectedArea(null);&#10;    setShowAreaModal(true);&#10;  };&#10;&#10;  const handleEditArea = (area: Area) =&gt; {&#10;    setSelectedArea(area);&#10;    setShowAreaModal(true);&#10;  };&#10;&#10;  const handleDeleteArea = (id: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir esta área?')) {&#10;      setAreas(areas.filter(area =&gt; area.idArea !== id));&#10;    }&#10;  };&#10;&#10;  const handleSaveArea = (area: Area) =&gt; {&#10;    if (selectedArea) {&#10;      // Update existing area&#10;      setAreas(areas.map(a =&gt; a.idArea === area.idArea ? area : a));&#10;    } else {&#10;      // Add new area&#10;      setAreas([...areas, area]);&#10;    }&#10;    setShowAreaModal(false);&#10;    setSelectedArea(null);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Áreas&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateArea} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Nova Área&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome, código ou descrição...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button &#10;            variant=&quot;secondary&quot; &#10;            className=&quot;h-10 px-4&quot;&#10;            onClick={() =&gt; setShowFilterModal(true)}&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;w-24 cursor-pointer&quot; onClick={() =&gt; handleSort('cdArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Código&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Descrição&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dtCadastro')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Data de Cadastro&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredAreas.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={6} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhuma área encontrada&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredAreas.map((area) =&gt; (&#10;                &lt;TableRow key={area.idArea} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;{area.cdArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{area.nmArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{area.dsArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{new Date(area.dtCadastro).toLocaleDateString('pt-BR')}&lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleEditArea(area)}&#10;                      &gt;&#10;                        &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleDeleteArea(area.idArea)}&#10;                        className=&quot;text-red-500 hover:text-red-700&quot;&#10;                      &gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Area Modal */}&#10;      {showAreaModal &amp;&amp; (&#10;        &lt;AreaModal&#10;          area={selectedArea}&#10;          onClose={() =&gt; {&#10;            setShowAreaModal(false);&#10;            setSelectedArea(null);&#10;          }}&#10;          onSave={handleSaveArea}&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Filter Modal */}&#10;      {showFilterModal &amp;&amp; (&#10;        &lt;Dialog open={showFilterModal} onOpenChange={setShowFilterModal}&gt;&#10;          &lt;DialogContent className=&quot;max-w-2xl p-6&quot;&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle className=&quot;text-lg font-semibold&quot;&gt;&#10;                Filtrar Áreas&#10;              &lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;            &#10;            &lt;div className=&quot;grid grid-cols-1 gap-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;codigo&quot;&gt;Código&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;codigo&quot;&#10;                  value={filters.codigo}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, codigo: e.target.value })}&#10;                  placeholder=&quot;Filtrar por código&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;nome&quot;&gt;Nome&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;nome&quot;&#10;                  value={filters.nome}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, nome: e.target.value })}&#10;                  placeholder=&quot;Filtrar por nome&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;descricao&quot;&gt;Descrição&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;descricao&quot;&#10;                  value={filters.descricao}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, descricao: e.target.value })}&#10;                  placeholder=&quot;Filtrar por descrição&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;dataInicio&quot;&gt;Data Início&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;dataInicio&quot;&#10;                    type=&quot;date&quot;&#10;                    value={filters.dataInicio}&#10;                    onChange={(e) =&gt; setFilters({ ...filters, dataInicio: e.target.value })}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;dataFim&quot;&gt;Data Fim&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;dataFim&quot;&#10;                    type=&quot;date&quot;&#10;                    value={filters.dataFim}&#10;                    onChange={(e) =&gt; setFilters({ ...filters, dataFim: e.target.value })}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex justify-end gap-2 mt-4&quot;&gt;&#10;              &lt;Button &#10;                variant=&quot;outline&quot; &#10;                onClick={() =&gt; {&#10;                  setShowFilterModal(false);&#10;                  handleClearFilters();&#10;                }}&#10;              &gt;&#10;                &lt;X className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                Limpar Filtros&#10;              &lt;/Button&gt;&#10;              &lt;Button &#10;                onClick={handleApplyFilters} &#10;                className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;              &gt;&#10;                Aplicar Filtros&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/email/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/email/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import {useState, useEffect} from 'react';&#10;import {&#10;  Archive,&#10;  File,&#10;  Filter,&#10;  Folder,&#10;  Inbox,&#10;  Mail,&#10;  OctagonAlert,&#10;  PanelLeftClose,&#10;  PanelLeftOpen,&#10;  Plus,&#10;  RotateCw,&#10;  Search,&#10;  Send,&#10;  Settings,&#10;  Cog&#10;} from 'lucide-react';&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Badge} from '@/components/ui/badge';&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogDescription,&#10;  DialogFooter,&#10;  DialogHeader,&#10;  DialogTitle,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {Textarea} from &quot;@/components/ui/textarea&quot;;&#10;import {useToast} from '@/hooks/use-toast';&#10;import EmailList from '../../components/email/EmailList';&#10;import EmailComposer from '../../components/email/EmailComposer';&#10;import EmailDetail from '../../components/email/EmailDetail';&#10;import FolderManager from '../../components/email/FolderManager';&#10;import {cn} from &quot;@/lib/utils&quot;;&#10;&#10;const EMAIL_FOLDERS = [&#10;  { id: 'inbox', icon: Inbox, label: 'Caixa de Entrada', count: 0 },&#10;  { id: 'sent', icon: Send, label: 'Enviados', count: 0 },&#10;];&#10;&#10;interface SentEmail {&#10;  id: string;&#10;  to: string;&#10;  cc?: string;&#10;  bcc?: string;&#10;  subject: string;&#10;  content: string;&#10;  date: string;&#10;  from: string;&#10;}&#10;&#10;interface EmailConfig {&#10;  defaultMessages: {&#10;    [key: string]: string;&#10;  };&#10;  defaultFooter: string;&#10;}&#10;&#10;export default function EmailPage() {&#10;  const { toast } = useToast();&#10;  const [activeFolder, setActiveFolder] = useState('inbox');&#10;  const [selectedEmail, setSelectedEmail] = useState&lt;string | null&gt;(null);&#10;  const [showComposer, setShowComposer] = useState(false);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [showFolderManager, setShowFolderManager] = useState(false);&#10;  const [showConfigDialog, setShowConfigDialog] = useState(false);&#10;  const [showFilterModal, setShowFilterModal] = useState(false);&#10;&#10;  // Filter states for emails&#10;  const [emailFilters, setEmailFilters] = useState({&#10;    isRead: '',&#10;    hasAttachment: '',&#10;    dateFrom: '',&#10;    dateTo: '',&#10;    sender: ''&#10;  });&#10;&#10;  const [emailConfig, setEmailConfig] = useState&lt;EmailConfig&gt;(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const savedConfig = localStorage.getItem('emailConfig');&#10;      return savedConfig ? JSON.parse(savedConfig) : {&#10;        defaultMessages: {&#10;          'Saudação': 'Olá,\n\nEspero que esteja bem.',&#10;          'Agradecimento': 'Obrigado pelo seu email.\n\nAgradeço o seu contato.',&#10;          'Despedida': 'Atenciosamente,\n\nEquipe de Suporte'&#10;        },&#10;        defaultFooter: 'Atenciosamente,\n\nSeu Nome\nSeu Cargo\nSeu Telefone'&#10;      };&#10;    }&#10;    return {&#10;      defaultMessages: {&#10;        'Saudação': 'Olá,\n\nEspero que esteja bem.',&#10;        'Agradecimento': 'Obrigado pelo seu email.\n\nAgradeço o seu contato.',&#10;        'Despedida': 'Atenciosamente,\n\nEquipe de Suporte'&#10;      },&#10;      defaultFooter: 'Atenciosamente,\n\nSeu Nome\nSeu Cargo\nSeu Telefone'&#10;    };&#10;  });&#10;&#10;  const [sentEmails, setSentEmails] = useState&lt;SentEmail[]&gt;(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const savedEmails = localStorage.getItem('sentEmails');&#10;      return savedEmails ? JSON.parse(savedEmails) : [];&#10;    }&#10;    return [];&#10;  });&#10;&#10;  const [folders, setFolders] = useState(() =&gt; {&#10;    const initialFolders = [...EMAIL_FOLDERS];&#10;&#10;    if (typeof window !== 'undefined') {&#10;      const savedEmails = localStorage.getItem('sentEmails');&#10;      const sentEmailsArray = savedEmails ? JSON.parse(savedEmails) : [];&#10;&#10;      const sentFolder = initialFolders.find(folder =&gt; folder.id === 'sent');&#10;      if (sentFolder) {&#10;        sentFolder.count = sentEmailsArray.length;&#10;      }&#10;    }&#10;&#10;    return initialFolders;&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      localStorage.setItem('sentEmails', JSON.stringify(sentEmails));&#10;    }&#10;  }, [sentEmails]);&#10;&#10;  const addSentEmail = (email: Omit&lt;SentEmail, 'id' | 'from'&gt;) =&gt; {&#10;    const newEmail: SentEmail = {&#10;      ...email,&#10;      id: Date.now().toString(),&#10;      from: 'voce@example.com',&#10;    };&#10;&#10;    setSentEmails(prev =&gt; [newEmail, ...prev]);&#10;&#10;    setFolders(prev =&gt;&#10;      prev.map(folder =&gt;&#10;        folder.id === 'sent'&#10;          ? { ...folder, count: folder.count + 1 }&#10;          : folder&#10;      )&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900 flex items-center&quot;&gt;&#10;            &lt;Mail className=&quot;h-7 w-7 mr-3&quot;/&gt;&#10;            Email&#10;          &lt;/h1&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot;/&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar emails...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            variant=&quot;secondary&quot;&#10;            className=&quot;h-10 px-4&quot;&#10;            onClick={() =&gt; setShowFilterModal(true)}&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot;/&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex items-center gap-2 border-b border-gray-200 p-4&quot;&gt;&#10;        {folders.map((folder) =&gt; (&#10;          &lt;Button&#10;            key={folder.id}&#10;            variant={activeFolder === folder.id ? &quot;default&quot; : &quot;ghost&quot;}&#10;            className=&quot;flex items-center gap-2 h-10 px-4&quot;&#10;            onClick={() =&gt; setActiveFolder(folder.id)}&#10;          &gt;&#10;            &lt;folder.icon className=&quot;h-4 w-4&quot;/&gt;&#10;            &lt;span&gt;{folder.label}&lt;/span&gt;&#10;            {folder.count &gt; 0 &amp;&amp; (&#10;              &lt;Badge variant=&quot;secondary&quot; className=&quot;ml-1&quot;&gt;&#10;                {folder.count}&#10;              &lt;/Badge&gt;&#10;            )}&#10;          &lt;/Button&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex flex-1 overflow-hidden&quot;&gt;&#10;        {/* Show email list when no email is selected, or email detail when one is selected */}&#10;        {!selectedEmail ? (&#10;          &lt;EmailList&#10;            folder={activeFolder}&#10;            searchQuery={searchQuery}&#10;            selectedEmail={selectedEmail || null}&#10;            onEmailSelect={setSelectedEmail}&#10;            sentEmails={sentEmails}&#10;            onUnreadCountChange={(count) =&gt; {&#10;              setFolders(prev =&gt; {&#10;                if (!prev || !Array.isArray(prev)) {&#10;                  return EMAIL_FOLDERS.map(folder =&gt;&#10;                    folder.id === 'inbox' ? {...folder, count} : folder&#10;                  );&#10;                }&#10;&#10;                return prev.map(folder =&gt;&#10;                  folder.id === 'inbox'&#10;                    ? {...folder, count}&#10;                    : folder&#10;                );&#10;              });&#10;            }}&#10;          /&gt;&#10;        ) : (&#10;          &lt;EmailDetail&#10;            emailId={selectedEmail}&#10;            onClose={() =&gt; setSelectedEmail('')}&#10;            onSend={addSentEmail}&#10;            emailConfig={emailConfig}&#10;          /&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {showComposer &amp;&amp; (&#10;        &lt;EmailComposer&#10;          onClose={() =&gt; setShowComposer(false)}&#10;          onSend={addSentEmail}&#10;          emailConfig={emailConfig}&#10;        /&gt;&#10;      )}&#10;&#10;      {showFolderManager &amp;&amp; (&#10;        &lt;FolderManager&#10;          folders={folders}&#10;          onClose={() =&gt; setShowFolderManager(false)}&#10;          onSave={setFolders}&#10;        /&gt;&#10;      )}&#10;&#10;      &lt;Dialog open={showConfigDialog} onOpenChange={setShowConfigDialog}&gt;&#10;        &lt;DialogContent className=&quot;flex flex-col sm:max-w-[600px] max-h-[95vh]&quot;&gt;&#10;          &lt;DialogHeader&gt;&#10;            &lt;DialogTitle&gt;Configurações de Email&lt;/DialogTitle&gt;&#10;            &lt;DialogDescription&gt;&#10;              Configure mensagens padrão e assinatura para seus emails.&#10;            &lt;/DialogDescription&gt;&#10;          &lt;/DialogHeader&gt;&#10;&#10;          &lt;div className=&quot;grid gap-4 py-4 max-h-full overflow-auto&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;defaultFooter&quot; className=&quot;font-medium&quot;&gt;Assinatura Padrão&lt;/Label&gt;&#10;              &lt;Textarea&#10;                id=&quot;defaultFooter&quot;&#10;                value={emailConfig.defaultFooter}&#10;                onChange={(e) =&gt; setEmailConfig({&#10;                  ...emailConfig,&#10;                  defaultFooter: e.target.value&#10;                })}&#10;                placeholder=&quot;Digite sua assinatura padrão...&quot;&#10;                className=&quot;min-h-[100px]&quot;&#10;              /&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;                Esta assinatura será adicionada ao final dos seus emails.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col space-y-2&quot;&gt;&#10;              &lt;Label className=&quot;font-medium&quot;&gt;Mensagens Padrão&lt;/Label&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500 mb-2&quot;&gt;&#10;                Configure mensagens padrão que podem ser rapidamente inseridas nos seus emails.&#10;              &lt;/p&gt;&#10;&#10;              {Object.entries(emailConfig.defaultMessages).map(([key, value], index) =&gt; (&#10;                &lt;div key={index} className=&quot;grid grid-rows-[1fr,3fr] gap-2 mb-3&quot;&gt;&#10;                  &lt;Input&#10;                    value={key}&#10;                    onChange={(e) =&gt; {&#10;                      const newMessages = {...emailConfig.defaultMessages};&#10;                      const oldValue = newMessages[key];&#10;                      delete newMessages[key];&#10;                      newMessages[e.target.value] = oldValue;&#10;                      setEmailConfig({&#10;                        ...emailConfig,&#10;                        defaultMessages: newMessages&#10;                      });&#10;                    }}&#10;                    placeholder=&quot;Nome da mensagem&quot;&#10;                  /&gt;&#10;                  &lt;Textarea&#10;                    value={value}&#10;                    onChange={(e) =&gt; {&#10;                      const newMessages = {...emailConfig.defaultMessages};&#10;                      newMessages[key] = e.target.value;&#10;                      setEmailConfig({&#10;                        ...emailConfig,&#10;                        defaultMessages: newMessages&#10;                      });&#10;                    }}&#10;                    placeholder=&quot;Conteúdo da mensagem&quot;&#10;                    className=&quot;min-h-[80px]&quot;&#10;                  /&gt;&#10;                  &lt;div className=&quot;flex-grow-1 h-px bg-gray-200 my-2&quot;/&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;&#10;              &lt;Button&#10;                type=&quot;button&quot;&#10;                variant=&quot;outline&quot;&#10;                onClick={() =&gt; {&#10;                  const newMessages = {...emailConfig.defaultMessages};&#10;                  newMessages[`Nova Mensagem ${Object.keys(newMessages).length + 1}`] = '';&#10;                  setEmailConfig({&#10;                    ...emailConfig,&#10;                    defaultMessages: newMessages&#10;                  });&#10;                }}&#10;                className=&quot;mt-2 flex-grow-1&quot;&#10;              &gt;&#10;                &lt;Plus className=&quot;h-4 w-4 mr-2&quot;/&gt;&#10;                Adicionar Mensagem&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;DialogFooter&gt;&#10;            &lt;Button&#10;              type=&quot;button&quot;&#10;              variant=&quot;outline&quot;&#10;              onClick={() =&gt; setShowConfigDialog(false)}&#10;            &gt;&#10;              Cancelar&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              type=&quot;button&quot;&#10;              onClick={() =&gt; {&#10;                if (typeof window !== 'undefined') {&#10;                  localStorage.setItem('emailConfig', JSON.stringify(emailConfig));&#10;                }&#10;                setShowConfigDialog(false);&#10;&#10;                toast({&#10;                  title: &quot;Configurações salvas&quot;,&#10;                  description: &quot;Suas configurações de email foram salvas com sucesso.&quot;,&#10;                });&#10;              }}&#10;            &gt;&#10;              Salvar Configurações&#10;            &lt;/Button&gt;&#10;          &lt;/DialogFooter&gt;&#10;        &lt;/DialogContent&gt;&#10;      &lt;/Dialog&gt;&#10;&#10;      {/* Email Filter Modal */}&#10;      {showFilterModal &amp;&amp; (&#10;        &lt;Dialog open={showFilterModal} onOpenChange={setShowFilterModal}&gt;&#10;          &lt;DialogContent&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle&gt;Filtrar Emails&lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;            &lt;div className=&quot;grid gap-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;sender&quot;&gt;Remetente&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;sender&quot;&#10;                  value={emailFilters.sender}&#10;                  onChange={(e) =&gt; setEmailFilters({...emailFilters, sender: e.target.value})}&#10;                  placeholder=&quot;Filtrar por remetente&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;isRead&quot;&gt;Status de Leitura&lt;/Label&gt;&#10;                &lt;select&#10;                  id=&quot;isRead&quot;&#10;                  value={emailFilters.isRead}&#10;                  onChange={(e) =&gt; setEmailFilters({...emailFilters, isRead: e.target.value})}&#10;                  className=&quot;w-full p-2 border rounded-md&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;&quot;&gt;Todos&lt;/option&gt;&#10;                  &lt;option value=&quot;read&quot;&gt;Lidos&lt;/option&gt;&#10;                  &lt;option value=&quot;unread&quot;&gt;Não Lidos&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;hasAttachment&quot;&gt;Anexos&lt;/Label&gt;&#10;                &lt;select&#10;                  id=&quot;hasAttachment&quot;&#10;                  value={emailFilters.hasAttachment}&#10;                  onChange={(e) =&gt; setEmailFilters({...emailFilters, hasAttachment: e.target.value})}&#10;                  className=&quot;w-full p-2 border rounded-md&quot;&#10;                &gt;&#10;                  &lt;option value=&quot;&quot;&gt;Todos&lt;/option&gt;&#10;                  &lt;option value=&quot;true&quot;&gt;Com Anexo&lt;/option&gt;&#10;                  &lt;option value=&quot;false&quot;&gt;Sem Anexo&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;dateFrom&quot;&gt;Data Início&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;dateFrom&quot;&#10;                    type=&quot;date&quot;&#10;                    value={emailFilters.dateFrom}&#10;                    onChange={(e) =&gt; setEmailFilters({...emailFilters, dateFrom: e.target.value})}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;dateTo&quot;&gt;Data Fim&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;dateTo&quot;&#10;                    type=&quot;date&quot;&#10;                    value={emailFilters.dateTo}&#10;                    onChange={(e) =&gt; setEmailFilters({...emailFilters, dateTo: e.target.value})}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;DialogFooter&gt;&#10;              &lt;Button&#10;                variant=&quot;outline&quot;&#10;                onClick={() =&gt; {&#10;                  setEmailFilters({&#10;                    isRead: '',&#10;                    hasAttachment: '',&#10;                    dateFrom: '',&#10;                    dateTo: '',&#10;                    sender: ''&#10;                  });&#10;                  setShowFilterModal(false);&#10;                }}&#10;              &gt;&#10;                Limpar Filtros&#10;              &lt;/Button&gt;&#10;              &lt;Button onClick={() =&gt; setShowFilterModal(false)}&gt;&#10;                Aplicar Filtros&#10;              &lt;/Button&gt;&#10;            &lt;/DialogFooter&gt;&#10;          &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import {useState, useEffect} from 'react';&#10;import {&#10;  Archive,&#10;  File,&#10;  Filter,&#10;  Folder,&#10;  Inbox,&#10;  Mail,&#10;  OctagonAlert,&#10;  PanelLeftClose,&#10;  PanelLeftOpen,&#10;  Plus,&#10;  RotateCw,&#10;  Search,&#10;  Send,&#10;  Settings,&#10;  Cog&#10;} from 'lucide-react';&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Badge} from '@/components/ui/badge';&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogDescription,&#10;  DialogFooter,&#10;  DialogHeader,&#10;  DialogTitle,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {Textarea} from &quot;@/components/ui/textarea&quot;;&#10;import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from &quot;@/components/ui/select&quot;;&#10;import {useToast} from '@/hooks/use-toast';&#10;import EmailList from '../../components/email/EmailList';&#10;import EmailComposer from '../../components/email/EmailComposer';&#10;import EmailDetail from '../../components/email/EmailDetail';&#10;import FolderManager from '../../components/email/FolderManager';&#10;import {cn} from &quot;@/lib/utils&quot;;&#10;&#10;const EMAIL_FOLDERS = [&#10;  { id: 'inbox', icon: Inbox, label: 'Caixa de Entrada', count: 0 },&#10;  { id: 'sent', icon: Send, label: 'Enviados', count: 0 },&#10;];&#10;&#10;interface SentEmail {&#10;  id: string;&#10;  to: string;&#10;  cc?: string;&#10;  bcc?: string;&#10;  subject: string;&#10;  content: string;&#10;  date: string;&#10;  from: string;&#10;}&#10;&#10;interface EmailConfig {&#10;  defaultMessages: {&#10;    [key: string]: string;&#10;  };&#10;  defaultFooter: string;&#10;}&#10;&#10;export default function EmailPage() {&#10;  const { toast } = useToast();&#10;  const [activeFolder, setActiveFolder] = useState('inbox');&#10;  const [selectedEmail, setSelectedEmail] = useState&lt;string | null&gt;(null);&#10;  const [showComposer, setShowComposer] = useState(false);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [showFolderManager, setShowFolderManager] = useState(false);&#10;  const [showConfigDialog, setShowConfigDialog] = useState(false);&#10;  const [showFilterModal, setShowFilterModal] = useState(false);&#10;&#10;  // Filter states for emails&#10;  const [emailFilters, setEmailFilters] = useState({&#10;    isRead: '',&#10;    hasAttachment: '',&#10;    dateFrom: '',&#10;    dateTo: '',&#10;    sender: ''&#10;  });&#10;&#10;  const [emailConfig, setEmailConfig] = useState&lt;EmailConfig&gt;(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const savedConfig = localStorage.getItem('emailConfig');&#10;      return savedConfig ? JSON.parse(savedConfig) : {&#10;        defaultMessages: {&#10;          'Saudação': 'Olá,\n\nEspero que esteja bem.',&#10;          'Agradecimento': 'Obrigado pelo seu email.\n\nAgradeço o seu contato.',&#10;          'Despedida': 'Atenciosamente,\n\nEquipe de Suporte'&#10;        },&#10;        defaultFooter: 'Atenciosamente,\n\nSeu Nome\nSeu Cargo\nSeu Telefone'&#10;      };&#10;    }&#10;    return {&#10;      defaultMessages: {&#10;        'Saudação': 'Olá,\n\nEspero que esteja bem.',&#10;        'Agradecimento': 'Obrigado pelo seu email.\n\nAgradeço o seu contato.',&#10;        'Despedida': 'Atenciosamente,\n\nEquipe de Suporte'&#10;      },&#10;      defaultFooter: 'Atenciosamente,\n\nSeu Nome\nSeu Cargo\nSeu Telefone'&#10;    };&#10;  });&#10;&#10;  const [sentEmails, setSentEmails] = useState&lt;SentEmail[]&gt;(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const savedEmails = localStorage.getItem('sentEmails');&#10;      return savedEmails ? JSON.parse(savedEmails) : [];&#10;    }&#10;    return [];&#10;  });&#10;&#10;  const [folders, setFolders] = useState(() =&gt; {&#10;    const initialFolders = [...EMAIL_FOLDERS];&#10;&#10;    if (typeof window !== 'undefined') {&#10;      const savedEmails = localStorage.getItem('sentEmails');&#10;      const sentEmailsArray = savedEmails ? JSON.parse(savedEmails) : [];&#10;&#10;      const sentFolder = initialFolders.find(folder =&gt; folder.id === 'sent');&#10;      if (sentFolder) {&#10;        sentFolder.count = sentEmailsArray.length;&#10;      }&#10;    }&#10;&#10;    return initialFolders;&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      localStorage.setItem('sentEmails', JSON.stringify(sentEmails));&#10;    }&#10;  }, [sentEmails]);&#10;&#10;  const addSentEmail = (email: Omit&lt;SentEmail, 'id' | 'from'&gt;) =&gt; {&#10;    const newEmail: SentEmail = {&#10;      ...email,&#10;      id: Date.now().toString(),&#10;      from: 'voce@example.com',&#10;    };&#10;&#10;    setSentEmails(prev =&gt; [newEmail, ...prev]);&#10;&#10;    setFolders(prev =&gt;&#10;      prev.map(folder =&gt;&#10;        folder.id === 'sent'&#10;          ? { ...folder, count: folder.count + 1 }&#10;          : folder&#10;      )&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900 flex items-center&quot;&gt;&#10;            &lt;Mail className=&quot;h-7 w-7 mr-3&quot;/&gt;&#10;            Email&#10;          &lt;/h1&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot;/&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar emails...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            variant=&quot;secondary&quot;&#10;            className=&quot;h-10 px-4&quot;&#10;            onClick={() =&gt; setShowFilterModal(true)}&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot;/&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex items-center gap-2 border-b border-gray-200 p-4&quot;&gt;&#10;        {folders.map((folder) =&gt; (&#10;          &lt;Button&#10;            key={folder.id}&#10;            variant={activeFolder === folder.id ? &quot;default&quot; : &quot;ghost&quot;}&#10;            className=&quot;flex items-center gap-2 h-10 px-4&quot;&#10;            onClick={() =&gt; setActiveFolder(folder.id)}&#10;          &gt;&#10;            &lt;folder.icon className=&quot;h-4 w-4&quot;/&gt;&#10;            &lt;span&gt;{folder.label}&lt;/span&gt;&#10;            {folder.count &gt; 0 &amp;&amp; (&#10;              &lt;Badge variant=&quot;secondary&quot; className=&quot;ml-1&quot;&gt;&#10;                {folder.count}&#10;              &lt;/Badge&gt;&#10;            )}&#10;          &lt;/Button&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex flex-1 overflow-hidden&quot;&gt;&#10;        {/* Show email list when no email is selected, or email detail when one is selected */}&#10;        {!selectedEmail ? (&#10;          &lt;EmailList&#10;            folder={activeFolder}&#10;            searchQuery={searchQuery}&#10;            selectedEmail={selectedEmail || null}&#10;            onEmailSelect={setSelectedEmail}&#10;            sentEmails={sentEmails}&#10;            onUnreadCountChange={(count) =&gt; {&#10;              setFolders(prev =&gt; {&#10;                if (!prev || !Array.isArray(prev)) {&#10;                  return EMAIL_FOLDERS.map(folder =&gt;&#10;                    folder.id === 'inbox' ? {...folder, count} : folder&#10;                  );&#10;                }&#10;&#10;                return prev.map(folder =&gt;&#10;                  folder.id === 'inbox'&#10;                    ? {...folder, count}&#10;                    : folder&#10;                );&#10;              });&#10;            }}&#10;          /&gt;&#10;        ) : (&#10;          &lt;EmailDetail&#10;            emailId={selectedEmail}&#10;            onClose={() =&gt; setSelectedEmail('')}&#10;            onSend={addSentEmail}&#10;            emailConfig={emailConfig}&#10;          /&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {showComposer &amp;&amp; (&#10;        &lt;EmailComposer&#10;          onClose={() =&gt; setShowComposer(false)}&#10;          onSend={addSentEmail}&#10;          emailConfig={emailConfig}&#10;        /&gt;&#10;      )}&#10;&#10;      {showFolderManager &amp;&amp; (&#10;        &lt;FolderManager&#10;          folders={folders}&#10;          onClose={() =&gt; setShowFolderManager(false)}&#10;          onSave={setFolders}&#10;        /&gt;&#10;      )}&#10;&#10;      &lt;Dialog open={showConfigDialog} onOpenChange={setShowConfigDialog}&gt;&#10;        &lt;DialogContent className=&quot;flex flex-col sm:max-w-[600px] max-h-[95vh]&quot;&gt;&#10;          &lt;DialogHeader&gt;&#10;            &lt;DialogTitle&gt;Configurações de Email&lt;/DialogTitle&gt;&#10;            &lt;DialogDescription&gt;&#10;              Configure mensagens padrão e assinatura para seus emails.&#10;            &lt;/DialogDescription&gt;&#10;          &lt;/DialogHeader&gt;&#10;&#10;          &lt;div className=&quot;grid gap-4 py-4 max-h-full overflow-auto&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;defaultFooter&quot; className=&quot;font-medium&quot;&gt;Assinatura Padrão&lt;/Label&gt;&#10;              &lt;Textarea&#10;                id=&quot;defaultFooter&quot;&#10;                value={emailConfig.defaultFooter}&#10;                onChange={(e) =&gt; setEmailConfig({&#10;                  ...emailConfig,&#10;                  defaultFooter: e.target.value&#10;                })}&#10;                placeholder=&quot;Digite sua assinatura padrão...&quot;&#10;                className=&quot;min-h-[100px]&quot;&#10;              /&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;                Esta assinatura será adicionada ao final dos seus emails.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col space-y-2&quot;&gt;&#10;              &lt;Label className=&quot;font-medium&quot;&gt;Mensagens Padrão&lt;/Label&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500 mb-2&quot;&gt;&#10;                Configure mensagens padrão que podem ser rapidamente inseridas nos seus emails.&#10;              &lt;/p&gt;&#10;&#10;              {Object.entries(emailConfig.defaultMessages).map(([key, value], index) =&gt; (&#10;                &lt;div key={index} className=&quot;grid grid-rows-[1fr,3fr] gap-2 mb-3&quot;&gt;&#10;                  &lt;Input&#10;                    value={key}&#10;                    onChange={(e) =&gt; {&#10;                      const newMessages = {...emailConfig.defaultMessages};&#10;                      const oldValue = newMessages[key];&#10;                      delete newMessages[key];&#10;                      newMessages[e.target.value] = oldValue;&#10;                      setEmailConfig({&#10;                        ...emailConfig,&#10;                        defaultMessages: newMessages&#10;                      });&#10;                    }}&#10;                    placeholder=&quot;Nome da mensagem&quot;&#10;                  /&gt;&#10;                  &lt;Textarea&#10;                    value={value}&#10;                    onChange={(e) =&gt; {&#10;                      const newMessages = {...emailConfig.defaultMessages};&#10;                      newMessages[key] = e.target.value;&#10;                      setEmailConfig({&#10;                        ...emailConfig,&#10;                        defaultMessages: newMessages&#10;                      });&#10;                    }}&#10;                    placeholder=&quot;Conteúdo da mensagem&quot;&#10;                    className=&quot;min-h-[80px]&quot;&#10;                  /&gt;&#10;                  &lt;div className=&quot;flex-grow-1 h-px bg-gray-200 my-2&quot;/&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;&#10;              &lt;Button&#10;                type=&quot;button&quot;&#10;                variant=&quot;outline&quot;&#10;                onClick={() =&gt; {&#10;                  const newMessages = {...emailConfig.defaultMessages};&#10;                  newMessages[`Nova Mensagem ${Object.keys(newMessages).length + 1}`] = '';&#10;                  setEmailConfig({&#10;                    ...emailConfig,&#10;                    defaultMessages: newMessages&#10;                  });&#10;                }}&#10;                className=&quot;mt-2 flex-grow-1&quot;&#10;              &gt;&#10;                &lt;Plus className=&quot;h-4 w-4 mr-2&quot;/&gt;&#10;                Adicionar Mensagem&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;DialogFooter&gt;&#10;            &lt;Button&#10;              type=&quot;button&quot;&#10;              variant=&quot;outline&quot;&#10;              onClick={() =&gt; setShowConfigDialog(false)}&#10;            &gt;&#10;              Cancelar&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              type=&quot;button&quot;&#10;              onClick={() =&gt; {&#10;                if (typeof window !== 'undefined') {&#10;                  localStorage.setItem('emailConfig', JSON.stringify(emailConfig));&#10;                }&#10;                setShowConfigDialog(false);&#10;&#10;                toast({&#10;                  title: &quot;Configurações salvas&quot;,&#10;                  description: &quot;Suas configurações de email foram salvas com sucesso.&quot;,&#10;                });&#10;              }}&#10;            &gt;&#10;              Salvar Configurações&#10;            &lt;/Button&gt;&#10;          &lt;/DialogFooter&gt;&#10;        &lt;/DialogContent&gt;&#10;      &lt;/Dialog&gt;&#10;&#10;      {/* Email Filter Modal */}&#10;      {showFilterModal &amp;&amp; (&#10;        &lt;Dialog open={showFilterModal} onOpenChange={setShowFilterModal}&gt;&#10;          &lt;DialogContent&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle&gt;Filtrar Emails&lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;            &lt;div className=&quot;grid gap-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;sender&quot;&gt;Remetente&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;sender&quot;&#10;                  value={emailFilters.sender}&#10;                  onChange={(e) =&gt; setEmailFilters({...emailFilters, sender: e.target.value})}&#10;                  placeholder=&quot;Filtrar por remetente&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;isRead&quot;&gt;Status de Leitura&lt;/Label&gt;&#10;                &lt;Select&#10;                  value={emailFilters.isRead}&#10;                  onValueChange={(value) =&gt; setEmailFilters({...emailFilters, isRead: value})}&#10;                &gt;&#10;                  &lt;SelectTrigger&gt;&#10;                    &lt;SelectValue placeholder=&quot;Selecione o status&quot; /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;&quot;&gt;Todos&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;read&quot;&gt;Lidos&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;unread&quot;&gt;Não Lidos&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;hasAttachment&quot;&gt;Anexos&lt;/Label&gt;&#10;                &lt;Select&#10;                  value={emailFilters.hasAttachment}&#10;                  onValueChange={(value) =&gt; setEmailFilters({...emailFilters, hasAttachment: value})}&#10;                &gt;&#10;                  &lt;SelectTrigger&gt;&#10;                    &lt;SelectValue placeholder=&quot;Selecione anexos&quot; /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;&quot;&gt;Todos&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;true&quot;&gt;Com Anexo&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;false&quot;&gt;Sem Anexo&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;dateFrom&quot;&gt;Data Início&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;dateFrom&quot;&#10;                    type=&quot;date&quot;&#10;                    value={emailFilters.dateFrom}&#10;                    onChange={(e) =&gt; setEmailFilters({...emailFilters, dateFrom: e.target.value})}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;dateTo&quot;&gt;Data Fim&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;dateTo&quot;&#10;                    type=&quot;date&quot;&#10;                    value={emailFilters.dateTo}&#10;                    onChange={(e) =&gt; setEmailFilters({...emailFilters, dateTo: e.target.value})}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;DialogFooter&gt;&#10;              &lt;Button&#10;                variant=&quot;outline&quot;&#10;                onClick={() =&gt; {&#10;                  setEmailFilters({&#10;                    isRead: '',&#10;                    hasAttachment: '',&#10;                    dateFrom: '',&#10;                    dateTo: '',&#10;                    sender: ''&#10;                  });&#10;                  setShowFilterModal(false);&#10;                }}&#10;              &gt;&#10;                Limpar Filtros&#10;              &lt;/Button&gt;&#10;              &lt;Button onClick={() =&gt; setShowFilterModal(false)}&gt;&#10;                Aplicar Filtros&#10;              &lt;/Button&gt;&#10;            &lt;/DialogFooter&gt;&#10;          &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/responsaveis/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/responsaveis/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { &#10;  Table, &#10;  TableBody, &#10;  TableCell, &#10;  TableHead, &#10;  TableHeader, &#10;  TableRow &#10;} from '@/components/ui/table';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown&#10;} from 'lucide-react';&#10;import { Responsavel } from '@/lib/types';&#10;import { mockResponsaveis } from '@/lib/mockData';&#10;import ResponsavelModal from '../../components/responsaveis/ResponsavelModal';&#10;&#10;export default function ResponsaveisPage() {&#10;  const [responsaveis, setResponsaveis] = useState&lt;Responsavel[]&gt;(mockResponsaveis);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedResponsavel, setSelectedResponsavel] = useState&lt;Responsavel | null&gt;(null);&#10;  const [showResponsavelModal, setShowResponsavelModal] = useState(false);&#10;  const [sortField, setSortField] = useState&lt;keyof Responsavel | null&gt;(null);&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;&#10;  const handleSort = (field: keyof Responsavel) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');&#10;    } else {&#10;      setSortField(field);&#10;      setSortDirection('asc');&#10;    }&#10;  };&#10;&#10;  const sortedResponsaveis = [...responsaveis].sort((a, b) =&gt; {&#10;    if (!sortField) return 0;&#10;&#10;    const aValue = a[sortField];&#10;    const bValue = b[sortField];&#10;&#10;    if (aValue === bValue) return 0;&#10;&#10;    const direction = sortDirection === 'asc' ? 1 : -1;&#10;&#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction;&#10;    }&#10;&#10;    return 0;&#10;  });&#10;&#10;  const filteredResponsaveis = sortedResponsaveis.filter(responsavel =&gt; &#10;    responsavel.dsNome.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    responsavel.dsEmail.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    responsavel.nmTelefone.toLowerCase().includes(searchQuery.toLowerCase())&#10;  );&#10;&#10;  const handleCreateResponsavel = () =&gt; {&#10;    setSelectedResponsavel(null);&#10;    setShowResponsavelModal(true);&#10;  };&#10;&#10;  const handleEditResponsavel = (responsavel: Responsavel) =&gt; {&#10;    setSelectedResponsavel(responsavel);&#10;    setShowResponsavelModal(true);&#10;  };&#10;&#10;  const handleDeleteResponsavel = (id: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir este responsável?')) {&#10;      setResponsaveis(responsaveis.filter(responsavel =&gt; responsavel.idResponsavel !== id));&#10;    }&#10;  };&#10;&#10;  const handleSaveResponsavel = (responsavel: Responsavel) =&gt; {&#10;    if (selectedResponsavel) {&#10;      // Update existing responsavel&#10;      setResponsaveis(responsaveis.map(r =&gt; r.idResponsavel === responsavel.idResponsavel ? responsavel : r));&#10;    } else {&#10;      // Add new responsavel&#10;      setResponsaveis([...responsaveis, responsavel]);&#10;    }&#10;    setShowResponsavelModal(false);&#10;    setSelectedResponsavel(null);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Responsáveis&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateResponsavel} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Novo Responsável&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome, email ou telefone...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button variant=&quot;secondary&quot; className=&quot;h-10 px-4&quot;&gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsNome')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsEmail')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Email&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmTelefone')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Telefone&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredResponsaveis.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={4} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhum responsável encontrado&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredResponsaveis.map((responsavel) =&gt; (&#10;                &lt;TableRow key={responsavel.idResponsavel} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;{responsavel.dsNome}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{responsavel.dsEmail}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{responsavel.nmTelefone}&lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleEditResponsavel(responsavel)}&#10;                      &gt;&#10;                        &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleDeleteResponsavel(responsavel.idResponsavel)}&#10;                        className=&quot;text-red-500 hover:text-red-700&quot;&#10;                      &gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Responsavel Modal */}&#10;      {showResponsavelModal &amp;&amp; (&#10;        &lt;ResponsavelModal&#10;          responsavel={selectedResponsavel}&#10;          onClose={() =&gt; {&#10;            setShowResponsavelModal(false);&#10;            setSelectedResponsavel(null);&#10;          }}&#10;          onSave={handleSaveResponsavel}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { &#10;  Table, &#10;  TableBody, &#10;  TableCell, &#10;  TableHead, &#10;  TableHeader, &#10;  TableRow &#10;} from '@/components/ui/table';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown,&#10;  X&#10;} from 'lucide-react';&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogFooter&#10;} from '@/components/ui/dialog';&#10;import { Label } from '@/components/ui/label';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { Responsavel } from '@/lib/types';&#10;import { mockResponsaveis } from '@/lib/mockData';&#10;import ResponsavelModal from '../../components/responsaveis/ResponsavelModal';&#10;&#10;export default function ResponsaveisPage() {&#10;  const [responsaveis, setResponsaveis] = useState&lt;Responsavel[]&gt;(mockResponsaveis);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedResponsavel, setSelectedResponsavel] = useState&lt;Responsavel | null&gt;(null);&#10;  const [showResponsavelModal, setShowResponsavelModal] = useState(false);&#10;  const [showFilterModal, setShowFilterModal] = useState(false);&#10;  const [sortField, setSortField] = useState&lt;keyof Responsavel | null&gt;(null);&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;&#10;  // Filter states&#10;  const [filters, setFilters] = useState({&#10;    nome: '',&#10;    email: '',&#10;    telefone: '',&#10;    perfil: ''&#10;  });&#10;  const [activeFilters, setActiveFilters] = useState(filters);&#10;&#10;  const handleSort = (field: keyof Responsavel) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');&#10;    } else {&#10;      setSortField(field);&#10;      setSortDirection('asc');&#10;    }&#10;  };&#10;&#10;  const sortedResponsaveis = [...responsaveis].sort((a, b) =&gt; {&#10;    if (!sortField) return 0;&#10;&#10;    const aValue = a[sortField];&#10;    const bValue = b[sortField];&#10;&#10;    if (aValue === bValue) return 0;&#10;&#10;    const direction = sortDirection === 'asc' ? 1 : -1;&#10;&#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction;&#10;    }&#10;&#10;    return 0;&#10;  });&#10;&#10;  const handleClearFilters = () =&gt; {&#10;    const emptyFilters = {&#10;      nome: '',&#10;      email: '',&#10;      telefone: '',&#10;      perfil: ''&#10;    };&#10;    setFilters(emptyFilters);&#10;    setActiveFilters(emptyFilters);&#10;  };&#10;&#10;  const handleApplyFilters = () =&gt; {&#10;    setActiveFilters(filters);&#10;    setShowFilterModal(false);&#10;  };&#10;&#10;  const filteredResponsaveis = sortedResponsaveis.filter(responsavel =&gt; {&#10;    // Search query filter&#10;    const matchesSearch = responsavel.dsNome.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      responsavel.dsEmail.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      responsavel.nmTelefone.toLowerCase().includes(searchQuery.toLowerCase());&#10;&#10;    // Advanced filters&#10;    const matchesNome = !activeFilters.nome || &#10;      responsavel.dsNome.toLowerCase().includes(activeFilters.nome.toLowerCase());&#10;    &#10;    const matchesEmail = !activeFilters.email || &#10;      responsavel.dsEmail.toLowerCase().includes(activeFilters.email.toLowerCase());&#10;    &#10;    const matchesTelefone = !activeFilters.telefone || &#10;      responsavel.nmTelefone.includes(activeFilters.telefone);&#10;    &#10;    const matchesPerfil = !activeFilters.perfil || &#10;      responsavel.dsPerfil === activeFilters.perfil;&#10;&#10;    return matchesSearch &amp;&amp; matchesNome &amp;&amp; matchesEmail &amp;&amp; matchesTelefone &amp;&amp; matchesPerfil;&#10;  });&#10;&#10;  const hasActiveFilters = Object.values(activeFilters).some(value =&gt; value !== '');&#10;&#10;  const handleCreateResponsavel = () =&gt; {&#10;    setSelectedResponsavel(null);&#10;    setShowResponsavelModal(true);&#10;  };&#10;&#10;  const handleEditResponsavel = (responsavel: Responsavel) =&gt; {&#10;    setSelectedResponsavel(responsavel);&#10;    setShowResponsavelModal(true);&#10;  };&#10;&#10;  const handleDeleteResponsavel = (id: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir este responsável?')) {&#10;      setResponsaveis(responsaveis.filter(responsavel =&gt; responsavel.idResponsavel !== id));&#10;    }&#10;  };&#10;&#10;  const handleSaveResponsavel = (responsavel: Responsavel) =&gt; {&#10;    if (selectedResponsavel) {&#10;      // Update existing responsavel&#10;      setResponsaveis(responsaveis.map(r =&gt; r.idResponsavel === responsavel.idResponsavel ? responsavel : r));&#10;    } else {&#10;      // Add new responsavel&#10;      setResponsaveis([...responsaveis, responsavel]);&#10;    }&#10;    setShowResponsavelModal(false);&#10;    setSelectedResponsavel(null);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Responsáveis&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateResponsavel} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Novo Responsável&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome, email ou telefone...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button &#10;            variant=&quot;secondary&quot; &#10;            className=&quot;h-10 px-4&quot;&#10;            onClick={() =&gt; setShowFilterModal(true)}&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsNome')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsEmail')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Email&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmTelefone')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Telefone&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredResponsaveis.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={4} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhum responsável encontrado&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredResponsaveis.map((responsavel) =&gt; (&#10;                &lt;TableRow key={responsavel.idResponsavel} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;{responsavel.dsNome}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{responsavel.dsEmail}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{responsavel.nmTelefone}&lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleEditResponsavel(responsavel)}&#10;                      &gt;&#10;                        &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleDeleteResponsavel(responsavel.idResponsavel)}&#10;                        className=&quot;text-red-500 hover:text-red-700&quot;&#10;                      &gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Responsavel Modal */}&#10;      {showResponsavelModal &amp;&amp; (&#10;        &lt;ResponsavelModal&#10;          responsavel={selectedResponsavel}&#10;          onClose={() =&gt; {&#10;            setShowResponsavelModal(false);&#10;            setSelectedResponsavel(null);&#10;          }}&#10;          onSave={handleSaveResponsavel}&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Filter Modal */}&#10;      {showFilterModal &amp;&amp; (&#10;        &lt;Dialog open={showFilterModal} onOpenChange={setShowFilterModal}&gt;&#10;          &lt;DialogContent&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle&gt;Filtrar Responsáveis&lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;            &lt;div className=&quot;grid gap-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;nome&quot;&gt;Nome&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;nome&quot;&#10;                  value={filters.nome}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, nome: e.target.value })}&#10;                  placeholder=&quot;Filtrar por nome&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;email&quot;&gt;Email&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;email&quot;&#10;                  value={filters.email}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, email: e.target.value })}&#10;                  placeholder=&quot;Filtrar por email&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;telefone&quot;&gt;Telefone&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;telefone&quot;&#10;                  value={filters.telefone}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, telefone: e.target.value })}&#10;                  placeholder=&quot;Filtrar por telefone&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;perfil&quot;&gt;Perfil&lt;/Label&gt;&#10;                &lt;Select&#10;                  id=&quot;perfil&quot;&#10;                  value={filters.perfil}&#10;                  onValueChange={(value) =&gt; setFilters({ ...filters, perfil: value })}&#10;                  placeholder=&quot;Selecione um perfil&quot;&#10;                &gt;&#10;                  &lt;SelectTrigger&gt;&#10;                    &lt;SelectValue placeholder=&quot;Selecione um perfil&quot; /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;admin&quot;&gt;Admin&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;user&quot;&gt;User&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;manager&quot;&gt;Manager&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/DialogContent&gt;&#10;          &lt;DialogFooter&gt;&#10;            &lt;Button &#10;              variant=&quot;secondary&quot; &#10;              onClick={() =&gt; {&#10;                setShowFilterModal(false);&#10;                handleClearFilters();&#10;              }}&#10;              className=&quot;mr-2&quot;&#10;            &gt;&#10;              &lt;X className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Limpar Filtros&#10;            &lt;/Button&gt;&#10;            &lt;Button onClick={handleApplyFilters}&gt;&#10;              Aplicar Filtros&#10;            &lt;/Button&gt;&#10;          &lt;/DialogFooter&gt;&#10;        &lt;/Dialog&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/temas/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/temas/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState } from 'react'&#10;import { Button } from '@/components/ui/button'&#10;import { Input } from '@/components/ui/input'&#10;import { Badge } from '@/components/ui/badge'&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow,&#10;} from '@/components/ui/table'&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown,&#10;  X&#10;} from 'lucide-react'&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogFooter&#10;} from '@/components/ui/dialog'&#10;import { Label } from '@/components/ui/label'&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'&#10;import { Tema } from '@/lib/types'&#10;import { mockTemas, mockAreas } from '@/lib/mockData'&#10;import { TemaModal } from '@/components/temas/TemaModal'&#10;&#10;export default function TemasPage() {&#10;  const [temas, setTemas] = useState&lt;Tema[]&gt;(mockTemas)&#10;  const [searchQuery, setSearchQuery] = useState('')&#10;  const [selectedTema, setSelectedTema] = useState&lt;Tema | null&gt;(null)&#10;  const [showTemaModal, setShowTemaModal] = useState(false)&#10;  const [sortField, setSortField] = useState&lt;keyof Tema | null&gt;(null)&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc')&#10;  const [showFilterModal, setShowFilterModal] = useState(false)&#10;  const [filterAreas, setFilterAreas] = useState&lt;string[]&gt;([])&#10;  const [filterTpContagem, setFilterTpContagem] = useState&lt;'UTEIS' | 'CORRIDOS' | null&gt;(null)&#10;&#10;  const handleSort = (field: keyof Tema) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')&#10;    } else {&#10;      setSortField(field)&#10;      setSortDirection('asc')&#10;    }&#10;  }&#10;&#10;  const sortedTemas = [...temas].sort((a, b) =&gt; {&#10;    if (!sortField) return 0&#10;    &#10;    const aValue = a[sortField]&#10;    const bValue = b[sortField]&#10;    &#10;    if (aValue === bValue) return 0&#10;    &#10;    const direction = sortDirection === 'asc' ? 1 : -1&#10;    &#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction&#10;    }&#10;    &#10;    if (Array.isArray(aValue) &amp;&amp; Array.isArray(bValue)) {&#10;      return (aValue.length - bValue.length) * direction&#10;    }&#10;    &#10;    if (aValue &lt; bValue) return -1 * direction&#10;    return 1 * direction&#10;  })&#10;&#10;  const filteredTemas = sortedTemas.filter(tema =&gt;&#10;    tema.nmTema.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    tema.dsTema.toLowerCase().includes(searchQuery.toLowerCase())&#10;  ).filter(tema =&gt; {&#10;    const areas = getAreasForTema(tema.idAreas)&#10;    const areaMatch = filterAreas.length === 0 || areas.some(area =&gt; filterAreas.includes(area.idArea))&#10;    const tpContagemMatch = !filterTpContagem || tema.tpContagem === filterTpContagem&#10;    return areaMatch &amp;&amp; tpContagemMatch&#10;  })&#10;&#10;  const getAreasForTema = (idAreas: string[]) =&gt; {&#10;    return mockAreas.filter(area =&gt; idAreas.includes(area.idArea))&#10;  }&#10;&#10;  const handleCreateTema = () =&gt; {&#10;    setSelectedTema(null)&#10;    setShowTemaModal(true)&#10;  }&#10;&#10;  const handleEditTema = (tema: Tema) =&gt; {&#10;    setSelectedTema(tema)&#10;    setShowTemaModal(true)&#10;  }&#10;&#10;  const handleDeleteTema = (temaId: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir este tema?')) {&#10;      setTemas(prev =&gt; prev.filter(tema =&gt; tema.idTema !== temaId))&#10;    }&#10;  }&#10;&#10;  const handleSaveTema = (tema: Tema) =&gt; {&#10;    if (selectedTema) {&#10;      // Update existing tema&#10;      setTemas(prev =&gt; prev.map(t =&gt; t.idTema === tema.idTema ? tema : t))&#10;    } else {&#10;      // Add new tema&#10;      setTemas(prev =&gt; [...prev, tema])&#10;    }&#10;    setShowTemaModal(false)&#10;    setSelectedTema(null)&#10;  }&#10;&#10;  const handleFilterSubmit = () =&gt; {&#10;    setShowFilterModal(false)&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Temas&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateTema} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Novo Tema&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome ou descrição...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            variant=&quot;secondary&quot;&#10;            className=&quot;h-10 px-4&quot;&#10;            onClick={() =&gt; setShowFilterModal(true)}&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Descrição&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('idAreas')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Áreas Relacionadas&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nrDiasPrazo')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Prazo (dias)&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('tpContagem')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Tipo de Contagem&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dtCadastro')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Data de Cadastro&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredTemas.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={7} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhum tema encontrado&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredTemas.map((tema) =&gt; {&#10;                const areas = getAreasForTema(tema.idAreas)&#10;                return (&#10;                  &lt;TableRow key={tema.idTema} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                    &lt;TableCell className=&quot;font-medium&quot;&gt;{tema.nmTema}&lt;/TableCell&gt;&#10;                    &lt;TableCell className=&quot;max-w-xs&quot;&gt;&#10;                      &lt;div className=&quot;truncate&quot; title={tema.dsTema}&gt;&#10;                        {tema.dsTema}&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-1 max-w-sm&quot;&gt;&#10;                        {areas.length === 0 ? (&#10;                          &lt;span className=&quot;text-gray-400 text-sm&quot;&gt;Nenhuma área&lt;/span&gt;&#10;                        ) : (&#10;                          areas.map((area) =&gt; (&#10;                            &lt;Badge key={area.idArea} variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#10;                              {area.nmArea}&#10;                            &lt;/Badge&gt;&#10;                          ))&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{tema.nrDiasPrazo}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;&#10;                      &lt;Badge variant={tema.tpContagem === 'UTEIS' ? 'default' : 'secondary'}&gt;&#10;                        {tema.tpContagem === 'UTEIS' ? 'Úteis' : 'Corridos'}&#10;                      &lt;/Badge&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{new Date(tema.dtCadastro).toLocaleDateString('pt-BR')}&lt;/TableCell&gt;&#10;                    &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                        &lt;Button &#10;                          variant=&quot;ghost&quot; &#10;                          size=&quot;icon&quot; &#10;                          onClick={() =&gt; handleEditTema(tema)}&#10;                        &gt;&#10;                          &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;Button &#10;                          variant=&quot;ghost&quot; &#10;                          size=&quot;icon&quot; &#10;                          onClick={() =&gt; handleDeleteTema(tema.idTema)}&#10;                          className=&quot;text-red-500 hover:text-red-700&quot;&#10;                        &gt;&#10;                          &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                  &lt;/TableRow&gt;&#10;                )&#10;              })&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Tema Modal */}&#10;      {showTemaModal &amp;&amp; (&#10;        &lt;TemaModal&#10;          isOpen={showTemaModal}&#10;          onClose={() =&gt; {&#10;            setShowTemaModal(false)&#10;            setSelectedTema(null)&#10;          }}&#10;          onSave={handleSaveTema}&#10;          tema={selectedTema}&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Filter Modal */}&#10;      {showFilterModal &amp;&amp; (&#10;        &lt;Dialog open={showFilterModal} onOpenChange={setShowFilterModal}&gt;&#10;          &lt;DialogContent className=&quot;max-w-sm p-6&quot;&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle className=&quot;text-lg font-bold&quot;&gt;&#10;                Filtrar Temas&#10;              &lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;&#10;            &lt;div className=&quot;mt-4&quot;&gt;&#10;              &lt;Label htmlFor=&quot;areas&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Áreas Relacionadas&#10;              &lt;/Label&gt;&#10;              &lt;Select&#10;                id=&quot;areas&quot;&#10;                value={filterAreas}&#10;                onValueChange={setFilterAreas}&#10;                multiple&#10;                className=&quot;mt-2&quot;&#10;              &gt;&#10;                &lt;SelectTrigger&gt;&#10;                  &lt;SelectValue placeholder=&quot;Selecione as áreas&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {mockAreas.map(area =&gt; (&#10;                    &lt;SelectItem key={area.idArea} value={area.idArea}&gt;&#10;                      {area.nmArea}&#10;                    &lt;/SelectItem&gt;&#10;                  ))}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-4&quot;&gt;&#10;              &lt;Label htmlFor=&quot;tpContagem&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Tipo de Contagem&#10;              &lt;/Label&gt;&#10;              &lt;Select&#10;                id=&quot;tpContagem&quot;&#10;                value={filterTpContagem}&#10;                onValueChange={setFilterTpContagem}&#10;                className=&quot;mt-2&quot;&#10;              &gt;&#10;                &lt;SelectTrigger&gt;&#10;                  &lt;SelectValue placeholder=&quot;Selecione o tipo de contagem&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;UTEIS&quot;&gt;Úteis&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;CORRIDOS&quot;&gt;Corridos&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;DialogFooter className=&quot;mt-6&quot;&gt;&#10;              &lt;Button&#10;                onClick={handleFilterSubmit}&#10;                className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;              &gt;&#10;                Aplicar Filtros&#10;              &lt;/Button&gt;&#10;            &lt;/DialogFooter&gt;&#10;          &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  )&#10;}" />
              <option name="updatedContent" value="'use client'&#10;&#10;import { useState } from 'react'&#10;import { Button } from '@/components/ui/button'&#10;import { Input } from '@/components/ui/input'&#10;import { Badge } from '@/components/ui/badge'&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow,&#10;} from '@/components/ui/table'&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown,&#10;  X&#10;} from 'lucide-react'&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogFooter&#10;} from '@/components/ui/dialog'&#10;import { Label } from '@/components/ui/label'&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'&#10;import { Tema } from '@/lib/types'&#10;import { mockTemas, mockAreas } from '@/lib/mockData'&#10;import { TemaModal } from '@/components/temas/TemaModal'&#10;&#10;export default function TemasPage() {&#10;  const [temas, setTemas] = useState&lt;Tema[]&gt;(mockTemas)&#10;  const [searchQuery, setSearchQuery] = useState('')&#10;  const [selectedTema, setSelectedTema] = useState&lt;Tema | null&gt;(null)&#10;  const [showTemaModal, setShowTemaModal] = useState(false)&#10;  const [sortField, setSortField] = useState&lt;keyof Tema | null&gt;(null)&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc')&#10;  const [showFilterModal, setShowFilterModal] = useState(false)&#10;  const [filterAreas, setFilterAreas] = useState&lt;string[]&gt;([])&#10;  const [filterTpContagem, setFilterTpContagem] = useState&lt;'UTEIS' | 'CORRIDOS' | null&gt;(null)&#10;&#10;  const handleSort = (field: keyof Tema) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')&#10;    } else {&#10;      setSortField(field)&#10;      setSortDirection('asc')&#10;    }&#10;  }&#10;&#10;  const sortedTemas = [...temas].sort((a, b) =&gt; {&#10;    if (!sortField) return 0&#10;    &#10;    const aValue = a[sortField]&#10;    const bValue = b[sortField]&#10;    &#10;    if (aValue === bValue) return 0&#10;    &#10;    const direction = sortDirection === 'asc' ? 1 : -1&#10;    &#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction&#10;    }&#10;    &#10;    if (Array.isArray(aValue) &amp;&amp; Array.isArray(bValue)) {&#10;      return (aValue.length - bValue.length) * direction&#10;    }&#10;    &#10;    if (aValue &lt; bValue) return -1 * direction&#10;    return 1 * direction&#10;  })&#10;&#10;  const getAreasForTema = (idAreas: string[]) =&gt; {&#10;    return mockAreas.filter(area =&gt; idAreas.includes(area.idArea))&#10;  }&#10;&#10;  const filteredTemas = sortedTemas.filter(tema =&gt;&#10;    tema.nmTema.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    tema.dsTema.toLowerCase().includes(searchQuery.toLowerCase())&#10;  ).filter(tema =&gt; {&#10;    const areas = getAreasForTema(tema.idAreas)&#10;    const areaMatch = filterAreas.length === 0 || areas.some(area =&gt; filterAreas.includes(area.idArea))&#10;    const tpContagemMatch = !filterTpContagem || tema.tpContagem === filterTpContagem&#10;    return areaMatch &amp;&amp; tpContagemMatch&#10;  })&#10;&#10;  const handleCreateTema = () =&gt; {&#10;    setSelectedTema(null)&#10;    setShowTemaModal(true)&#10;  }&#10;&#10;  const handleEditTema = (tema: Tema) =&gt; {&#10;    setSelectedTema(tema)&#10;    setShowTemaModal(true)&#10;  }&#10;&#10;  const handleDeleteTema = (temaId: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir este tema?')) {&#10;      setTemas(prev =&gt; prev.filter(tema =&gt; tema.idTema !== temaId))&#10;    }&#10;  }&#10;&#10;  const handleSaveTema = (tema: Tema) =&gt; {&#10;    if (selectedTema) {&#10;      // Update existing tema&#10;      setTemas(prev =&gt; prev.map(t =&gt; t.idTema === tema.idTema ? tema : t))&#10;    } else {&#10;      // Add new tema&#10;      setTemas(prev =&gt; [...prev, tema])&#10;    }&#10;    setShowTemaModal(false)&#10;    setSelectedTema(null)&#10;  }&#10;&#10;  const handleFilterSubmit = () =&gt; {&#10;    setShowFilterModal(false)&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Temas&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateTema} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Novo Tema&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome ou descrição...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            variant=&quot;secondary&quot;&#10;            className=&quot;h-10 px-4&quot;&#10;            onClick={() =&gt; setShowFilterModal(true)}&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Descrição&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('idAreas')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Áreas Relacionadas&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nrDiasPrazo')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Prazo (dias)&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('tpContagem')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Tipo de Contagem&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dtCadastro')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Data de Cadastro&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredTemas.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={7} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhum tema encontrado&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredTemas.map((tema) =&gt; {&#10;                const areas = getAreasForTema(tema.idAreas)&#10;                return (&#10;                  &lt;TableRow key={tema.idTema} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                    &lt;TableCell className=&quot;font-medium&quot;&gt;{tema.nmTema}&lt;/TableCell&gt;&#10;                    &lt;TableCell className=&quot;max-w-xs&quot;&gt;&#10;                      &lt;div className=&quot;truncate&quot; title={tema.dsTema}&gt;&#10;                        {tema.dsTema}&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-1 max-w-sm&quot;&gt;&#10;                        {areas.length === 0 ? (&#10;                          &lt;span className=&quot;text-gray-400 text-sm&quot;&gt;Nenhuma área&lt;/span&gt;&#10;                        ) : (&#10;                          areas.map((area) =&gt; (&#10;                            &lt;Badge key={area.idArea} variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#10;                              {area.nmArea}&#10;                            &lt;/Badge&gt;&#10;                          ))&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{tema.nrDiasPrazo}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;&#10;                      &lt;Badge variant={tema.tpContagem === 'UTEIS' ? 'default' : 'secondary'}&gt;&#10;                        {tema.tpContagem === 'UTEIS' ? 'Úteis' : 'Corridos'}&#10;                      &lt;/Badge&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{new Date(tema.dtCadastro).toLocaleDateString('pt-BR')}&lt;/TableCell&gt;&#10;                    &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                        &lt;Button &#10;                          variant=&quot;ghost&quot; &#10;                          size=&quot;icon&quot; &#10;                          onClick={() =&gt; handleEditTema(tema)}&#10;                        &gt;&#10;                          &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;Button &#10;                          variant=&quot;ghost&quot; &#10;                          size=&quot;icon&quot; &#10;                          onClick={() =&gt; handleDeleteTema(tema.idTema)}&#10;                          className=&quot;text-red-500 hover:text-red-700&quot;&#10;                        &gt;&#10;                          &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                  &lt;/TableRow&gt;&#10;                )&#10;              })&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Tema Modal */}&#10;      {showTemaModal &amp;&amp; (&#10;        &lt;TemaModal&#10;          isOpen={showTemaModal}&#10;          onClose={() =&gt; {&#10;            setShowTemaModal(false)&#10;            setSelectedTema(null)&#10;          }}&#10;          onSave={handleSaveTema}&#10;          tema={selectedTema}&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Filter Modal */}&#10;      {showFilterModal &amp;&amp; (&#10;        &lt;Dialog open={showFilterModal} onOpenChange={setShowFilterModal}&gt;&#10;          &lt;DialogContent className=&quot;max-w-sm p-6&quot;&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle className=&quot;text-lg font-bold&quot;&gt;&#10;                Filtrar Temas&#10;              &lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;&#10;            &lt;div className=&quot;mt-4&quot;&gt;&#10;              &lt;Label htmlFor=&quot;areas&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Áreas Relacionadas&#10;              &lt;/Label&gt;&#10;              &lt;Select&#10;                id=&quot;areas&quot;&#10;                value={filterAreas}&#10;                onValueChange={setFilterAreas}&#10;                multiple&#10;                className=&quot;mt-2&quot;&#10;              &gt;&#10;                &lt;SelectTrigger&gt;&#10;                  &lt;SelectValue placeholder=&quot;Selecione as áreas&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {mockAreas.map(area =&gt; (&#10;                    &lt;SelectItem key={area.idArea} value={area.idArea}&gt;&#10;                      {area.nmArea}&#10;                    &lt;/SelectItem&gt;&#10;                  ))}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-4&quot;&gt;&#10;              &lt;Label htmlFor=&quot;tpContagem&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Tipo de Contagem&#10;              &lt;/Label&gt;&#10;              &lt;Select&#10;                id=&quot;tpContagem&quot;&#10;                value={filterTpContagem}&#10;                onValueChange={setFilterTpContagem}&#10;                className=&quot;mt-2&quot;&#10;              &gt;&#10;                &lt;SelectTrigger&gt;&#10;                  &lt;SelectValue placeholder=&quot;Selecione o tipo de contagem&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;UTEIS&quot;&gt;Úteis&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;CORRIDOS&quot;&gt;Corridos&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;DialogFooter className=&quot;mt-6&quot;&gt;&#10;              &lt;Button&#10;                onClick={handleFilterSubmit}&#10;                className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;              &gt;&#10;                Aplicar Filtros&#10;              &lt;/Button&gt;&#10;            &lt;/DialogFooter&gt;&#10;          &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/dashboard/Dashboard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/dashboard/Dashboard.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState, useEffect } from 'react';&#10;import { &#10;  BarChart, &#10;  Calendar, &#10;  Clock, &#10;  FileText, &#10;  Mail, &#10;  MoreHorizontal, &#10;  RefreshCw, &#10;  Users, &#10;  CheckCircle,&#10;  AlertCircle,&#10;  Clock3,&#10;  XCircle&#10;} from 'lucide-react';&#10;import { Button } from '@/components/ui/button';&#10;import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';&#10;import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';&#10;import { Badge } from '@/components/ui/badge';&#10;&#10;export default function Dashboard() {&#10;  const [lastUpdated, setLastUpdated] = useState&lt;Date | null&gt;(null);&#10;  &#10;  // Initialize lastUpdated on client side only&#10;  useEffect(() =&gt; {&#10;    setLastUpdated(new Date());&#10;  }, []);&#10;  const [calendarView, setCalendarView] = useState&lt;'month' | 'week' | 'year'&gt;('month');&#10;&#10;  const refreshData = () =&gt; {&#10;    setLastUpdated(new Date());&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;p-6 space-y-6 bg-gray-50&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900 flex items-center&quot;&gt;&#10;            &lt;BarChart className=&quot;h-8 w-8 mr-3&quot; /&gt;&#10;            Dashboard&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-500 mt-1&quot;&gt;&#10;            Visão geral do sistema e métricas importantes&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;          &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;            Última atualização: {lastUpdated ? lastUpdated.toLocaleTimeString() : '--:--:--'}&#10;          &lt;/span&gt;&#10;          &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot; onClick={refreshData}&gt;&#10;            &lt;RefreshCw className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Atualizar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Main Content */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;        {/* Tasks Overview */}&#10;        &lt;Card className=&quot;flex flex-col lg:col-span-2&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;CardTitle&gt;Visão Geral de Obrigações&lt;/CardTitle&gt;&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;            &lt;CardDescription&gt;Status de todas as obrigações contratuais&lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent&gt;&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;CheckCircle className=&quot;h-4 w-4 text-green-500 mr-2&quot; /&gt;&#10;                    &lt;span&gt;Concluídas&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;8 (44%)&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;h-2 bg-gray-100 w-full rounded-full overflow-hidden&quot;&gt;&#10;                  &lt;div className=&quot;h-full bg-green-500&quot; style={{ width: &quot;44%&quot; }}&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;Clock3 className=&quot;h-4 w-4 text-blue-500 mr-2&quot; /&gt;&#10;                    &lt;span&gt;Em Andamento&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;5 (28%)&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;h-2 bg-gray-100 w-full rounded-full overflow-hidden&quot;&gt;&#10;                  &lt;div className=&quot;h-full bg-blue-500&quot; style={{ width: &quot;28%&quot; }}&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;AlertCircle className=&quot;h-4 w-4 text-yellow-500 mr-2&quot; /&gt;&#10;                    &lt;span&gt;Pendentes&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;3 (17%)&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;h-2 bg-gray-100 w-full rounded-full overflow-hidden&quot;&gt;&#10;                  &lt;div className=&quot;h-full bg-yellow-500&quot; style={{ width: &quot;17%&quot; }}&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;XCircle className=&quot;h-4 w-4 text-red-500 mr-2&quot; /&gt;&#10;                    &lt;span&gt;Atrasadas&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;2 (11%)&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;h-2 bg-gray-100 w-full rounded-full overflow-hidden&quot;&gt;&#10;                  &lt;div className=&quot;h-full bg-red-500&quot; style={{ width: &quot;11%&quot; }}&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6&quot;&gt;&#10;              &lt;h4 className=&quot;text-sm font-medium mb-3&quot;&gt;Obrigações Recentes&lt;/h4&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                {[&#10;                  { id: 1, title: &quot;4.2.1 - Contrato&quot;, status: &quot;concluido&quot;, date: &quot;Hoje, 14:30&quot;, assignee: &quot;Jurídico&quot; },&#10;                  { id: 2, title: &quot;5.2 - Contrato&quot;, status: &quot;pendente&quot;, date: &quot;Ontem, 10:15&quot;, assignee: &quot;Operação&quot; },&#10;                  { id: 3, title: &quot;Ofício SEI n. 714/2025&quot;, status: &quot;em_andamento&quot;, date: &quot;17/07, 09:45&quot;, assignee: &quot;Meio Ambiente&quot; },&#10;                ].map((task) =&gt; (&#10;                  &lt;div key={task.id} className=&quot;flex items-center justify-between p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className={`w-2 h-2 rounded-full ${&#10;                        task.status === 'concluido' ? 'bg-green-500' :&#10;                        task.status === 'em_andamento' ? 'bg-blue-500' :&#10;                        task.status === 'pendente' ? 'bg-yellow-500' : 'bg-red-500'&#10;                      }`} /&gt;&#10;                      &lt;div&gt;&#10;                        &lt;div className=&quot;font-medium text-sm&quot;&gt;{task.title}&lt;/div&gt;&#10;                        &lt;div className=&quot;text-xs text-gray-500&quot;&gt;{task.assignee} • {task.date}&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; className=&quot;text-xs&quot;&gt;Ver&lt;/Button&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;          &lt;CardFooter className=&quot;border-t pt-4 mt-auto&quot;&gt;&#10;            &lt;Button variant=&quot;outline&quot; className=&quot;w-full&quot;&gt;Ver Todas as Obrigações&lt;/Button&gt;&#10;          &lt;/CardFooter&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Recent Activity */}&#10;        &lt;Card className=&quot;flex flex-col&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;CardTitle&gt;Atividade Recente&lt;/CardTitle&gt;&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;            &lt;CardDescription&gt;Últimas ações no sistema&lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent&gt;&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              {[&#10;                { &#10;                  id: 1, &#10;                  user: { name: &quot;Maria Silva&quot;, avatar: &quot;MS&quot; }, &#10;                  action: &quot;enviou um novo email&quot;, &#10;                  time: &quot;há 10 minutos&quot;,&#10;                  detail: &quot;Relatório de Compliance Q2&quot;&#10;                },&#10;                { &#10;                  id: 2, &#10;                  user: { name: &quot;João Santos&quot;, avatar: &quot;JS&quot; }, &#10;                  action: &quot;concluiu uma obrigação&quot;, &#10;                  time: &quot;há 45 minutos&quot;,&#10;                  detail: &quot;4.2.1 - Contrato&quot;&#10;                },&#10;                { &#10;                  id: 3, &#10;                  user: { name: &quot;Ana Oliveira&quot;, avatar: &quot;AO&quot; }, &#10;                  action: &quot;adicionou um comentário&quot;, &#10;                  time: &quot;há 2 horas&quot;,&#10;                  detail: &quot;Ofício SEI n. 714/2025&quot;&#10;                },&#10;                { &#10;                  id: 4, &#10;                  user: { name: &quot;Carlos Mendes&quot;, avatar: &quot;CM&quot; }, &#10;                  action: &quot;criou uma nova obrigação&quot;, &#10;                  time: &quot;há 3 horas&quot;,&#10;                  detail: &quot;5.3 - Revisão Contratual&quot;&#10;                },&#10;                { &#10;                  id: 5, &#10;                  user: { name: &quot;Lucia Ferreira&quot;, avatar: &quot;LF&quot; }, &#10;                  action: &quot;atualizou um documento&quot;, &#10;                  time: &quot;há 5 horas&quot;,&#10;                  detail: &quot;Política de Compliance v2.1&quot;&#10;                },&#10;              ].map((activity) =&gt; (&#10;                &lt;div key={activity.id} className=&quot;flex items-start space-x-3&quot;&gt;&#10;                  &lt;Avatar className=&quot;h-8 w-8&quot;&gt;&#10;                    &lt;AvatarImage src={`/placeholder-avatar-${activity.id}.jpg`} alt={activity.user.name} /&gt;&#10;                    &lt;AvatarFallback&gt;{activity.user.avatar}&lt;/AvatarFallback&gt;&#10;                  &lt;/Avatar&gt;&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;text-sm&quot;&gt;&#10;                      &lt;span className=&quot;font-medium&quot;&gt;{activity.user.name}&lt;/span&gt;&#10;                      {&quot; &quot;}&#10;                      &lt;span className=&quot;text-gray-600&quot;&gt;{activity.action}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-xs text-gray-500 mt-1&quot;&gt;{activity.detail}&lt;/div&gt;&#10;                    &lt;div className=&quot;text-xs text-gray-400 mt-1&quot;&gt;{activity.time}&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;          &lt;CardFooter className=&quot;border-t pt-4 mt-auto&quot;&gt;&#10;            &lt;Button variant=&quot;outline&quot; className=&quot;w-full&quot;&gt;Ver Todo o Histórico&lt;/Button&gt;&#10;          &lt;/CardFooter&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Calendar and Upcoming Events */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;        &lt;Card className=&quot;flex flex-col&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;CardTitle&gt;Próximos Prazos&lt;/CardTitle&gt;&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;            &lt;CardDescription&gt;Obrigações com vencimento próximo&lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent&gt;&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;              {[&#10;                { id: 1, title: &quot;5.2 - Contrato&quot;, dueDate: &quot;Hoje, 18:00&quot;, status: &quot;pendente&quot; },&#10;                { id: 2, title: &quot;Ofício SEI n. 714/2025&quot;, dueDate: &quot;Amanhã, 14:00&quot;, status: &quot;em_andamento&quot; },&#10;                { id: 3, title: &quot;3.1.2 - Documentação&quot;, dueDate: &quot;19/07, 10:00&quot;, status: &quot;pendente&quot; },&#10;                { id: 4, title: &quot;Relatório Trimestral&quot;, dueDate: &quot;25/07, 18:00&quot;, status: &quot;pendente&quot; },&#10;              ].map((deadline) =&gt; (&#10;                &lt;div key={deadline.id} className=&quot;flex items-center space-x-3 p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;                  &lt;div className={`w-2 h-2 rounded-full ${&#10;                    deadline.status === 'concluido' ? 'bg-green-500' :&#10;                      deadline.status === 'em_andamento' ? 'bg-blue-500' :&#10;                        deadline.status === 'pendente' ? 'bg-yellow-500' : 'bg-red-500'&#10;                  }`} /&gt;&#10;                  &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                    &lt;div className=&quot;font-medium text-sm truncate&quot;&gt;{deadline.title}&lt;/div&gt;&#10;                    &lt;div className=&quot;flex items-center text-xs text-gray-500&quot;&gt;&#10;                      &lt;Clock className=&quot;h-3 w-3 mr-1&quot; /&gt;&#10;                      {deadline.dueDate}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;          &lt;CardFooter className=&quot;border-t pt-4 mt-auto&quot;&gt;&#10;            &lt;Button variant=&quot;outline&quot; className=&quot;w-full&quot;&gt;Ver Todos os Prazos&lt;/Button&gt;&#10;          &lt;/CardFooter&gt;&#10;        &lt;/Card&gt;&#10;&#10;        &lt;Card className=&quot;flex flex-col lg:col-span-2&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;CardTitle&gt;Calendário de Obrigações&lt;/CardTitle&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;Button &#10;                  variant=&quot;outline&quot; &#10;                  size=&quot;sm&quot;&#10;                  onClick={() =&gt; setCalendarView('month')}&#10;                  className={calendarView === 'month' ? &quot;bg-blue-50 text-blue-700 border-blue-200&quot; : &quot;&quot;}&#10;                &gt;&#10;                  Mês&#10;                &lt;/Button&gt;&#10;                &lt;Button &#10;                  variant=&quot;outline&quot; &#10;                  size=&quot;sm&quot;&#10;                  onClick={() =&gt; setCalendarView('week')}&#10;                  className={calendarView === 'week' ? &quot;bg-blue-50 text-blue-700 border-blue-200&quot; : &quot;&quot;}&#10;                &gt;&#10;                  Semana&#10;                &lt;/Button&gt;&#10;                &lt;Button &#10;                  variant=&quot;outline&quot; &#10;                  size=&quot;sm&quot;&#10;                  onClick={() =&gt; setCalendarView('year')}&#10;                  className={calendarView === 'year' ? &quot;bg-blue-50 text-blue-700 border-blue-200&quot; : &quot;&quot;}&#10;                &gt;&#10;                  Ano&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;CardDescription&gt;Visualize suas obrigações no calendário&lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;h-full&quot;&gt;&#10;            &lt;div className=&quot;bg-gray-50 rounded-lg p-4 min-h-full overflow-y-auto&quot;&gt;&#10;              {calendarView === 'month' &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-7 gap-1 text-center mb-2&quot;&gt;&#10;                    {['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'].map((day) =&gt; (&#10;                      &lt;div key={day} className=&quot;text-xs font-medium text-gray-500&quot;&gt;{day}&lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;grid grid-cols-7 gap-1&quot;&gt;&#10;                    {Array.from({ length: 35 }).map((_, index) =&gt; {&#10;                      const day = index - 5; // Start from previous month&#10;                      const isCurrentMonth = day &gt; 0 &amp;&amp; day &lt;= 31;&#10;                      const isToday = day === 17; // Assuming today is the 17th&#10;                      &#10;                      // Sample obligations data&#10;                      const obligations = [&#10;                        { day: 17, title: &quot;5.2 - Contrato&quot;, status: &quot;pendente&quot; },&#10;                        { day: 18, title: &quot;Ofício SEI n. 714/2025&quot;, status: &quot;em_andamento&quot; },&#10;                        { day: 19, title: &quot;3.1.2 - Documentação&quot;, status: &quot;pendente&quot; },&#10;                        { day: 25, title: &quot;Relatório Trimestral&quot;, status: &quot;pendente&quot; },&#10;                        { day: 10, title: &quot;4.2.1 - Contrato&quot;, status: &quot;concluido&quot; },&#10;                        { day: 15, title: &quot;Reunião Mensal&quot;, status: &quot;em_andamento&quot; },&#10;                      ];&#10;                      &#10;                      const dayObligations = obligations.filter(o =&gt; o.day === day);&#10;                      &#10;                      return (&#10;                        &lt;div &#10;                          key={index} &#10;                          className={`p-1 rounded-lg border text-xs h-24 flex flex-col ${&#10;                            isCurrentMonth &#10;                              ? isToday &#10;                                ? 'bg-blue-50 border-blue-200' &#10;                                : 'bg-white border-gray-200' &#10;                              : 'bg-gray-100 border-gray-200 text-gray-400'&#10;                          }`}&#10;                        &gt;&#10;                          &lt;div className=&quot;font-medium mb-1&quot;&gt;{isCurrentMonth ? day : day &lt;= 0 ? day + 30 : day - 31}&lt;/div&gt;&#10;                          &lt;div className=&quot;overflow-y-auto flex-1&quot;&gt;&#10;                            {dayObligations.map((obligation, i) =&gt; (&#10;                              &lt;div &#10;                                key={i} &#10;                                className={`mb-1 p-1 rounded text-xs truncate ${&#10;                                  obligation.status === 'concluido' ? 'bg-green-100 text-green-800' :&#10;                                  obligation.status === 'em_andamento' ? 'bg-blue-100 text-blue-800' :&#10;                                  obligation.status === 'pendente' ? 'bg-yellow-100 text-yellow-800' : &#10;                                  'bg-red-100 text-red-800'&#10;                                }`}&#10;                              &gt;&#10;                                {obligation.title}&#10;                              &lt;/div&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })}&#10;                  &lt;/div&gt;&#10;                &lt;/&gt;&#10;              )}&#10;&#10;              {calendarView === 'week' &amp;&amp; (&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-7 gap-1 text-center mb-2&quot;&gt;&#10;                    {['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'].map((day, index) =&gt; {&#10;                      const date = 14 + index; // Starting from Sunday, July 14&#10;                      const isToday = date === 17; // Assuming today is the 17th&#10;                      return (&#10;                        &lt;div &#10;                          key={day} &#10;                          className={`text-sm font-medium p-2 rounded-t-lg ${&#10;                            isToday ? 'bg-blue-50 text-blue-700' : 'text-gray-700'&#10;                          }`}&#10;                        &gt;&#10;                          {day}&#10;                          &lt;div className=&quot;text-xs mt-1&quot;&gt;{date}/07&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })}&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;grid grid-cols-7 gap-1&quot;&gt;&#10;                    {['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'].map((day, index) =&gt; {&#10;                      const date = 14 + index; // Starting from Sunday, July 14&#10;                      &#10;                      // Sample obligations data&#10;                      const obligations = [&#10;                        { day: 17, title: &quot;5.2 - Contrato&quot;, status: &quot;pendente&quot;, time: &quot;10:00&quot; },&#10;                        { day: 18, title: &quot;Ofício SEI n. 714/2025&quot;, status: &quot;em_andamento&quot;, time: &quot;14:30&quot; },&#10;                        { day: 19, title: &quot;3.1.2 - Documentação&quot;, status: &quot;pendente&quot;, time: &quot;09:00&quot; },&#10;                        { day: 15, title: &quot;Reunião Mensal&quot;, status: &quot;em_andamento&quot;, time: &quot;15:00&quot; },&#10;                      ];&#10;                      &#10;                      const dayObligations = obligations.filter(o =&gt; o.day === date);&#10;                      &#10;                      return (&#10;                        &lt;div &#10;                          key={day} &#10;                          className=&quot;bg-white border border-gray-200 rounded-b-lg p-2 h-64 overflow-y-auto&quot;&#10;                        &gt;&#10;                          {dayObligations.length === 0 ? (&#10;                            &lt;div className=&quot;text-xs text-gray-400 h-full flex items-center justify-center&quot;&gt;&#10;                              Sem obrigações&#10;                            &lt;/div&gt;&#10;                          ) : (&#10;                            dayObligations.map((obligation, i) =&gt; (&#10;                              &lt;div &#10;                                key={i} &#10;                                className={`mb-2 p-2 rounded text-xs ${&#10;                                  obligation.status === 'concluido' ? 'bg-green-100 text-green-800' :&#10;                                  obligation.status === 'em_andamento' ? 'bg-blue-100 text-blue-800' :&#10;                                  obligation.status === 'pendente' ? 'bg-yellow-100 text-yellow-800' : &#10;                                  'bg-red-100 text-red-800'&#10;                                }`}&#10;                              &gt;&#10;                                &lt;div className=&quot;font-medium&quot;&gt;{obligation.time}&lt;/div&gt;&#10;                                &lt;div&gt;{obligation.title}&lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            ))&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {calendarView === 'year' &amp;&amp; (&#10;                &lt;div className=&quot;grid grid-cols-4 gap-4&quot;&gt;&#10;                  {['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', &#10;                    'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'].map((month, index) =&gt; {&#10;                    const isCurrentMonth = index === 6; // July is the current month (0-indexed)&#10;                    &#10;                    // Sample data for number of obligations per month&#10;                    const obligationCounts = [3, 5, 2, 4, 6, 3, 8, 2, 0, 0, 0, 0];&#10;                    &#10;                    return (&#10;                      &lt;div &#10;                        key={month} &#10;                        className={`p-3 rounded-lg border ${&#10;                          isCurrentMonth ? 'bg-blue-50 border-blue-200' : 'bg-white border-gray-200'&#10;                        }`}&#10;                      &gt;&#10;                        &lt;div className=&quot;font-medium text-sm mb-2&quot;&gt;{month}&lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                          &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                            {obligationCounts[index]} obrigações&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    );&#10;                  })}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import { useState, useEffect } from 'react';&#13;&#10;import { &#13;&#10;  BarChart, &#13;&#10;  Calendar, &#13;&#10;  Clock, &#13;&#10;  FileText, &#13;&#10;  Mail, &#13;&#10;  MoreHorizontal, &#13;&#10;  RefreshCw, &#13;&#10;  Users, &#13;&#10;  CheckCircle,&#13;&#10;  AlertCircle,&#13;&#10;  Clock3,&#13;&#10;  XCircle &#13;&#10;} from 'lucide-react';&#13;&#10;import { Button } from '@/components/ui/button';&#13;&#10;import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';&#13;&#10;import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';&#13;&#10;import { Badge } from '@/components/ui/badge';&#13;&#10;import { Building2, ClipboardList } from 'lucide-react';&#13;&#10;import { mockAreas, mockTemas, mockResponsaveis, mockSolicitacoes } from '@/lib/mockData';&#13;&#10;&#13;&#10;export default function Dashboard() {&#13;&#10;  const [lastUpdated, setLastUpdated] = useState&lt;Date | null&gt;(null);&#13;&#10;  &#13;&#10;  // Initialize lastUpdated on client side only&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    setLastUpdated(new Date());&#13;&#10;  }, []);&#13;&#10;  const [calendarView, setCalendarView] = useState&lt;'month' | 'week' | 'year'&gt;('month');&#13;&#10;&#13;&#10;  const refreshData = () =&gt; {&#13;&#10;    setLastUpdated(new Date());&#13;&#10;  };&#13;&#10;&#13;&#10;  const solicitacoesPorStatus = {&#13;&#10;    pendente: mockSolicitacoes.filter(s =&gt; s.status === 'pendente').length,&#13;&#10;    em_andamento: mockSolicitacoes.filter(s =&gt; s.status === 'em_andamento').length,&#13;&#10;    concluido: mockSolicitacoes.filter(s =&gt; s.status === 'concluido').length,&#13;&#10;    atrasado: mockSolicitacoes.filter(s =&gt; s.status === 'atrasado').length,&#13;&#10;  }&#13;&#10;&#13;&#10;  const getStatusIcon = (status: string) =&gt; {&#13;&#10;    switch (status) {&#13;&#10;      case 'pendente':&#13;&#10;        return &lt;Clock className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;      case 'em_andamento':&#13;&#10;        return &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;      case 'concluido':&#13;&#10;        return &lt;CheckCircle className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;      case 'atrasado':&#13;&#10;        return &lt;XCircle className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;      default:&#13;&#10;        return &lt;Clock className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  const getStatusColor = (status: string) =&gt; {&#13;&#10;    switch (status) {&#13;&#10;      case 'pendente':&#13;&#10;        return 'text-yellow-600 bg-yellow-50'&#13;&#10;      case 'em_andamento':&#13;&#10;        return 'text-blue-600 bg-blue-50'&#13;&#10;      case 'concluido':&#13;&#10;        return 'text-green-600 bg-green-50'&#13;&#10;      case 'atrasado':&#13;&#10;        return 'text-red-600 bg-red-50'&#13;&#10;      default:&#13;&#10;        return 'text-gray-600 bg-gray-50'&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  const formatStatusLabel = (status: string) =&gt; {&#13;&#10;    switch (status) {&#13;&#10;      case 'pendente':&#13;&#10;        return 'Pendente'&#13;&#10;      case 'em_andamento':&#13;&#10;        return 'Em Andamento'&#13;&#10;      case 'concluido':&#13;&#10;        return 'Concluído'&#13;&#10;      case 'atrasado':&#13;&#10;        return 'Atrasado'&#13;&#10;      default:&#13;&#10;        return status&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;p-6 space-y-6 bg-gray-50 min-h-screen&quot;&gt;&#13;&#10;      &lt;div&gt;&#13;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Dashboard&lt;/h1&gt;&#13;&#10;        &lt;p className=&quot;text-gray-600 mt-2&quot;&gt;Visão geral do sistema de gestão&lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Cards de estatísticas */}&#13;&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#13;&#10;            &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Total de Áreas&lt;/CardTitle&gt;&#13;&#10;            &lt;Building2 className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent&gt;&#13;&#10;            &lt;div className=&quot;text-2xl font-bold&quot;&gt;{mockAreas.length}&lt;/div&gt;&#13;&#10;            &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;&#13;&#10;              Departamentos cadastrados&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#13;&#10;            &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Total de Temas&lt;/CardTitle&gt;&#13;&#10;            &lt;FileText className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent&gt;&#13;&#10;            &lt;div className=&quot;text-2xl font-bold&quot;&gt;{mockTemas.length}&lt;/div&gt;&#13;&#10;            &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;&#13;&#10;              Temas configurados&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#13;&#10;            &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Responsáveis&lt;/CardTitle&gt;&#13;&#10;            &lt;Users className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent&gt;&#13;&#10;            &lt;div className=&quot;text-2xl font-bold&quot;&gt;{mockResponsaveis.length}&lt;/div&gt;&#13;&#10;            &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;&#13;&#10;              Pessoas cadastradas&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#13;&#10;            &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Solicitações&lt;/CardTitle&gt;&#13;&#10;            &lt;ClipboardList className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent&gt;&#13;&#10;            &lt;div className=&quot;text-2xl font-bold&quot;&gt;{mockSolicitacoes.length}&lt;/div&gt;&#13;&#10;            &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;&#13;&#10;              Total de solicitações&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Status das solicitações */}&#13;&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader&gt;&#13;&#10;            &lt;CardTitle&gt;Status das Solicitações&lt;/CardTitle&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent className=&quot;space-y-4&quot;&gt;&#13;&#10;            {Object.entries(solicitacoesPorStatus).map(([status, count]) =&gt; (&#13;&#10;              &lt;div key={status} className=&quot;flex items-center justify-between&quot;&gt;&#13;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;                  &lt;div className={`p-1 rounded ${getStatusColor(status)}`}&gt;&#13;&#10;                    {getStatusIcon(status)}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;{formatStatusLabel(status)}&lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;Badge variant=&quot;secondary&quot;&gt;{count}&lt;/Badge&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ))}&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader&gt;&#13;&#10;            &lt;CardTitle&gt;Solicitações Recentes&lt;/CardTitle&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent&gt;&#13;&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#13;&#10;              {mockSolicitacoes.slice(0, 5).map((solicitacao) =&gt; (&#13;&#10;                &lt;div key={solicitacao.idSolicitacao} className=&quot;flex items-center justify-between p-3 bg-gray-50 rounded-lg&quot;&gt;&#13;&#10;                  &lt;div&gt;&#13;&#10;                    &lt;div className=&quot;font-medium text-sm&quot;&gt;{solicitacao.dsAssunto}&lt;/div&gt;&#13;&#10;                    &lt;div className=&quot;text-xs text-gray-500&quot;&gt;{solicitacao.cdIdentificacao}&lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;Badge &#13;&#10;                    variant=&quot;outline&quot; &#13;&#10;                    className={getStatusColor(solicitacao.status)}&#13;&#10;                  &gt;&#13;&#10;                    {formatStatusLabel(solicitacao.status)}&#13;&#10;                  &lt;/Badge&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Resumo por área */}&#13;&#10;      &lt;Card&gt;&#13;&#10;        &lt;CardHeader&gt;&#13;&#10;          &lt;CardTitle&gt;Áreas por Tema&lt;/CardTitle&gt;&#13;&#10;        &lt;/CardHeader&gt;&#13;&#10;        &lt;CardContent&gt;&#13;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4&quot;&gt;&#13;&#10;            {mockTemas.map((tema) =&gt; (&#13;&#10;              &lt;div key={tema.idTema} className=&quot;p-4 border rounded-lg&quot;&gt;&#13;&#10;                &lt;div className=&quot;font-medium text-sm mb-2&quot;&gt;{tema.nmTema}&lt;/div&gt;&#13;&#10;                &lt;div className=&quot;text-xs text-gray-500 mb-3&quot;&gt;{tema.dsTema}&lt;/div&gt;&#13;&#10;                &lt;div className=&quot;flex flex-wrap gap-1&quot;&gt;&#13;&#10;                  {tema.idAreas.map((areaId) =&gt; {&#13;&#10;                    const area = mockAreas.find(a =&gt; a.idArea === areaId)&#13;&#10;                    return area ? (&#13;&#10;                      &lt;Badge key={areaId} variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#13;&#10;                        {area.nmArea}&#13;&#10;                      &lt;/Badge&gt;&#13;&#10;                    ) : null&#13;&#10;                  })}&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className=&quot;mt-2 text-xs text-gray-500&quot;&gt;&#13;&#10;                  Prazo: {tema.nrDiasPrazo} dias ({tema.tpContagem.toLowerCase()})&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ))}&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/CardContent&gt;&#13;&#10;      &lt;/Card&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/email/EmailList.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/email/EmailList.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, {useState, useCallback, useEffect} from 'react';&#10;import {Paperclip, RotateCw, Trash2, Loader2, Mail} from 'lucide-react';&#10;import {Button} from '@/components/ui/button';&#10;import {Checkbox} from '@/components/ui/checkbox';&#10;import {cn} from '@/lib/utils';&#10;import {useEmails} from '@/lib/api/hooks';&#10;import {Email as ApiEmail} from '@/lib/api/types';&#10;import {useToast} from '@/hooks/use-toast';&#10;import {apiClient} from '@/lib/api/client';&#10;&#10;interface Email {&#10;  id: string;&#10;  from: string;&#10;  subject: string;&#10;  preview: string;&#10;  date: string;&#10;  isRead: boolean;&#10;  hasAttachment: boolean;&#10;  labels: string[];&#10;  content?: string;&#10;}&#10;&#10;&#10;const MOCK_EMAILS = [&#10;  {&#10;    id: 'mock-1',&#10;    from: 'João Silva &lt;joao@empresa.com&gt;',&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#10;    preview: 'Segue em anexo o relatório mensal de vendas referente ao mês de novembro. Os resultados mostram um crescimento de 15% em relação ao mês anterior...',&#10;    date: new Date().toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['importante', 'trabalho'],&#10;    content: `Prezado(a),&#10;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#10;&#10;Os principais destaques são:&#10;• Crescimento de 15% em relação ao mês anterior&#10;• Aumento de 8% no número de novos clientes&#10;• Melhoria na taxa de conversão para 12%&#10;&#10;Principais produtos vendidos:&#10;1. Produto A - R$ 45.000&#10;2. Produto B - R$ 32.000  &#10;3. Produto C - R$ 28.500&#10;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#10;&#10;Atenciosamente,&#10;João Silva&#10;Gerente Comercial&#10;(11) 9999-8888`&#10;  },&#10;  {&#10;    id: 'mock-2',&#10;    from: 'Maria Santos &lt;maria@consultoria.com&gt;',&#10;    subject: 'Proposta de consultoria em marketing digital',&#10;    preview: 'Espero que esteja bem! Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa...',&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['proposta'],&#10;    content: `Olá!&#10;&#10;Espero que esteja bem!&#10;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#10;&#10;Nossa experiência inclui:&#10;• Gestão de redes sociais&#10;• Campanhas no Google Ads&#10;• SEO e marketing de conteúdo&#10;• E-mail marketing&#10;• Análise de métricas e ROI&#10;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#10;&#10;Quando seria um bom momento para conversarmos?&#10;&#10;Abraços,&#10;Maria Santos&#10;Consultora em Marketing Digital&#10;maria@consultoria.com&#10;(11) 8888-7777`&#10;  },&#10;  {&#10;    id: 'mock-3',&#10;    from: 'Carlos Oliveira &lt;carlos@fornecedor.com&gt;',&#10;    subject: 'Confirmação do pedido #2024-1156',&#10;    preview: 'Confirmamos o recebimento do seu pedido #2024-1156. Prazo de entrega estimado: 5 dias úteis...',&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['pedido'],&#10;    content: `Prezado Cliente,&#10;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#10;&#10;Detalhes do pedido:&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#10;• Valor total: R$ 2.850,00&#10;• Prazo de entrega: 5 dias úteis&#10;• Forma de pagamento: Boleto banceiro&#10;&#10;Itens do pedido:&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#10;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#10;&#10;Em caso de dúvidas, entre em contato conosco.&#10;&#10;Atenciosamente,&#10;Carlos Oliveira&#10;Departamento de Vendas&#10;carlos@fornecedor.com&#10;(11) 7777-6666`&#10;  },&#10;  {&#10;    id: 'mock-4',&#10;    from: 'Ana Costa &lt;ana@juridico.com&gt;',&#10;    subject: 'Revisão do contrato de prestação de serviços',&#10;    preview: 'Conforme solicitado, segue a revisão do contrato de prestação de serviços. Identifiquei alguns pontos que precisam de atenção...',&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: true,&#10;    labels: ['jurídico', 'urgente'],&#10;    content: `Prezado(a),&#10;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#10;&#10;Pontos que precisam de atenção:&#10;1. Cláusula 5.2 - Prazo de pagamento&#10;2. Cláusula 8.1 - Rescisão contratual  &#10;3. Cláusula 12 - Foro de eleição&#10;&#10;Recomendações:&#10;• Incluir cláusula de reajuste anual&#10;• Especificar melhor as penalidades por atraso&#10;• Definir critérios objetivos para avaliação de performance&#10;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#10;&#10;Podemos agendar uma reunião para discutir estas alterações?&#10;&#10;Cordialmente,&#10;Ana Costa&#10;Advogada&#10;OAB/SP 123.456&#10;ana@juridico.com&#10;(11) 6666-5555`&#10;  },&#10;  {&#10;    id: 'mock-5',&#10;    from: 'Ricardo Ferreira &lt;ricardo@ti.com&gt;',&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#10;    preview: 'Informamos que será realizada manutenção programada no sistema no sábado, 09/12, das 02h às 06h...',&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['sistema', 'manutenção'],&#10;    content: `Prezados usuários,&#10;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#10;&#10;Durante este período:&#10;• O sistema ficará indisponível&#10;• Não será possível acessar dados&#10;• Funcionalidades estarão offline&#10;&#10;Melhorias que serão implementadas:&#10;• Otimização da performance&#10;• Correção de bugs reportados&#10;• Atualização de segurança&#10;• Nova funcionalidade de relatórios&#10;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#10;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#10;&#10;Obrigado pela compreensão.&#10;&#10;Equipe de TI&#10;Ricardo Ferreira&#10;Coordenador de Sistemas&#10;ricardo@ti.com`&#10;  }&#10;];&#10;&#10;&#10;const formatDate = (dateString?: string): string =&gt; {&#10;  if (!dateString) return '';&#10;&#10;  const date = new Date(dateString);&#10;&#10;  // Format as dd/MM/yyyy HH:mm&#10;  const day = date.getDate().toString().padStart(2, '0');&#10;  const month = (date.getMonth() + 1).toString().padStart(2, '0');&#10;  const year = date.getFullYear();&#10;  const hours = date.getHours().toString().padStart(2, '0');&#10;  const minutes = date.getMinutes().toString().padStart(2, '0');&#10;&#10;  return `${day}/${month}/${year} ${hours}:${minutes}`;&#10;};&#10;&#10;interface SentEmail {&#10;  id: string;&#10;  to: string;&#10;  cc?: string;&#10;  bcc?: string;&#10;  subject: string;&#10;  content: string;&#10;  date: string;&#10;  from: string;&#10;}&#10;&#10;interface EmailListProps {&#10;  folder: string;&#10;  searchQuery: string;&#10;  selectedEmail: string | null;&#10;  onEmailSelect: (emailId: string) =&gt; void;&#10;  sentEmails?: SentEmail[];&#10;  onUnreadCountChange?: (count: number) =&gt; void;&#10;}&#10;&#10;function EmailList({&#10;  folder,&#10;  searchQuery,&#10;  selectedEmail,&#10;  onEmailSelect,&#10;  sentEmails = [],&#10;  onUnreadCountChange&#10;}: EmailListProps) {&#10;  const [selectedEmails, setSelectedEmails] = useState&lt;string[]&gt;([]);&#10;  const [syncLoading, setSyncLoading] = useState(false);&#10;  const {toast} = useToast();&#10;&#10;&#10;  const {data, error, loading, refetch} = useEmails({});&#10;&#10;&#10;  const syncAndFetchEmails = useCallback(async () =&gt; {&#10;    try {&#10;      setSyncLoading(true);&#10;&#10;      await apiClient.sincronizarEmails();&#10;      await refetch();&#10;&#10;      toast({&#10;        title: &quot;Emails sincronizados&quot;,&#10;        description: &quot;Seus emails foram sincronizados com sucesso.&quot;,&#10;      });&#10;    } catch (err) {&#10;      console.error('Error syncing emails:', err);&#10;      toast({&#10;        title: &quot;Erro ao sincronizar emails&quot;,&#10;        description: &quot;Não foi possível sincronizar seus emails. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    } finally {&#10;      setSyncLoading(false);&#10;    }&#10;  }, [refetch, toast]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (error) {&#10;      toast({&#10;        title: &quot;Erro ao carregar emails&quot;,&#10;        description: &quot;Não foi possível carregar os emails. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    }&#10;  }, [error, toast]);&#10;&#10;  const apiEmails: Email[] = (() =&gt; {&#10;    if (!data?.items) return [];&#10;    return data.items.map((apiEmail: ApiEmail) =&gt; ({&#10;      id: apiEmail.id_email.toString(),&#10;      from: apiEmail.remetente,&#10;      subject: apiEmail.assunto,&#10;      preview: apiEmail.conteudo,&#10;      date: formatDate(apiEmail.prazo_resposta),&#10;      isRead: apiEmail.tp_status !== 'NOVO',&#10;      hasAttachment: false,&#10;      labels: [],&#10;    }));&#10;  })();&#10;&#10;  // Simplify emails computation - remove complex useMemo chain&#10;  const emails: Email[] = (() =&gt; {&#10;    if (folder === 'sent') {&#10;      return sentEmails.map(email =&gt; ({&#10;        id: email.id,&#10;        from: 'Você',&#10;        subject: email.subject,&#10;        preview: email.content.replace(/&lt;[^&gt;]*&gt;/g, ''),&#10;        date: formatDate(email.date),&#10;        isRead: true,&#10;        hasAttachment: false,&#10;        labels: [],&#10;      }));&#10;    }&#10;&#10;    const formattedMockEmails = MOCK_EMAILS.map(email =&gt; ({&#10;      ...email,&#10;      date: formatDate(email.date)&#10;    }));&#10;&#10;    if (folder === 'inbox') {&#10;      return [...formattedMockEmails, ...apiEmails];&#10;    }&#10;    return apiEmails;&#10;  })();&#10;&#10;&#10;  useEffect(() =&gt; {&#10;    if (onUnreadCountChange &amp;&amp; folder === 'inbox') {&#10;      const allEmails = [...MOCK_EMAILS, ...apiEmails];&#10;      const unreadCount = allEmails.filter(email =&gt; !email.isRead).length;&#10;      const safeCount = Math.max(0, unreadCount);&#10;      onUnreadCountChange(safeCount);&#10;    }&#10;  }, [apiEmails, onUnreadCountChange, folder]);&#10;&#10;&#10;  // Simplify filtered emails - remove heavy useMemo&#10;  const filteredEmails = (() =&gt; {&#10;    if (!searchQuery) {&#10;      return emails;&#10;    }&#10;&#10;    const query = searchQuery.toLowerCase();&#10;    return emails.filter(email =&gt;&#10;      email?.subject?.toLowerCase().includes(query) ||&#10;      email?.from?.toLowerCase().includes(query) ||&#10;      email?.preview?.toLowerCase().includes(query)&#10;    );&#10;  })();&#10;&#10;  const toggleEmailSelection = useCallback((emailId: string) =&gt; {&#10;    setSelectedEmails(prev =&gt;&#10;      prev.includes(emailId)&#10;        ? prev.filter(id =&gt; id !== emailId)&#10;        : [...prev, emailId]&#10;    );&#10;  }, []);&#10;&#10;  const selectAllEmails = useCallback(() =&gt; {&#10;    setSelectedEmails(&#10;      selectedEmails.length === filteredEmails.length&#10;        ? []&#10;        : filteredEmails.map(email =&gt; email.id)&#10;    );&#10;  }, [selectedEmails.length, filteredEmails]);&#10;&#10;  return (&#10;    &lt;div className=&quot;flex-1 flex flex-col&quot;&gt;&#10;      {/* Email Actions */}&#10;      &lt;div className=&quot;p-4 border-b border-gray-200&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between min-h-[2rem]&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Checkbox&#10;              checked={selectedEmails.length === filteredEmails.length &amp;&amp; filteredEmails.length &gt; 0}&#10;              onCheckedChange={selectAllEmails}&#10;              disabled={loading || filteredEmails.length === 0}&#10;            /&gt;&#10;            &lt;span className=&quot;text-sm text-gray-600 whitespace-nowrap&quot;&gt;&#10;              {loading ? (&#10;                &quot;Carregando...&quot;&#10;              ) : selectedEmails.length &gt; 0 ? (&#10;                `${selectedEmails.length} selecionados`&#10;              ) : (&#10;                `${filteredEmails.length} emails`&#10;              )}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;            {selectedEmails.length &gt; 0 ? (&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                &lt;Trash2 className=&quot;h-4 w-4&quot;/&gt;&#10;              &lt;/Button&gt;&#10;            ) : (&#10;              &lt;Button&#10;                variant=&quot;ghost&quot;&#10;                size=&quot;sm&quot;&#10;                onClick={() =&gt; syncAndFetchEmails()}&#10;                disabled={loading || syncLoading}&#10;              &gt;&#10;                {loading || syncLoading ? (&#10;                  &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot;/&gt;&#10;                ) : (&#10;                  &lt;RotateCw className=&quot;h-4 w-4&quot;/&gt;&#10;                )}&#10;              &lt;/Button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Email List */}&#10;      &lt;div className=&quot;flex flex-col-reverse overflow-y-auto&quot;&gt;&#10;        {loading ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#10;            &lt;Loader2 className=&quot;h-8 w-8 text-blue-500 animate-spin mb-4&quot;/&gt;&#10;            &lt;p className=&quot;text-gray-500&quot;&gt;Carregando emails...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : filteredEmails.length === 0 ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#10;            &lt;Mail className=&quot;h-12 w-12 text-gray-300 mb-4&quot;/&gt;&#10;            &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-1&quot;&gt;Nenhum email encontrado&lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-500 text-center&quot;&gt;&#10;              {searchQuery ?&#10;                &quot;Não encontramos emails correspondentes à sua pesquisa.&quot; :&#10;                &quot;Não há emails nesta pasta no momento.&quot;}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          filteredEmails.map((email) =&gt; (&#10;            &lt;div&#10;              key={email.id}&#10;              className={cn(&#10;                &quot;p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 transition-colors&quot;,&#10;                selectedEmail === email.id &amp;&amp; &quot;bg-blue-100&quot;,&#10;                !email.isRead &amp;&amp; &quot;bg-blue-50/30&quot;&#10;              )}&#10;              onClick={() =&gt; {&#10;                if (selectedEmail === email.id) {&#10;                  onEmailSelect('');&#10;                } else {&#10;                  onEmailSelect(email.id);&#10;                }&#10;              }}&#10;            &gt;&#10;              &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;                &lt;Checkbox&#10;                  checked={selectedEmails.includes(email.id)}&#10;                  onCheckedChange={() =&gt; toggleEmailSelection(email.id)}&#10;                  onClick={(e) =&gt; e.stopPropagation()}&#10;                /&gt;&#10;                &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between mb-1&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      &lt;span className={cn(&#10;                        &quot;text-sm truncate&quot;,&#10;                        &quot;font-semibold text-gray-700&quot;&#10;                      )}&gt;&#10;                        {email.from}&#10;                      &lt;/span&gt;&#10;                      {email.hasAttachment &amp;&amp; (&#10;                        &lt;Paperclip className=&quot;h-3 w-3 text-gray-400&quot;/&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                    &lt;span className=&quot;text-xs text-gray-500&quot;&gt;{email.date}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;h3 className={cn(&#10;                    &quot;text-sm mb-1 truncate&quot;,&#10;                    &quot;font-bold text-gray-900&quot;&#10;                  )}&gt;&#10;                    {email.subject}&#10;                  &lt;/h3&gt;&#10;&#10;                  &lt;p className=&quot;text-xs text-gray-500 line-clamp-2&quot;&gt;&#10;                    {email.preview}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default EmailList;&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, {useState, useEffect} from 'react';&#10;import {Paperclip, RotateCw, Trash2, Loader2, Mail} from 'lucide-react';&#10;import {Button} from '@/components/ui/button';&#10;import {Checkbox} from '@/components/ui/checkbox';&#10;import {cn} from '@/lib/utils';&#10;import {useEmails} from '@/lib/api/hooks';&#10;import {Email as ApiEmail} from '@/lib/api/types';&#10;import {useToast} from '@/hooks/use-toast';&#10;import {apiClient} from '@/lib/api/client';&#10;&#10;interface Email {&#10;  id: string;&#10;  from: string;&#10;  subject: string;&#10;  preview: string;&#10;  date: string;&#10;  isRead: boolean;&#10;  hasAttachment: boolean;&#10;  labels: string[];&#10;  content?: string;&#10;}&#10;&#10;&#10;const MOCK_EMAILS = [&#10;  {&#10;    id: 'mock-1',&#10;    from: 'João Silva &lt;joao@empresa.com&gt;',&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#10;    preview: 'Segue em anexo o relatório mensal de vendas referente ao mês de novembro. Os resultados mostram um crescimento de 15% em relação ao mês anterior...',&#10;    date: new Date().toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['importante', 'trabalho'],&#10;    content: `Prezado(a),&#10;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#10;&#10;Os principais destaques são:&#10;• Crescimento de 15% em relação ao mês anterior&#10;• Aumento de 8% no número de novos clientes&#10;• Melhoria na taxa de conversão para 12%&#10;&#10;Principais produtos vendidos:&#10;1. Produto A - R$ 45.000&#10;2. Produto B - R$ 32.000  &#10;3. Produto C - R$ 28.500&#10;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#10;&#10;Atenciosamente,&#10;João Silva&#10;Gerente Comercial&#10;(11) 9999-8888`&#10;  },&#10;  {&#10;    id: 'mock-2',&#10;    from: 'Maria Santos &lt;maria@consultoria.com&gt;',&#10;    subject: 'Proposta de consultoria em marketing digital',&#10;    preview: 'Espero que esteja bem! Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa...',&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['proposta'],&#10;    content: `Olá!&#10;&#10;Espero que esteja bem!&#10;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#10;&#10;Nossa experiência inclui:&#10;• Gestão de redes sociais&#10;• Campanhas no Google Ads&#10;• SEO e marketing de conteúdo&#10;• E-mail marketing&#10;• Análise de métricas e ROI&#10;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#10;&#10;Quando seria um bom momento para conversarmos?&#10;&#10;Abraços,&#10;Maria Santos&#10;Consultora em Marketing Digital&#10;maria@consultoria.com&#10;(11) 8888-7777`&#10;  },&#10;  {&#10;    id: 'mock-3',&#10;    from: 'Carlos Oliveira &lt;carlos@fornecedor.com&gt;',&#10;    subject: 'Confirmação do pedido #2024-1156',&#10;    preview: 'Confirmamos o recebimento do seu pedido #2024-1156. Prazo de entrega estimado: 5 dias úteis...',&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['pedido'],&#10;    content: `Prezado Cliente,&#10;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#10;&#10;Detalhes do pedido:&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#10;• Valor total: R$ 2.850,00&#10;• Prazo de entrega: 5 dias úteis&#10;• Forma de pagamento: Boleto banceiro&#10;&#10;Itens do pedido:&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#10;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#10;&#10;Em caso de dúvidas, entre em contato conosco.&#10;&#10;Atenciosamente,&#10;Carlos Oliveira&#10;Departamento de Vendas&#10;carlos@fornecedor.com&#10;(11) 7777-6666`&#10;  },&#10;  {&#10;    id: 'mock-4',&#10;    from: 'Ana Costa &lt;ana@juridico.com&gt;',&#10;    subject: 'Revisão do contrato de prestação de serviços',&#10;    preview: 'Conforme solicitado, segue a revisão do contrato de prestação de serviços. Identifiquei alguns pontos que precisam de atenção...',&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: true,&#10;    labels: ['jurídico', 'urgente'],&#10;    content: `Prezado(a),&#10;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#10;&#10;Pontos que precisam de atenção:&#10;1. Cláusula 5.2 - Prazo de pagamento&#10;2. Cláusula 8.1 - Rescisão contratual  &#10;3. Cláusula 12 - Foro de eleição&#10;&#10;Recomendações:&#10;• Incluir cláusula de reajuste anual&#10;• Especificar melhor as penalidades por atraso&#10;• Definir critérios objetivos para avaliação de performance&#10;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#10;&#10;Podemos agendar uma reunião para discutir estas alterações?&#10;&#10;Cordialmente,&#10;Ana Costa&#10;Advogada&#10;OAB/SP 123.456&#10;ana@juridico.com&#10;(11) 6666-5555`&#10;  },&#10;  {&#10;    id: 'mock-5',&#10;    from: 'Ricardo Ferreira &lt;ricardo@ti.com&gt;',&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#10;    preview: 'Informamos que será realizada manutenção programada no sistema no sábado, 09/12, das 02h às 06h...',&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['sistema', 'manutenção'],&#10;    content: `Prezados usuários,&#10;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#10;&#10;Durante este período:&#10;• O sistema ficará indisponível&#10;• Não será possível acessar dados&#10;• Funcionalidades estarão offline&#10;&#10;Melhorias que serão implementadas:&#10;• Otimização da performance&#10;• Correção de bugs reportados&#10;• Atualização de segurança&#10;• Nova funcionalidade de relatórios&#10;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#10;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#10;&#10;Obrigado pela compreensão.&#10;&#10;Equipe de TI&#10;Ricardo Ferreira&#10;Coordenador de Sistemas&#10;ricardo@ti.com`&#10;  }&#10;];&#10;&#10;&#10;const formatDate = (dateString?: string): string =&gt; {&#10;  if (!dateString) return '';&#10;&#10;  const date = new Date(dateString);&#10;&#10;  // Format as dd/MM/yyyy HH:mm&#10;  const day = date.getDate().toString().padStart(2, '0');&#10;  const month = (date.getMonth() + 1).toString().padStart(2, '0');&#10;  const year = date.getFullYear();&#10;  const hours = date.getHours().toString().padStart(2, '0');&#10;  const minutes = date.getMinutes().toString().padStart(2, '0');&#10;&#10;  return `${day}/${month}/${year} ${hours}:${minutes}`;&#10;};&#10;&#10;interface SentEmail {&#10;  id: string;&#10;  to: string;&#10;  cc?: string;&#10;  bcc?: string;&#10;  subject: string;&#10;  content: string;&#10;  date: string;&#10;  from: string;&#10;}&#10;&#10;interface EmailListProps {&#10;  folder: string;&#10;  searchQuery: string;&#10;  selectedEmail: string | null;&#10;  onEmailSelect: (emailId: string) =&gt; void;&#10;  sentEmails?: SentEmail[];&#10;  onUnreadCountChange?: (count: number) =&gt; void;&#10;}&#10;&#10;function EmailList({&#10;  folder,&#10;  searchQuery,&#10;  selectedEmail,&#10;  onEmailSelect,&#10;  sentEmails = [],&#10;  onUnreadCountChange&#10;}: EmailListProps) {&#10;  const [selectedEmails, setSelectedEmails] = useState&lt;string[]&gt;([]);&#10;  const [syncLoading, setSyncLoading] = useState(false);&#10;  const {toast} = useToast();&#10;&#10;  const {data, error, loading, refetch} = useEmails({});&#10;&#10;&#10;  const syncAndFetchEmails = async () =&gt; {&#10;    try {&#10;      setSyncLoading(true);&#10;&#10;      await apiClient.sincronizarEmails();&#10;      await refetch();&#10;&#10;      toast({&#10;        title: &quot;Emails sincronizados&quot;,&#10;        description: &quot;Seus emails foram sincronizados com sucesso.&quot;,&#10;      });&#10;    } catch (err) {&#10;      console.error('Error syncing emails:', err);&#10;      toast({&#10;        title: &quot;Erro ao sincronizar emails&quot;,&#10;        description: &quot;Não foi possível sincronizar seus emails. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    } finally {&#10;      setSyncLoading(false);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    if (error) {&#10;      toast({&#10;        title: &quot;Erro ao carregar emails&quot;,&#10;        description: &quot;Não foi possível carregar os emails. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    }&#10;  }, [error, toast]);&#10;&#10;  const apiEmails: Email[] = (() =&gt; {&#10;    if (!data?.items) return [];&#10;    return data.items.map((apiEmail: ApiEmail) =&gt; ({&#10;      id: apiEmail.id_email.toString(),&#10;      from: apiEmail.remetente,&#10;      subject: apiEmail.assunto,&#10;      preview: apiEmail.conteudo,&#10;      date: formatDate(apiEmail.prazo_resposta),&#10;      isRead: apiEmail.tp_status !== 'NOVO',&#10;      hasAttachment: false,&#10;      labels: [],&#10;    }));&#10;  })();&#10;&#10;  // Simplify emails computation - remove complex useMemo chain&#10;  const emails: Email[] = (() =&gt; {&#10;    if (folder === 'sent') {&#10;      return sentEmails.map(email =&gt; ({&#10;        id: email.id,&#10;        from: 'Você',&#10;        subject: email.subject,&#10;        preview: email.content.replace(/&lt;[^&gt;]*&gt;/g, ''),&#10;        date: formatDate(email.date),&#10;        isRead: true,&#10;        hasAttachment: false,&#10;        labels: [],&#10;      }));&#10;    }&#10;&#10;    const formattedMockEmails = MOCK_EMAILS.map(email =&gt; ({&#10;      ...email,&#10;      date: formatDate(email.date)&#10;    }));&#10;&#10;    if (folder === 'inbox') {&#10;      return [...formattedMockEmails, ...apiEmails];&#10;    }&#10;    return apiEmails;&#10;  })();&#10;&#10;&#10;  useEffect(() =&gt; {&#10;    if (onUnreadCountChange &amp;&amp; folder === 'inbox') {&#10;      const allEmails = [...MOCK_EMAILS, ...apiEmails];&#10;      const unreadCount = allEmails.filter(email =&gt; !email.isRead).length;&#10;      const safeCount = Math.max(0, unreadCount);&#10;      onUnreadCountChange(safeCount);&#10;    }&#10;  }, [apiEmails, onUnreadCountChange, folder]);&#10;&#10;&#10;  // Simplify filtered emails - remove heavy useMemo&#10;  const filteredEmails = (() =&gt; {&#10;    if (!searchQuery) {&#10;      return emails;&#10;    }&#10;&#10;    const query = searchQuery.toLowerCase();&#10;    return emails.filter(email =&gt;&#10;      email?.subject?.toLowerCase().includes(query) ||&#10;      email?.from?.toLowerCase().includes(query) ||&#10;      email?.preview?.toLowerCase().includes(query)&#10;    );&#10;  })();&#10;&#10;  // Remove useCallback from toggleEmailSelection&#10;  const toggleEmailSelection = (emailId: string) =&gt; {&#10;    setSelectedEmails(prev =&gt;&#10;      prev.includes(emailId)&#10;        ? prev.filter(id =&gt; id !== emailId)&#10;        : [...prev, emailId]&#10;    );&#10;  };&#10;&#10;  // Remove useCallback from selectAllEmails&#10;  const selectAllEmails = () =&gt; {&#10;    setSelectedEmails(&#10;      selectedEmails.length === filteredEmails.length&#10;        ? []&#10;        : filteredEmails.map(email =&gt; email.id)&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex-1 flex flex-col&quot;&gt;&#10;      {/* Email Actions */}&#10;      &lt;div className=&quot;p-4 border-b border-gray-200&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between min-h-[2rem]&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Checkbox&#10;              checked={selectedEmails.length === filteredEmails.length &amp;&amp; filteredEmails.length &gt; 0}&#10;              onCheckedChange={selectAllEmails}&#10;              disabled={loading || filteredEmails.length === 0}&#10;            /&gt;&#10;            &lt;span className=&quot;text-sm text-gray-600 whitespace-nowrap&quot;&gt;&#10;              {loading ? (&#10;                &quot;Carregando...&quot;&#10;              ) : selectedEmails.length &gt; 0 ? (&#10;                `${selectedEmails.length} selecionados`&#10;              ) : (&#10;                `${filteredEmails.length} emails`&#10;              )}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;            {selectedEmails.length &gt; 0 ? (&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                &lt;Trash2 className=&quot;h-4 w-4&quot;/&gt;&#10;              &lt;/Button&gt;&#10;            ) : (&#10;              &lt;Button&#10;                variant=&quot;ghost&quot;&#10;                size=&quot;sm&quot;&#10;                onClick={() =&gt; syncAndFetchEmails()}&#10;                disabled={loading || syncLoading}&#10;              &gt;&#10;                {loading || syncLoading ? (&#10;                  &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot;/&gt;&#10;                ) : (&#10;                  &lt;RotateCw className=&quot;h-4 w-4&quot;/&gt;&#10;                )}&#10;              &lt;/Button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Email List */}&#10;      &lt;div className=&quot;flex flex-col-reverse overflow-y-auto&quot;&gt;&#10;        {loading ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#10;            &lt;Loader2 className=&quot;h-8 w-8 text-blue-500 animate-spin mb-4&quot;/&gt;&#10;            &lt;p className=&quot;text-gray-500&quot;&gt;Carregando emails...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : filteredEmails.length === 0 ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#10;            &lt;Mail className=&quot;h-12 w-12 text-gray-300 mb-4&quot;/&gt;&#10;            &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-1&quot;&gt;Nenhum email encontrado&lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-500 text-center&quot;&gt;&#10;              {searchQuery ?&#10;                &quot;Não encontramos emails correspondentes à sua pesquisa.&quot; :&#10;                &quot;Não há emails nesta pasta no momento.&quot;}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          filteredEmails.map((email) =&gt; (&#10;            &lt;div&#10;              key={email.id}&#10;              className={cn(&#10;                &quot;p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 transition-colors&quot;,&#10;                selectedEmail === email.id &amp;&amp; &quot;bg-blue-100&quot;,&#10;                !email.isRead &amp;&amp; &quot;bg-blue-50/30&quot;&#10;              )}&#10;              onClick={() =&gt; {&#10;                if (selectedEmail === email.id) {&#10;                  onEmailSelect('');&#10;                } else {&#10;                  onEmailSelect(email.id);&#10;                }&#10;              }}&#10;            &gt;&#10;              &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;                &lt;Checkbox&#10;                  checked={selectedEmails.includes(email.id)}&#10;                  onCheckedChange={() =&gt; toggleEmailSelection(email.id)}&#10;                  onClick={(e) =&gt; e.stopPropagation()}&#10;                /&gt;&#10;                &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between mb-1&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      &lt;span className={cn(&#10;                        &quot;text-sm truncate&quot;,&#10;                        &quot;font-semibold text-gray-700&quot;&#10;                      )}&gt;&#10;                        {email.from}&#10;                      &lt;/span&gt;&#10;                      {email.hasAttachment &amp;&amp; (&#10;                        &lt;Paperclip className=&quot;h-3 w-3 text-gray-400&quot;/&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                    &lt;span className=&quot;text-xs text-gray-500&quot;&gt;{email.date}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;h3 className={cn(&#10;                    &quot;text-sm mb-1 truncate&quot;,&#10;                    &quot;font-bold text-gray-900&quot;&#10;                  )}&gt;&#10;                    {email.subject}&#10;                  &lt;/h3&gt;&#10;&#10;                  &lt;p className=&quot;text-xs text-gray-500 line-clamp-2&quot;&gt;&#10;                    {email.preview}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default EmailList;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/temas/TemaModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/temas/TemaModal.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState, useEffect } from 'react';&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogFooter&#10;} from '@/components/ui/dialog';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { Textarea } from '@/components/ui/textarea';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { Badge } from '@/components/ui/badge';&#10;import { X, Check } from 'lucide-react';&#10;import { Tema, TipoContagem } from '@/lib/types';&#10;import { mockAreas } from '@/lib/mockData';&#10;import { v4 as uuidv4 } from 'uuid';&#10;import { cn } from '@/lib/utils';&#10;&#10;interface TemaModalProps {&#10;  isOpen: boolean;&#10;  onClose: () =&gt; void;&#10;  onSave: (tema: Tema) =&gt; void;&#10;  tema?: Tema | null;&#10;}&#10;&#10;export function TemaModal({ isOpen, onClose, onSave, tema }: TemaModalProps) {&#10;  const [nmTema, setNmTema] = useState('');&#10;  const [dsTema, setDsTema] = useState('');&#10;  const [nrDiasPrazo, setNrDiasPrazo] = useState(0);&#10;  const [tpContagem, setTpContagem] = useState&lt;TipoContagem&gt;(TipoContagem.UTEIS);&#10;  const [selectedAreaIds, setSelectedAreaIds] = useState&lt;string[]&gt;([]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (tema) {&#10;      setNmTema(tema.nmTema);&#10;      setDsTema(tema.dsTema);&#10;      setNrDiasPrazo(tema.nrDiasPrazo);&#10;      setTpContagem(tema.tpContagem);&#10;      setSelectedAreaIds(tema.idAreas);&#10;    } else {&#10;      setNmTema('');&#10;      setDsTema('');&#10;      setNrDiasPrazo(0);&#10;      setTpContagem(TipoContagem.UTEIS);&#10;      setSelectedAreaIds([]);&#10;    }&#10;  }, [tema, isOpen]);&#10;&#10;  const handleAreaToggle = (areaId: string) =&gt; {&#10;    setSelectedAreaIds(prev =&gt;&#10;      prev.includes(areaId)&#10;        ? prev.filter(id =&gt; id !== areaId)&#10;        : [...prev, areaId]&#10;    );&#10;  };&#10;&#10;  const removeArea = (areaId: string) =&gt; {&#10;    setSelectedAreaIds(prev =&gt; prev.filter(id =&gt; id !== areaId));&#10;  };&#10;&#10;  const getSelectedAreas = () =&gt; {&#10;    return mockAreas.filter(area =&gt; selectedAreaIds.includes(area.idArea));&#10;  };&#10;&#10;  const handleSave = () =&gt; {&#10;    if (!nmTema || !dsTema || selectedAreaIds.length === 0) return;&#10;&#10;    const currentDate = new Date().toISOString().split('T')[0];&#10;    const currentUser = '12345678901';&#10;&#10;    const novoTema: Tema = {&#10;      idTema: tema?.idTema || uuidv4(),&#10;      nmTema,&#10;      dsTema,&#10;      idAreas: selectedAreaIds,&#10;      nrDiasPrazo,&#10;      tpContagem,&#10;      dtCadastro: tema?.dtCadastro || currentDate,&#10;      nrCpfCadastro: tema?.nrCpfCadastro || currentUser,&#10;      vsVersao: tema ? tema.vsVersao + 1 : 1,&#10;      dtAlteracao: currentDate,&#10;      nrCpfAlteracao: currentUser&#10;    };&#10;&#10;    onSave(novoTema);&#10;    onClose();&#10;  };&#10;&#10;  const isFormValid = nmTema &amp;&amp; dsTema &amp;&amp; selectedAreaIds.length &gt; 0 &amp;&amp; nrDiasPrazo &gt; 0;&#10;&#10;  return (&#10;    &lt;Dialog open={isOpen} onOpenChange={onClose}&gt;&#10;      &lt;DialogContent className=&quot;max-w-2xl max-h-[90vh] overflow-y-auto&quot;&gt;&#10;        &lt;DialogHeader&gt;&#10;          &lt;DialogTitle&gt;&#10;            {tema ? 'Editar Tema' : 'Novo Tema'}&#10;          &lt;/DialogTitle&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;nmTema&quot;&gt;Nome do Tema *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;nmTema&quot;&#10;                value={nmTema}&#10;                onChange={(e) =&gt; setNmTema(e.target.value)}&#10;                placeholder=&quot;Digite o nome do tema&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;nrDiasPrazo&quot;&gt;Dias de Prazo *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;nrDiasPrazo&quot;&#10;                type=&quot;number&quot;&#10;                value={nrDiasPrazo}&#10;                onChange={(e) =&gt; setNrDiasPrazo(Number(e.target.value))}&#10;                placeholder=&quot;0&quot;&#10;                min=&quot;1&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;dsTema&quot;&gt;Descrição *&lt;/Label&gt;&#10;            &lt;Textarea&#10;              id=&quot;dsTema&quot;&#10;              value={dsTema}&#10;              onChange={(e) =&gt; setDsTema(e.target.value)}&#10;              placeholder=&quot;Digite a descrição do tema&quot;&#10;              rows={3}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;tpContagem&quot;&gt;Tipo de Contagem&lt;/Label&gt;&#10;            &lt;Select value={tpContagem} onValueChange={(value) =&gt; setTpContagem(value as TipoContagem)}&gt;&#10;              &lt;SelectTrigger&gt;&#10;                &lt;SelectValue /&gt;&#10;              &lt;/SelectTrigger&gt;&#10;              &lt;SelectContent&gt;&#10;                &lt;SelectItem value={TipoContagem.UTEIS}&gt;Dias Úteis&lt;/SelectItem&gt;&#10;                &lt;SelectItem value={TipoContagem.CORRIDOS}&gt;Dias Corridos&lt;/SelectItem&gt;&#10;              &lt;/SelectContent&gt;&#10;            &lt;/Select&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;Label&gt;Áreas Relacionadas *&lt;/Label&gt;&#10;&#10;            {/* Selected Areas Display */}&#10;            {selectedAreaIds.length &gt; 0 &amp;&amp; (&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label className=&quot;text-sm text-muted-foreground&quot;&gt;Áreas Selecionadas:&lt;/Label&gt;&#10;                &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                  {getSelectedAreas().map((area) =&gt; (&#10;                    &lt;Badge key={area.idArea} variant=&quot;secondary&quot; className=&quot;flex items-center gap-2&quot;&gt;&#10;                      {area.nmArea}&#10;                      &lt;Button&#10;                        variant=&quot;ghost&quot;&#10;                        size=&quot;sm&quot;&#10;                        className=&quot;h-4 w-4 p-0 hover:bg-transparent&quot;&#10;                        onClick={() =&gt; removeArea(area.idArea)}&#10;                      &gt;&#10;                        &lt;X className=&quot;h-3 w-3&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/Badge&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Areas Selection */}&#10;            &lt;div className=&quot;space-y-2 max-h-48 overflow-y-auto&quot;&gt;&#10;              {mockAreas.map((area) =&gt; (&#10;                &lt;div key={area.idArea} className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;Button&#10;                    variant={selectedAreaIds.includes(area.idArea) ? 'default' : 'outline'}&#10;                    size=&quot;sm&quot;&#10;                    className={cn('flex-1 justify-start', selectedAreaIds.includes(area.idArea) &amp;&amp; 'bg-muted')}&#10;                    onClick={() =&gt; handleAreaToggle(area.idArea)}&#10;                  &gt;&#10;                    {selectedAreaIds.includes(area.idArea) &amp;&amp; &lt;Check className=&quot;mr-2 h-4 w-4&quot; /&gt;}&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;font-medium&quot;&gt;{area.nmArea}&lt;/div&gt;&#10;                      &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;{area.dsArea}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/Button&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;DialogFooter&gt;&#10;          &lt;Button variant=&quot;outline&quot; onClick={onClose}&gt;&#10;            Cancelar&#10;          &lt;/Button&gt;&#10;          &lt;Button onClick={handleSave} disabled={!isFormValid}&gt;&#10;            {tema ? 'Salvar Alterações' : 'Criar Tema'}&#10;          &lt;/Button&gt;&#10;        &lt;/DialogFooter&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useState, useEffect } from 'react';&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogFooter&#10;} from '@/components/ui/dialog';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { Textarea } from '@/components/ui/textarea';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { Badge } from '@/components/ui/badge';&#10;import { X, Check } from 'lucide-react';&#10;import { Tema, TipoContagem } from '@/lib/types';&#10;import { mockAreas } from '@/lib/mockData';&#10;import { v4 as uuidv4 } from 'uuid';&#10;import { cn } from '@/lib/utils';&#10;&#10;interface TemaModalProps {&#10;  isOpen: boolean;&#10;  onClose: () =&gt; void;&#10;  onSave: (tema: Tema) =&gt; void;&#10;  tema?: Tema | null;&#10;}&#10;&#10;export function TemaModal({ isOpen, onClose, onSave, tema }: TemaModalProps) {&#10;  const [nmTema, setNmTema] = useState('');&#10;  const [dsTema, setDsTema] = useState('');&#10;  const [nrDiasPrazo, setNrDiasPrazo] = useState(0);&#10;  const [tpContagem, setTpContagem] = useState&lt;TipoContagem&gt;(TipoContagem.UTEIS);&#10;  const [selectedAreaIds, setSelectedAreaIds] = useState&lt;string[]&gt;([]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (tema) {&#10;      setNmTema(tema.nmTema);&#10;      setDsTema(tema.dsTema);&#10;      setNrDiasPrazo(tema.nrDiasPrazo);&#10;      setTpContagem(tema.tpContagem);&#10;      setSelectedAreaIds(tema.idAreas);&#10;    } else {&#10;      setNmTema('');&#10;      setDsTema('');&#10;      setNrDiasPrazo(0);&#10;      setTpContagem(TipoContagem.UTEIS);&#10;      setSelectedAreaIds([]);&#10;    }&#10;  }, [tema, isOpen]);&#10;&#10;  const handleAreaToggle = (areaId: string) =&gt; {&#10;    setSelectedAreaIds(prev =&gt;&#10;      prev.includes(areaId)&#10;        ? prev.filter(id =&gt; id !== areaId)&#10;        : [...prev, areaId]&#10;    );&#10;  };&#10;&#10;  const removeArea = (areaId: string) =&gt; {&#10;    setSelectedAreaIds(prev =&gt; prev.filter(id =&gt; id !== areaId));&#10;  };&#10;&#10;  const getSelectedAreas = () =&gt; {&#10;    return mockAreas.filter(area =&gt; selectedAreaIds.includes(area.idArea));&#10;  };&#10;&#10;  const handleSave = () =&gt; {&#10;    if (!nmTema || !dsTema || selectedAreaIds.length === 0) return;&#10;&#10;    const currentDate = new Date().toISOString().split('T')[0];&#10;    const currentUser = '12345678901';&#10;&#10;    const novoTema: Tema = {&#10;      idTema: tema?.idTema || uuidv4(),&#10;      nmTema,&#10;      dsTema,&#10;      idAreas: selectedAreaIds,&#10;      nrDiasPrazo,&#10;      tpContagem,&#10;      dtCadastro: tema?.dtCadastro || currentDate,&#10;      nrCpfCadastro: tema?.nrCpfCadastro || currentUser,&#10;      vsVersao: tema ? tema.vsVersao + 1 : 1,&#10;      dtAlteracao: currentDate,&#10;      nrCpfAlteracao: currentUser&#10;    };&#10;&#10;    onSave(novoTema);&#10;    onClose();&#10;  };&#10;&#10;  const isFormValid = nmTema &amp;&amp; dsTema &amp;&amp; selectedAreaIds.length &gt; 0 &amp;&amp; nrDiasPrazo &gt; 0;&#10;&#10;  return (&#10;    &lt;Dialog open={isOpen} onOpenChange={onClose}&gt;&#10;      &lt;DialogContent className=&quot;max-w-2xl max-h-[90vh] overflow-y-auto&quot;&gt;&#10;        &lt;DialogHeader&gt;&#10;          &lt;DialogTitle&gt;&#10;            {tema ? 'Editar Tema' : 'Novo Tema'}&#10;          &lt;/DialogTitle&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;nmTema&quot;&gt;Nome do Tema *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;nmTema&quot;&#10;                value={nmTema}&#10;                onChange={(e) =&gt; setNmTema(e.target.value)}&#10;                placeholder=&quot;Digite o nome do tema&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;nrDiasPrazo&quot;&gt;Dias de Prazo *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;nrDiasPrazo&quot;&#10;                type=&quot;number&quot;&#10;                value={nrDiasPrazo}&#10;                onChange={(e) =&gt; setNrDiasPrazo(Number(e.target.value))}&#10;                placeholder=&quot;0&quot;&#10;                min=&quot;1&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;dsTema&quot;&gt;Descrição *&lt;/Label&gt;&#10;            &lt;Textarea&#10;              id=&quot;dsTema&quot;&#10;              value={dsTema}&#10;              onChange={(e) =&gt; setDsTema(e.target.value)}&#10;              placeholder=&quot;Digite a descrição do tema&quot;&#10;              rows={3}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;tpContagem&quot;&gt;Tipo de Contagem&lt;/Label&gt;&#10;            &lt;Select value={tpContagem} onValueChange={(value) =&gt; setTpContagem(value as TipoContagem)}&gt;&#10;              &lt;SelectTrigger&gt;&#10;                &lt;SelectValue /&gt;&#10;              &lt;/SelectTrigger&gt;&#10;              &lt;SelectContent&gt;&#10;                &lt;SelectItem value={TipoContagem.UTEIS}&gt;Dias Úteis&lt;/SelectItem&gt;&#10;                &lt;SelectItem value={TipoContagem.CORRIDOS}&gt;Dias Corridos&lt;/SelectItem&gt;&#10;              &lt;/SelectContent&gt;&#10;            &lt;/Select&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;Label&gt;Áreas Relacionadas *&lt;/Label&gt;&#10;&#10;            {/* Selected Areas Display */}&#10;            {selectedAreaIds.length &gt; 0 &amp;&amp; (&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label className=&quot;text-sm text-muted-foreground&quot;&gt;Áreas Selecionadas:&lt;/Label&gt;&#10;                &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                  {getSelectedAreas().map((area) =&gt; (&#10;                    &lt;Badge key={area.idArea} variant=&quot;secondary&quot; className=&quot;flex items-center gap-2&quot;&gt;&#10;                      {area.nmArea}&#10;                      &lt;Button&#10;                        variant=&quot;ghost&quot;&#10;                        size=&quot;sm&quot;&#10;                        className=&quot;h-4 w-4 p-0 hover:bg-transparent&quot;&#10;                        onClick={() =&gt; removeArea(area.idArea)}&#10;                      &gt;&#10;                        &lt;X className=&quot;h-3 w-3&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/Badge&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Areas Selection */}&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              &lt;Label className=&quot;text-sm font-medium&quot;&gt;Selecione as áreas:&lt;/Label&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-2 max-h-48 overflow-y-auto&quot;&gt;&#10;                {mockAreas.map((area) =&gt; (&#10;                  &lt;button&#10;                    key={area.idArea}&#10;                    type=&quot;button&quot;&#10;                    onClick={() =&gt; handleAreaToggle(area.idArea)}&#10;                    className={cn(&#10;                      &quot;flex items-center gap-2 px-4 py-2 rounded-full border text-sm font-medium transition-all hover:shadow-sm&quot;,&#10;                      selectedAreaIds.includes(area.idArea)&#10;                        ? &quot;bg-blue-500 text-white border-blue-500&quot;&#10;                        : &quot;bg-white text-gray-700 border-gray-300 hover:border-gray-400&quot;&#10;                    )}&#10;                  &gt;&#10;                    {/* Circle with check/empty */}&#10;                    &lt;div className={cn(&#10;                      &quot;w-4 h-4 rounded-full border flex items-center justify-center transition-all&quot;,&#10;                      selectedAreaIds.includes(area.idArea)&#10;                        ? &quot;border-white bg-white&quot;&#10;                        : &quot;border-gray-400 bg-transparent&quot;&#10;                    )}&gt;&#10;                      {selectedAreaIds.includes(area.idArea) &amp;&amp; (&#10;                        &lt;Check className=&quot;w-2.5 h-2.5 text-blue-500&quot; /&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                    {area.nmArea}&#10;                  &lt;/button&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;DialogFooter&gt;&#10;          &lt;Button variant=&quot;outline&quot; onClick={onClose}&gt;&#10;            Cancelar&#10;          &lt;/Button&gt;&#10;          &lt;Button onClick={handleSave} disabled={!isFormValid}&gt;&#10;            {tema ? 'Salvar Alterações' : 'Criar Tema'}&#10;          &lt;/Button&gt;&#10;        &lt;/DialogFooter&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/temas/TemasTable.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/temas/TemasTable.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { &#10;  Table, &#10;  TableBody, &#10;  TableCell, &#10;  TableHead, &#10;  TableHeader, &#10;  TableRow &#10;} from '@/components/ui/table';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Badge } from '@/components/ui/badge';&#10;import {&#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown,&#10;  MoreHorizontal&#10;} from 'lucide-react';&#10;import { Tema } from '@/lib/types';&#10;import {mockTemas, mockAreas, getAreaNameById} from '@/lib/mockData';&#10;import { TemaModal } from './TemaModal';&#10;import {DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger} from &quot;@/components/ui/dropdown-menu&quot;;&#10;&#10;export default function TemasTable() {&#10;  const [temas, setTemas] = useState&lt;Tema[]&gt;(mockTemas);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedTema, setSelectedTema] = useState&lt;Tema | null&gt;(null);&#10;  const [showTemaModal, setShowTemaModal] = useState(false);&#10;  const [sortField, setSortField] = useState&lt;keyof Tema | null&gt;(null);&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;&#10;  const handleSort = (field: keyof Tema) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');&#10;    } else {&#10;      setSortField(field);&#10;      setSortDirection('asc');&#10;    }&#10;  };&#10;&#10;  const sortedTemas = [...temas].sort((a, b) =&gt; {&#10;    if (!sortField) return 0;&#10;    &#10;    const aValue = a[sortField];&#10;    const bValue = b[sortField];&#10;    &#10;    if (aValue === bValue) return 0;&#10;    &#10;    const direction = sortDirection === 'asc' ? 1 : -1;&#10;    &#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction;&#10;    }&#10;    &#10;    if (aValue &lt; bValue) return -1 * direction;&#10;    return 1 * direction;&#10;  });&#10;&#10;  const filteredTemas = sortedTemas.filter(tema =&gt; &#10;    tema.dsTema.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    tema.nmTema.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    tema.idAreas.some(areaId =&gt; getAreaNameById(areaId).toLowerCase().includes(searchQuery.toLowerCase()))&#10;  );&#10;&#10;  const handleCreateTema = () =&gt; {&#10;    setSelectedTema(null);&#10;    setShowTemaModal(true);&#10;  };&#10;&#10;  const handleEditTema = (tema: Tema) =&gt; {&#10;    setSelectedTema(tema);&#10;    setShowTemaModal(true);&#10;  };&#10;&#10;  const handleDeleteTema = (id: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir este tema?')) {&#10;      setTemas(temas.filter(tema =&gt; tema.idTema !== id));&#10;    }&#10;  };&#10;&#10;  const handleSaveTema = (tema: Tema) =&gt; {&#10;    if (selectedTema) {&#10;      // Update existing tema&#10;      setTemas(temas.map(t =&gt; t.idTema === tema.idTema ? tema : t));&#10;    } else {&#10;      // Add new tema&#10;      setTemas([...temas, tema]);&#10;    }&#10;    setShowTemaModal(false);&#10;    setSelectedTema(null);&#10;  };&#10;&#10;  const getAreasForTema = (idAreas: string[]) =&gt; {&#10;    return mockAreas.filter(area =&gt; idAreas.includes(area.idArea));&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;h-full flex flex-col bg-gray-50&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Temas&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateTema} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Novo Tema&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome, número ou área...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button variant=&quot;secondary&quot; className=&quot;h-10 px-4&quot;&gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;w-16 cursor-pointer&quot; onClick={() =&gt; handleSort('nmTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Área&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('idAreas')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Áreas Relacionadas&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nrDiasPrazo')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Prazo (dias)&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('tpContagem')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Tipo de Contagem&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dtCadastro')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Data de Cadastro&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredTemas.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={7} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhum tema encontrado&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredTemas.map((tema) =&gt; {&#10;                const areas = getAreasForTema(tema.idAreas);&#10;                return (&#10;                  &lt;TableRow key={tema.idTema} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                    &lt;TableCell className=&quot;font-medium&quot;&gt;{tema.nmTema}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{tema.dsTema}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-1 max-w-sm&quot;&gt;&#10;                        {areas.length === 0 ? (&#10;                          &lt;span className=&quot;text-muted-foreground text-sm&quot;&gt;Nenhuma área&lt;/span&gt;&#10;                        ) : (&#10;                          areas.map((area) =&gt; (&#10;                            &lt;Badge key={area.idArea} variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#10;                              {area.nmArea}&#10;                            &lt;/Badge&gt;&#10;                          ))&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{tema.nrDiasPrazo}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{tema.tpContagem}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{new Date(tema.dtCadastro).toLocaleDateString('pt-BR')}&lt;/TableCell&gt;&#10;                    &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                        &lt;Button&#10;                          variant=&quot;ghost&quot;&#10;                          size=&quot;icon&quot;&#10;                          onClick={() =&gt; handleEditTema(tema)}&#10;                        &gt;&#10;                          &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;Button&#10;                          variant=&quot;ghost&quot;&#10;                          size=&quot;icon&quot;&#10;                          onClick={() =&gt; handleDeleteTema(tema.idTema)}&#10;                          className=&quot;text-red-500 hover:text-red-700&quot;&#10;                        &gt;&#10;                          &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;DropdownMenu&gt;&#10;                          &lt;DropdownMenuTrigger asChild&gt;&#10;                            &lt;Button variant=&quot;ghost&quot; className=&quot;h-8 w-8 p-0&quot;&gt;&#10;                              &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;                              &lt;span className=&quot;sr-only&quot;&gt;Abrir menu&lt;/span&gt;&#10;                            &lt;/Button&gt;&#10;                          &lt;/DropdownMenuTrigger&gt;&#10;                          &lt;DropdownMenuContent align=&quot;end&quot;&gt;&#10;                            &lt;DropdownMenuItem onClick={() =&gt; handleEditTema(tema)}&gt;&#10;                              &lt;Edit className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                              Editar&#10;                            &lt;/DropdownMenuItem&gt;&#10;                            &lt;DropdownMenuItem&#10;                              onClick={() =&gt; handleDeleteTema(tema.idTema)}&#10;                              className=&quot;text-destructive&quot;&#10;                            &gt;&#10;                              &lt;Trash2 className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                              Excluir&#10;                            &lt;/DropdownMenuItem&gt;&#10;                          &lt;/DropdownMenuContent&gt;&#10;                        &lt;/DropdownMenu&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                  &lt;/TableRow&gt;&#10;                );&#10;              })&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Tema Modal */}&#10;      {showTemaModal &amp;&amp; (&#10;        &lt;TemaModal&#10;          tema={selectedTema}&#10;          isOpen={selectedTema !== null}&#10;          onClose={() =&gt; {&#10;            setShowTemaModal(false);&#10;            setSelectedTema(null);&#10;          }}&#10;          onSave={handleSaveTema}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client'&#10;&#10;import { useState } from 'react'&#10;import { Button } from '@/components/ui/button'&#10;import { Input } from '@/components/ui/input'&#10;import { Badge } from '@/components/ui/badge'&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow,&#10;} from '@/components/ui/table'&#10;import {&#10;  DropdownMenu,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuTrigger,&#10;} from '@/components/ui/dropdown-menu'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;import { Search, Plus, MoreHorizontal, Edit, Trash2 } from 'lucide-react'&#10;import { Tema } from '@/lib/types'&#10;import { mockTemas, mockAreas } from '@/lib/mockData'&#10;import { TemaModal } from './TemaModal'&#10;&#10;interface TemasTableProps {&#10;  onEdit?: (tema: Tema) =&gt; void&#10;  onDelete?: (temaId: string) =&gt; void&#10;}&#10;&#10;export function TemasTable({ onEdit, onDelete }: TemasTableProps) {&#10;  const [temas, setTemas] = useState&lt;Tema[]&gt;(mockTemas)&#10;  const [searchTerm, setSearchTerm] = useState('')&#10;  const [isModalOpen, setIsModalOpen] = useState(false)&#10;  const [editingTema, setEditingTema] = useState&lt;Tema | null&gt;(null)&#10;&#10;  const filteredTemas = temas.filter(tema =&gt;&#10;    tema.nmTema.toLowerCase().includes(searchTerm.toLowerCase()) ||&#10;    tema.dsTema.toLowerCase().includes(searchTerm.toLowerCase())&#10;  )&#10;&#10;  const getAreasForTema = (idAreas: string[]) =&gt; {&#10;    return mockAreas.filter(area =&gt; idAreas.includes(area.idArea))&#10;  }&#10;&#10;  const handleEdit = (tema: Tema) =&gt; {&#10;    setEditingTema(tema)&#10;    setIsModalOpen(true)&#10;    onEdit?.(tema)&#10;  }&#10;&#10;  const handleDelete = (temaId: string) =&gt; {&#10;    setTemas(prev =&gt; prev.filter(tema =&gt; tema.idTema !== temaId))&#10;    onDelete?.(temaId)&#10;  }&#10;&#10;  const handleSave = (tema: Tema) =&gt; {&#10;    if (editingTema) {&#10;      // Update existing tema&#10;      setTemas(prev =&gt; prev.map(t =&gt; t.idTema === tema.idTema ? tema : t))&#10;    } else {&#10;      // Add new tema&#10;      setTemas(prev =&gt; [...prev, tema])&#10;    }&#10;    setEditingTema(null)&#10;  }&#10;&#10;  const handleNewTema = () =&gt; {&#10;    setEditingTema(null)&#10;    setIsModalOpen(true)&#10;  }&#10;&#10;  const handleCloseModal = () =&gt; {&#10;    setIsModalOpen(false)&#10;    setEditingTema(null)&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-4&quot;&gt;&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;CardTitle&gt;Temas&lt;/CardTitle&gt;&#10;            &lt;Button onClick={handleNewTema} className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Plus className=&quot;h-4 w-4&quot; /&gt;&#10;              Novo Tema&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2 mb-4&quot;&gt;&#10;            &lt;div className=&quot;relative flex-1&quot;&gt;&#10;              &lt;Search className=&quot;absolute left-2 top-2.5 h-4 w-4 text-muted-foreground&quot; /&gt;&#10;              &lt;Input&#10;                placeholder=&quot;Buscar temas...&quot;&#10;                value={searchTerm}&#10;                onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                className=&quot;pl-8&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;rounded-md border&quot;&gt;&#10;            &lt;Table&gt;&#10;              &lt;TableHeader&gt;&#10;                &lt;TableRow&gt;&#10;                  &lt;TableHead&gt;Nome&lt;/TableHead&gt;&#10;                  &lt;TableHead&gt;Descrição&lt;/TableHead&gt;&#10;                  &lt;TableHead&gt;Áreas Relacionadas&lt;/TableHead&gt;&#10;                  &lt;TableHead className=&quot;text-center&quot;&gt;Prazo&lt;/TableHead&gt;&#10;                  &lt;TableHead className=&quot;text-center&quot;&gt;Tipo Contagem&lt;/TableHead&gt;&#10;                  &lt;TableHead className=&quot;text-center&quot;&gt;Ações&lt;/TableHead&gt;&#10;                &lt;/TableRow&gt;&#10;              &lt;/TableHeader&gt;&#10;              &lt;TableBody&gt;&#10;                {filteredTemas.length === 0 ? (&#10;                  &lt;TableRow&gt;&#10;                    &lt;TableCell colSpan={6} className=&quot;text-center py-8 text-muted-foreground&quot;&gt;&#10;                      {searchTerm ? 'Nenhum tema encontrado.' : 'Nenhum tema cadastrado.'}&#10;                    &lt;/TableCell&gt;&#10;                  &lt;/TableRow&gt;&#10;                ) : (&#10;                  filteredTemas.map((tema) =&gt; {&#10;                    const areas = getAreasForTema(tema.idAreas)&#10;                    return (&#10;                      &lt;TableRow key={tema.idTema}&gt;&#10;                        &lt;TableCell className=&quot;font-medium&quot;&gt;{tema.nmTema}&lt;/TableCell&gt;&#10;                        &lt;TableCell className=&quot;max-w-xs&quot;&gt;&#10;                          &lt;div className=&quot;truncate&quot; title={tema.dsTema}&gt;&#10;                            {tema.dsTema}&#10;                          &lt;/div&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          &lt;div className=&quot;flex flex-wrap gap-1 max-w-sm&quot;&gt;&#10;                            {areas.length === 0 ? (&#10;                              &lt;span className=&quot;text-muted-foreground text-sm&quot;&gt;Nenhuma área&lt;/span&gt;&#10;                            ) : (&#10;                              areas.map((area) =&gt; (&#10;                                &lt;Badge key={area.idArea} variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#10;                                  {area.nmArea}&#10;                                &lt;/Badge&gt;&#10;                              ))&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell className=&quot;text-center&quot;&gt;&#10;                          {tema.nrDiasPrazo} dias&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell className=&quot;text-center&quot;&gt;&#10;                          &lt;Badge variant={tema.tpContagem === 'UTEIS' ? 'default' : 'secondary'}&gt;&#10;                            {tema.tpContagem === 'UTEIS' ? 'Úteis' : 'Corridos'}&#10;                          &lt;/Badge&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell className=&quot;text-center&quot;&gt;&#10;                          &lt;DropdownMenu&gt;&#10;                            &lt;DropdownMenuTrigger asChild&gt;&#10;                              &lt;Button variant=&quot;ghost&quot; className=&quot;h-8 w-8 p-0&quot;&gt;&#10;                                &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;                                &lt;span className=&quot;sr-only&quot;&gt;Abrir menu&lt;/span&gt;&#10;                              &lt;/Button&gt;&#10;                            &lt;/DropdownMenuTrigger&gt;&#10;                            &lt;DropdownMenuContent align=&quot;end&quot;&gt;&#10;                              &lt;DropdownMenuItem onClick={() =&gt; handleEdit(tema)}&gt;&#10;                                &lt;Edit className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                Editar&#10;                              &lt;/DropdownMenuItem&gt;&#10;                              &lt;DropdownMenuItem &#10;                                onClick={() =&gt; handleDelete(tema.idTema)}&#10;                                className=&quot;text-destructive&quot;&#10;                              &gt;&#10;                                &lt;Trash2 className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                Excluir&#10;                              &lt;/DropdownMenuItem&gt;&#10;                            &lt;/DropdownMenuContent&gt;&#10;                          &lt;/DropdownMenu&gt;&#10;                        &lt;/TableCell&gt;&#10;                      &lt;/TableRow&gt;&#10;                    )&#10;                  })&#10;                )}&#10;              &lt;/TableBody&gt;&#10;            &lt;/Table&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      &lt;TemaModal&#10;        isOpen={isModalOpen}&#10;        onClose={handleCloseModal}&#10;        onSave={handleSave}&#10;        tema={editingTema}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>