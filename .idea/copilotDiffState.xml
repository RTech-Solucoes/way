<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/areas/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/areas/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { &#10;  Table, &#10;  TableBody, &#10;  TableCell, &#10;  TableHead, &#10;  TableHeader, &#10;  TableRow &#10;} from '@/components/ui/table';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown&#10;} from 'lucide-react';&#10;import { Area } from '@/lib/types';&#10;import { mockAreas } from '@/lib/mockData';&#10;import AreaModal from '../../components/areas/AreaModal';&#10;&#10;export default function AreasPage() {&#10;  const [areas, setAreas] = useState&lt;Area[]&gt;(mockAreas);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedArea, setSelectedArea] = useState&lt;Area | null&gt;(null);&#10;  const [showAreaModal, setShowAreaModal] = useState(false);&#10;  const [sortField, setSortField] = useState&lt;keyof Area | null&gt;(null);&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;&#10;  const handleSort = (field: keyof Area) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');&#10;    } else {&#10;      setSortField(field);&#10;      setSortDirection('asc');&#10;    }&#10;  };&#10;&#10;  const sortedAreas = [...areas].sort((a, b) =&gt; {&#10;    if (!sortField) return 0;&#10;    &#10;    const aValue = a[sortField];&#10;    const bValue = b[sortField];&#10;    &#10;    if (aValue === bValue) return 0;&#10;    &#10;    const direction = sortDirection === 'asc' ? 1 : -1;&#10;    &#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction;&#10;    }&#10;    &#10;    if (aValue &lt; bValue) return -1 * direction;&#10;    return 1 * direction;&#10;  });&#10;&#10;  const filteredAreas = sortedAreas.filter(area =&gt; &#10;    area.nmArea.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    area.dsArea.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    area.cdArea.toString().includes(searchQuery)&#10;  );&#10;&#10;  const handleCreateArea = () =&gt; {&#10;    setSelectedArea(null);&#10;    setShowAreaModal(true);&#10;  };&#10;&#10;  const handleEditArea = (area: Area) =&gt; {&#10;    setSelectedArea(area);&#10;    setShowAreaModal(true);&#10;  };&#10;&#10;  const handleDeleteArea = (id: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir esta área?')) {&#10;      setAreas(areas.filter(area =&gt; area.idArea !== id));&#10;    }&#10;  };&#10;&#10;  const handleSaveArea = (area: Area) =&gt; {&#10;    if (selectedArea) {&#10;      // Update existing area&#10;      setAreas(areas.map(a =&gt; a.idArea === area.idArea ? area : a));&#10;    } else {&#10;      // Add new area&#10;      setAreas([...areas, area]);&#10;    }&#10;    setShowAreaModal(false);&#10;    setSelectedArea(null);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Áreas&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateArea} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Nova Área&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome, código ou descrição...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button variant=&quot;secondary&quot; className=&quot;h-10 px-4&quot;&gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;w-24 cursor-pointer&quot; onClick={() =&gt; handleSort('cdArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Código&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Descrição&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dtCadastro')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Data de Cadastro&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredAreas.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={6} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhuma área encontrada&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredAreas.map((area) =&gt; (&#10;                &lt;TableRow key={area.idArea} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;{area.cdArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{area.nmArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{area.dsArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{new Date(area.dtCadastro).toLocaleDateString('pt-BR')}&lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleEditArea(area)}&#10;                      &gt;&#10;                        &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleDeleteArea(area.idArea)}&#10;                        className=&quot;text-red-500 hover:text-red-700&quot;&#10;                      &gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Area Modal */}&#10;      {showAreaModal &amp;&amp; (&#10;        &lt;AreaModal&#10;          area={selectedArea}&#10;          onClose={() =&gt; {&#10;            setShowAreaModal(false);&#10;            setSelectedArea(null);&#10;          }}&#10;          onSave={handleSaveArea}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { &#10;  Table, &#10;  TableBody, &#10;  TableCell, &#10;  TableHead, &#10;  TableHeader, &#10;  TableRow &#10;} from '@/components/ui/table';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown,&#10;  X&#10;} from 'lucide-react';&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogFooter&#10;} from '@/components/ui/dialog';&#10;import { Label } from '@/components/ui/label';&#10;import { Area } from '@/lib/types';&#10;import { mockAreas } from '@/lib/mockData';&#10;import AreaModal from '../../components/areas/AreaModal';&#10;&#10;export default function AreasPage() {&#10;  const [areas, setAreas] = useState&lt;Area[]&gt;(mockAreas);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedArea, setSelectedArea] = useState&lt;Area | null&gt;(null);&#10;  const [showAreaModal, setShowAreaModal] = useState(false);&#10;  const [showFilterModal, setShowFilterModal] = useState(false);&#10;  const [sortField, setSortField] = useState&lt;keyof Area | null&gt;(null);&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;  &#10;  // Filter states&#10;  const [filters, setFilters] = useState({&#10;    codigo: '',&#10;    nome: '',&#10;    descricao: '',&#10;    dataInicio: '',&#10;    dataFim: ''&#10;  });&#10;  const [activeFilters, setActiveFilters] = useState(filters);&#10;&#10;  const handleSort = (field: keyof Area) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');&#10;    } else {&#10;      setSortField(field);&#10;      setSortDirection('asc');&#10;    }&#10;  };&#10;&#10;  const sortedAreas = [...areas].sort((a, b) =&gt; {&#10;    if (!sortField) return 0;&#10;    &#10;    const aValue = a[sortField];&#10;    const bValue = b[sortField];&#10;    &#10;    if (aValue === bValue) return 0;&#10;    &#10;    const direction = sortDirection === 'asc' ? 1 : -1;&#10;    &#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction;&#10;    }&#10;    &#10;    if (aValue &lt; bValue) return -1 * direction;&#10;    return 1 * direction;&#10;  });&#10;&#10;  const handleClearFilters = () =&gt; {&#10;    const emptyFilters = {&#10;      codigo: '',&#10;      nome: '',&#10;      descricao: '',&#10;      dataInicio: '',&#10;      dataFim: ''&#10;    };&#10;    setFilters(emptyFilters);&#10;    setActiveFilters(emptyFilters);&#10;  };&#10;&#10;  const handleApplyFilters = () =&gt; {&#10;    setActiveFilters(filters);&#10;    setShowFilterModal(false);&#10;  };&#10;&#10;  const filteredAreas = sortedAreas.filter(area =&gt; {&#10;    // Search query filter&#10;    const matchesSearch = area.nmArea.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      area.dsArea.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      area.cdArea.toString().includes(searchQuery);&#10;&#10;    // Advanced filters&#10;    const matchesCodigo = !activeFilters.codigo || &#10;      area.cdArea.toString().includes(activeFilters.codigo);&#10;    &#10;    const matchesNome = !activeFilters.nome || &#10;      area.nmArea.toLowerCase().includes(activeFilters.nome.toLowerCase());&#10;    &#10;    const matchesDescricao = !activeFilters.descricao || &#10;      area.dsArea.toLowerCase().includes(activeFilters.descricao.toLowerCase());&#10;    &#10;    const matchesDataInicio = !activeFilters.dataInicio || &#10;      new Date(area.dtCadastro) &gt;= new Date(activeFilters.dataInicio);&#10;    &#10;    const matchesDataFim = !activeFilters.dataFim || &#10;      new Date(area.dtCadastro) &lt;= new Date(activeFilters.dataFim);&#10;&#10;    return matchesSearch &amp;&amp; matchesCodigo &amp;&amp; matchesNome &amp;&amp; matchesDescricao &amp;&amp; &#10;           matchesDataInicio &amp;&amp; matchesDataFim;&#10;  });&#10;&#10;  const hasActiveFilters = Object.values(activeFilters).some(value =&gt; value !== '');&#10;&#10;  const handleCreateArea = () =&gt; {&#10;    setSelectedArea(null);&#10;    setShowAreaModal(true);&#10;  };&#10;&#10;  const handleEditArea = (area: Area) =&gt; {&#10;    setSelectedArea(area);&#10;    setShowAreaModal(true);&#10;  };&#10;&#10;  const handleDeleteArea = (id: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir esta área?')) {&#10;      setAreas(areas.filter(area =&gt; area.idArea !== id));&#10;    }&#10;  };&#10;&#10;  const handleSaveArea = (area: Area) =&gt; {&#10;    if (selectedArea) {&#10;      // Update existing area&#10;      setAreas(areas.map(a =&gt; a.idArea === area.idArea ? area : a));&#10;    } else {&#10;      // Add new area&#10;      setAreas([...areas, area]);&#10;    }&#10;    setShowAreaModal(false);&#10;    setSelectedArea(null);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Áreas&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateArea} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Nova Área&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome, código ou descrição...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button &#10;            variant=&quot;secondary&quot; &#10;            className=&quot;h-10 px-4&quot;&#10;            onClick={() =&gt; setShowFilterModal(true)}&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;w-24 cursor-pointer&quot; onClick={() =&gt; handleSort('cdArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Código&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsArea')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Descrição&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dtCadastro')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Data de Cadastro&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredAreas.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={6} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhuma área encontrada&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredAreas.map((area) =&gt; (&#10;                &lt;TableRow key={area.idArea} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;{area.cdArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{area.nmArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{area.dsArea}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{new Date(area.dtCadastro).toLocaleDateString('pt-BR')}&lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleEditArea(area)}&#10;                      &gt;&#10;                        &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleDeleteArea(area.idArea)}&#10;                        className=&quot;text-red-500 hover:text-red-700&quot;&#10;                      &gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Area Modal */}&#10;      {showAreaModal &amp;&amp; (&#10;        &lt;AreaModal&#10;          area={selectedArea}&#10;          onClose={() =&gt; {&#10;            setShowAreaModal(false);&#10;            setSelectedArea(null);&#10;          }}&#10;          onSave={handleSaveArea}&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Filter Modal */}&#10;      {showFilterModal &amp;&amp; (&#10;        &lt;Dialog open={showFilterModal} onOpenChange={setShowFilterModal}&gt;&#10;          &lt;DialogContent className=&quot;max-w-2xl p-6&quot;&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle className=&quot;text-lg font-semibold&quot;&gt;&#10;                Filtrar Áreas&#10;              &lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;            &#10;            &lt;div className=&quot;grid grid-cols-1 gap-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;codigo&quot;&gt;Código&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;codigo&quot;&#10;                  value={filters.codigo}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, codigo: e.target.value })}&#10;                  placeholder=&quot;Filtrar por código&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;nome&quot;&gt;Nome&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;nome&quot;&#10;                  value={filters.nome}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, nome: e.target.value })}&#10;                  placeholder=&quot;Filtrar por nome&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;descricao&quot;&gt;Descrição&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;descricao&quot;&#10;                  value={filters.descricao}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, descricao: e.target.value })}&#10;                  placeholder=&quot;Filtrar por descrição&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;dataInicio&quot;&gt;Data Início&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;dataInicio&quot;&#10;                    type=&quot;date&quot;&#10;                    value={filters.dataInicio}&#10;                    onChange={(e) =&gt; setFilters({ ...filters, dataInicio: e.target.value })}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;dataFim&quot;&gt;Data Fim&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;dataFim&quot;&#10;                    type=&quot;date&quot;&#10;                    value={filters.dataFim}&#10;                    onChange={(e) =&gt; setFilters({ ...filters, dataFim: e.target.value })}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex justify-end gap-2 mt-4&quot;&gt;&#10;              &lt;Button &#10;                variant=&quot;outline&quot; &#10;                onClick={() =&gt; {&#10;                  setShowFilterModal(false);&#10;                  handleClearFilters();&#10;                }}&#10;              &gt;&#10;                &lt;X className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                Limpar Filtros&#10;              &lt;/Button&gt;&#10;              &lt;Button &#10;                onClick={handleApplyFilters} &#10;                className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;              &gt;&#10;                Aplicar Filtros&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/responsaveis/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/responsaveis/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { &#10;  Table, &#10;  TableBody, &#10;  TableCell, &#10;  TableHead, &#10;  TableHeader, &#10;  TableRow &#10;} from '@/components/ui/table';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown,&#10;  X&#10;} from 'lucide-react';&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogFooter&#10;} from '@/components/ui/dialog';&#10;import { Label } from '@/components/ui/label';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { Responsavel } from '@/lib/types';&#10;import { mockResponsaveis } from '@/lib/mockData';&#10;import ResponsavelModal from '../../components/responsaveis/ResponsavelModal';&#10;&#10;export default function ResponsaveisPage() {&#10;  const [responsaveis, setResponsaveis] = useState&lt;Responsavel[]&gt;(mockResponsaveis);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedResponsavel, setSelectedResponsavel] = useState&lt;Responsavel | null&gt;(null);&#10;  const [showResponsavelModal, setShowResponsavelModal] = useState(false);&#10;  const [showFilterModal, setShowFilterModal] = useState(false);&#10;  const [sortField, setSortField] = useState&lt;keyof Responsavel | null&gt;(null);&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;&#10;  // Filter states&#10;  const [filters, setFilters] = useState({&#10;    nome: '',&#10;    email: '',&#10;    telefone: '',&#10;    perfil: ''&#10;  });&#10;  const [activeFilters, setActiveFilters] = useState(filters);&#10;&#10;  const handleSort = (field: keyof Responsavel) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');&#10;    } else {&#10;      setSortField(field);&#10;      setSortDirection('asc');&#10;    }&#10;  };&#10;&#10;  const sortedResponsaveis = [...responsaveis].sort((a, b) =&gt; {&#10;    if (!sortField) return 0;&#10;&#10;    const aValue = a[sortField];&#10;    const bValue = b[sortField];&#10;&#10;    if (aValue === bValue) return 0;&#10;&#10;    const direction = sortDirection === 'asc' ? 1 : -1;&#10;&#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction;&#10;    }&#10;&#10;    return 0;&#10;  });&#10;&#10;  const handleClearFilters = () =&gt; {&#10;    const emptyFilters = {&#10;      nome: '',&#10;      email: '',&#10;      telefone: '',&#10;      perfil: ''&#10;    };&#10;    setFilters(emptyFilters);&#10;    setActiveFilters(emptyFilters);&#10;  };&#10;&#10;  const handleApplyFilters = () =&gt; {&#10;    setActiveFilters(filters);&#10;    setShowFilterModal(false);&#10;  };&#10;&#10;  const filteredResponsaveis = sortedResponsaveis.filter(responsavel =&gt; {&#10;    // Search query filter&#10;    const matchesSearch = responsavel.dsNome.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      responsavel.dsEmail.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      responsavel.nmTelefone.toLowerCase().includes(searchQuery.toLowerCase());&#10;&#10;    // Advanced filters&#10;    const matchesNome = !activeFilters.nome ||&#10;      responsavel.dsNome.toLowerCase().includes(activeFilters.nome.toLowerCase());&#10;&#10;    const matchesEmail = !activeFilters.email ||&#10;      responsavel.dsEmail.toLowerCase().includes(activeFilters.email.toLowerCase());&#10;&#10;    const matchesTelefone = !activeFilters.telefone ||&#10;      responsavel.nmTelefone.includes(activeFilters.telefone);&#10;&#10;    const matchesPerfil = !activeFilters.perfil ||&#10;      responsavel.dsPerfil === activeFilters.perfil;&#10;&#10;    return matchesSearch &amp;&amp; matchesNome &amp;&amp; matchesEmail &amp;&amp; matchesTelefone &amp;&amp; matchesPerfil;&#10;  });&#10;&#10;  const hasActiveFilters = Object.values(activeFilters).some(value =&gt; value !== '');&#10;&#10;  const handleCreateResponsavel = () =&gt; {&#10;    setSelectedResponsavel(null);&#10;    setShowResponsavelModal(true);&#10;  };&#10;&#10;  const handleEditResponsavel = (responsavel: Responsavel) =&gt; {&#10;    setSelectedResponsavel(responsavel);&#10;    setShowResponsavelModal(true);&#10;  };&#10;&#10;  const handleDeleteResponsavel = (id: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir este responsável?')) {&#10;      setResponsaveis(responsaveis.filter(responsavel =&gt; responsavel.idResponsavel !== id));&#10;    }&#10;  };&#10;&#10;  const handleSaveResponsavel = (responsavel: Responsavel) =&gt; {&#10;    if (selectedResponsavel) {&#10;      // Update existing responsavel&#10;      setResponsaveis(responsaveis.map(r =&gt; r.idResponsavel === responsavel.idResponsavel ? responsavel : r));&#10;    } else {&#10;      // Add new responsavel&#10;      setResponsaveis([...responsaveis, responsavel]);&#10;    }&#10;    setShowResponsavelModal(false);&#10;    setSelectedResponsavel(null);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Responsáveis&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateResponsavel} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Novo Responsável&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome, email ou telefone...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            variant=&quot;secondary&quot;&#10;            className=&quot;h-10 px-4&quot;&#10;            onClick={() =&gt; setShowFilterModal(true)}&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsNome')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsEmail')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Email&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmTelefone')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Telefone&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredResponsaveis.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={4} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhum responsável encontrado&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredResponsaveis.map((responsavel) =&gt; (&#10;                &lt;TableRow key={responsavel.idResponsavel} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;{responsavel.dsNome}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{responsavel.dsEmail}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{responsavel.nmTelefone}&lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleEditResponsavel(responsavel)}&#10;                      &gt;&#10;                        &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleDeleteResponsavel(responsavel.idResponsavel)}&#10;                        className=&quot;text-red-500 hover:text-red-700&quot;&#10;                      &gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Responsavel Modal */}&#10;      {showResponsavelModal &amp;&amp; (&#10;        &lt;ResponsavelModal&#10;          responsavel={selectedResponsavel}&#10;          onClose={() =&gt; {&#10;            setShowResponsavelModal(false);&#10;            setSelectedResponsavel(null);&#10;          }}&#10;          onSave={handleSaveResponsavel}&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Filter Modal */}&#10;      {showFilterModal &amp;&amp; (&#10;        &lt;Dialog open={showFilterModal} onOpenChange={setShowFilterModal}&gt;&#10;          &lt;DialogContent&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle&gt;Filtrar Responsáveis&lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;            &lt;div className=&quot;grid gap-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;nome&quot;&gt;Nome&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;nome&quot;&#10;                  value={filters.nome}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, nome: e.target.value })}&#10;                  placeholder=&quot;Filtrar por nome&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;email&quot;&gt;Email&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;email&quot;&#10;                  value={filters.email}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, email: e.target.value })}&#10;                  placeholder=&quot;Filtrar por email&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;telefone&quot;&gt;Telefone&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;telefone&quot;&#10;                  value={filters.telefone}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, telefone: e.target.value })}&#10;                  placeholder=&quot;Filtrar por telefone&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;perfil&quot;&gt;Perfil&lt;/Label&gt;&#10;                &lt;Select&#10;                  id=&quot;perfil&quot;&#10;                  value={filters.perfil}&#10;                  onValueChange={(value) =&gt; setFilters({ ...filters, perfil: value })}&#10;                  placeholder=&quot;Selecione um perfil&quot;&#10;                &gt;&#10;                  &lt;SelectTrigger&gt;&#10;                    &lt;SelectValue placeholder=&quot;Selecione um perfil&quot; /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;admin&quot;&gt;Admin&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;user&quot;&gt;User&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;manager&quot;&gt;Manager&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/DialogContent&gt;&#10;          &lt;DialogFooter&gt;&#10;            &lt;Button&#10;              variant=&quot;secondary&quot;&#10;              onClick={() =&gt; {&#10;                setShowFilterModal(false);&#10;                handleClearFilters();&#10;              }}&#10;              className=&quot;mr-2&quot;&#10;            &gt;&#10;              &lt;X className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Limpar Filtros&#10;            &lt;/Button&gt;&#10;            &lt;Button onClick={handleApplyFilters}&gt;&#10;              Aplicar Filtros&#10;            &lt;/Button&gt;&#10;          &lt;/DialogFooter&gt;&#10;        &lt;/Dialog&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { &#10;  Table, &#10;  TableBody, &#10;  TableCell, &#10;  TableHead, &#10;  TableHeader, &#10;  TableRow &#10;} from '@/components/ui/table';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown,&#10;  X&#10;} from 'lucide-react';&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogFooter&#10;} from '@/components/ui/dialog';&#10;import { Label } from '@/components/ui/label';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { Responsavel } from '@/lib/types';&#10;import { mockResponsaveis } from '@/lib/mockData';&#10;import ResponsavelModal from '../../components/responsaveis/ResponsavelModal';&#10;&#10;export default function ResponsaveisPage() {&#10;  const [responsaveis, setResponsaveis] = useState&lt;Responsavel[]&gt;(mockResponsaveis);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedResponsavel, setSelectedResponsavel] = useState&lt;Responsavel | null&gt;(null);&#10;  const [showResponsavelModal, setShowResponsavelModal] = useState(false);&#10;  const [showFilterModal, setShowFilterModal] = useState(false);&#10;  const [sortField, setSortField] = useState&lt;keyof Responsavel | null&gt;(null);&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;&#10;  // Filter states&#10;  const [filters, setFilters] = useState({&#10;    nome: '',&#10;    email: '',&#10;    telefone: '',&#10;    perfil: ''&#10;  });&#10;  const [activeFilters, setActiveFilters] = useState(filters);&#10;&#10;  const handleSort = (field: keyof Responsavel) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');&#10;    } else {&#10;      setSortField(field);&#10;      setSortDirection('asc');&#10;    }&#10;  };&#10;&#10;  const sortedResponsaveis = [...responsaveis].sort((a, b) =&gt; {&#10;    if (!sortField) return 0;&#10;&#10;    const aValue = a[sortField];&#10;    const bValue = b[sortField];&#10;&#10;    if (aValue === bValue) return 0;&#10;&#10;    const direction = sortDirection === 'asc' ? 1 : -1;&#10;&#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction;&#10;    }&#10;&#10;    return 0;&#10;  });&#10;&#10;  const handleClearFilters = () =&gt; {&#10;    const emptyFilters = {&#10;      nome: '',&#10;      email: '',&#10;      telefone: '',&#10;      perfil: ''&#10;    };&#10;    setFilters(emptyFilters);&#10;    setActiveFilters(emptyFilters);&#10;  };&#10;&#10;  const handleApplyFilters = () =&gt; {&#10;    setActiveFilters(filters);&#10;    setShowFilterModal(false);&#10;  };&#10;&#10;  const filteredResponsaveis = sortedResponsaveis.filter(responsavel =&gt; {&#10;    // Search query filter&#10;    const matchesSearch = responsavel.dsNome.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      responsavel.dsEmail.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      responsavel.nmTelefone.toLowerCase().includes(searchQuery.toLowerCase());&#10;&#10;    // Advanced filters&#10;    const matchesNome = !activeFilters.nome ||&#10;      responsavel.dsNome.toLowerCase().includes(activeFilters.nome.toLowerCase());&#10;&#10;    const matchesEmail = !activeFilters.email ||&#10;      responsavel.dsEmail.toLowerCase().includes(activeFilters.email.toLowerCase());&#10;&#10;    const matchesTelefone = !activeFilters.telefone ||&#10;      responsavel.nmTelefone.includes(activeFilters.telefone);&#10;&#10;    const matchesPerfil = !activeFilters.perfil ||&#10;      responsavel.dsPerfil === activeFilters.perfil;&#10;&#10;    return matchesSearch &amp;&amp; matchesNome &amp;&amp; matchesEmail &amp;&amp; matchesTelefone &amp;&amp; matchesPerfil;&#10;  });&#10;&#10;  const hasActiveFilters = Object.values(activeFilters).some(value =&gt; value !== '');&#10;&#10;  const handleCreateResponsavel = () =&gt; {&#10;    setSelectedResponsavel(null);&#10;    setShowResponsavelModal(true);&#10;  };&#10;&#10;  const handleEditResponsavel = (responsavel: Responsavel) =&gt; {&#10;    setSelectedResponsavel(responsavel);&#10;    setShowResponsavelModal(true);&#10;  };&#10;&#10;  const handleDeleteResponsavel = (id: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir este responsável?')) {&#10;      setResponsaveis(responsaveis.filter(responsavel =&gt; responsavel.idResponsavel !== id));&#10;    }&#10;  };&#10;&#10;  const handleSaveResponsavel = (responsavel: Responsavel) =&gt; {&#10;    if (selectedResponsavel) {&#10;      // Update existing responsavel&#10;      setResponsaveis(responsaveis.map(r =&gt; r.idResponsavel === responsavel.idResponsavel ? responsavel : r));&#10;    } else {&#10;      // Add new responsavel&#10;      setResponsaveis([...responsaveis, responsavel]);&#10;    }&#10;    setShowResponsavelModal(false);&#10;    setSelectedResponsavel(null);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Responsáveis&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateResponsavel} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Novo Responsável&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome, email ou telefone...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            variant=&quot;secondary&quot;&#10;            className=&quot;h-10 px-4&quot;&#10;            onClick={() =&gt; setShowFilterModal(true)}&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsNome')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsEmail')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Email&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmTelefone')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Telefone&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredResponsaveis.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={4} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhum responsável encontrado&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredResponsaveis.map((responsavel) =&gt; (&#10;                &lt;TableRow key={responsavel.idResponsavel} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;{responsavel.dsNome}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{responsavel.dsEmail}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{responsavel.nmTelefone}&lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleEditResponsavel(responsavel)}&#10;                      &gt;&#10;                        &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;Button &#10;                        variant=&quot;ghost&quot; &#10;                        size=&quot;icon&quot; &#10;                        onClick={() =&gt; handleDeleteResponsavel(responsavel.idResponsavel)}&#10;                        className=&quot;text-red-500 hover:text-red-700&quot;&#10;                      &gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Responsavel Modal */}&#10;      {showResponsavelModal &amp;&amp; (&#10;        &lt;ResponsavelModal&#10;          responsavel={selectedResponsavel}&#10;          onClose={() =&gt; {&#10;            setShowResponsavelModal(false);&#10;            setSelectedResponsavel(null);&#10;          }}&#10;          onSave={handleSaveResponsavel}&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Filter Modal */}&#10;      {showFilterModal &amp;&amp; (&#10;        &lt;Dialog open={showFilterModal} onOpenChange={setShowFilterModal}&gt;&#10;          &lt;DialogContent&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle&gt;Filtrar Responsáveis&lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;            &lt;div className=&quot;grid gap-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;nome&quot;&gt;Nome&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;nome&quot;&#10;                  value={filters.nome}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, nome: e.target.value })}&#10;                  placeholder=&quot;Filtrar por nome&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;email&quot;&gt;Email&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;email&quot;&#10;                  value={filters.email}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, email: e.target.value })}&#10;                  placeholder=&quot;Filtrar por email&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;telefone&quot;&gt;Telefone&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;telefone&quot;&#10;                  value={filters.telefone}&#10;                  onChange={(e) =&gt; setFilters({ ...filters, telefone: e.target.value })}&#10;                  placeholder=&quot;Filtrar por telefone&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;perfil&quot;&gt;Perfil&lt;/Label&gt;&#10;                &lt;Select&#10;                  value={filters.perfil}&#10;                  onValueChange={(value) =&gt; setFilters({ ...filters, perfil: value })}&#10;                &gt;&#10;                  &lt;SelectTrigger&gt;&#10;                    &lt;SelectValue placeholder=&quot;Selecione um perfil&quot; /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;admin&quot;&gt;Admin&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;user&quot;&gt;User&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;manager&quot;&gt;Manager&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/DialogContent&gt;&#10;          &lt;DialogFooter&gt;&#10;            &lt;Button&#10;              variant=&quot;secondary&quot;&#10;              onClick={() =&gt; {&#10;                setShowFilterModal(false);&#10;                handleClearFilters();&#10;              }}&#10;              className=&quot;mr-2&quot;&#10;            &gt;&#10;              &lt;X className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Limpar Filtros&#10;            &lt;/Button&gt;&#10;            &lt;Button onClick={handleApplyFilters}&gt;&#10;              Aplicar Filtros&#10;            &lt;/Button&gt;&#10;          &lt;/DialogFooter&gt;&#10;        &lt;/Dialog&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/temas/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/temas/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState } from 'react'&#10;import { Button } from '@/components/ui/button'&#10;import { Input } from '@/components/ui/input'&#10;import { Badge } from '@/components/ui/badge'&#10;import { Checkbox } from '@/components/ui/checkbox'&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow,&#10;} from '@/components/ui/table'&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown,&#10;  X&#10;} from 'lucide-react'&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogFooter&#10;} from '@/components/ui/dialog'&#10;import { Label } from '@/components/ui/label'&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'&#10;import { Tema } from '@/lib/types'&#10;import { mockTemas, mockAreas } from '@/lib/mockData'&#10;import { TemaModal } from '@/components/temas/TemaModal'&#10;&#10;export default function TemasPage() {&#10;  const [temas, setTemas] = useState&lt;Tema[]&gt;(mockTemas)&#10;  const [searchQuery, setSearchQuery] = useState('')&#10;  const [selectedTema, setSelectedTema] = useState&lt;Tema | null&gt;(null)&#10;  const [showTemaModal, setShowTemaModal] = useState(false)&#10;  const [sortField, setSortField] = useState&lt;keyof Tema | null&gt;(null)&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc')&#10;  const [showFilterModal, setShowFilterModal] = useState(false)&#10;  const [filterAreas, setFilterAreas] = useState&lt;string[]&gt;([])&#10;  const [filterTpContagem, setFilterTpContagem] = useState&lt;string | null&gt;(null)&#10;&#10;  const handleSort = (field: keyof Tema) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')&#10;    } else {&#10;      setSortField(field)&#10;      setSortDirection('asc')&#10;    }&#10;  }&#10;&#10;  const sortedTemas = [...temas].sort((a, b) =&gt; {&#10;    if (!sortField) return 0&#10;    &#10;    const aValue = a[sortField]&#10;    const bValue = b[sortField]&#10;    &#10;    if (aValue === bValue) return 0&#10;    &#10;    const direction = sortDirection === 'asc' ? 1 : -1&#10;    &#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction&#10;    }&#10;    &#10;    if (Array.isArray(aValue) &amp;&amp; Array.isArray(bValue)) {&#10;      return (aValue.length - bValue.length) * direction&#10;    }&#10;    &#10;    if (aValue &lt; bValue) return -1 * direction&#10;    return 1 * direction&#10;  })&#10;&#10;  const getAreasForTema = (idAreas: string[]) =&gt; {&#10;    return mockAreas.filter(area =&gt; idAreas.includes(area.idArea))&#10;  }&#10;&#10;  const filteredTemas = sortedTemas.filter(tema =&gt;&#10;    tema.nmTema.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    tema.dsTema.toLowerCase().includes(searchQuery.toLowerCase())&#10;  ).filter(tema =&gt; {&#10;    const areas = getAreasForTema(tema.idAreas)&#10;    const areaMatch = filterAreas.length === 0 || areas.some(area =&gt; filterAreas.includes(area.idArea))&#10;    const tpContagemMatch = !filterTpContagem || tema.tpContagem === filterTpContagem&#10;    return areaMatch &amp;&amp; tpContagemMatch&#10;  })&#10;&#10;&#10;  const handleCreateTema = () =&gt; {&#10;    setSelectedTema(null)&#10;    setShowTemaModal(true)&#10;  }&#10;&#10;  const handleEditTema = (tema: Tema) =&gt; {&#10;    setSelectedTema(tema)&#10;    setShowTemaModal(true)&#10;  }&#10;&#10;  const handleDeleteTema = (temaId: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir este tema?')) {&#10;      setTemas(prev =&gt; prev.filter(tema =&gt; tema.idTema !== temaId))&#10;    }&#10;  }&#10;&#10;  const handleSaveTema = (tema: Tema) =&gt; {&#10;    if (selectedTema) {&#10;      // Update existing tema&#10;      setTemas(prev =&gt; prev.map(t =&gt; t.idTema === tema.idTema ? tema : t))&#10;    } else {&#10;      // Add new tema&#10;      setTemas(prev =&gt; [...prev, tema])&#10;    }&#10;    setShowTemaModal(false)&#10;    setSelectedTema(null)&#10;  }&#10;&#10;  const handleFilterSubmit = () =&gt; {&#10;    setShowFilterModal(false)&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Temas&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateTema} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Novo Tema&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome ou descrição...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            variant=&quot;secondary&quot;&#10;            className=&quot;h-10 px-4&quot;&#10;            onClick={() =&gt; setShowFilterModal(true)}&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Descrição&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('idAreas')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Áreas Relacionadas&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nrDiasPrazo')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Prazo (dias)&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('tpContagem')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Tipo de Contagem&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dtCadastro')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Data de Cadastro&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredTemas.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={7} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhum tema encontrado&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredTemas.map((tema) =&gt; {&#10;                const areas = getAreasForTema(tema.idAreas)&#10;                return (&#10;                  &lt;TableRow key={tema.idTema} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                    &lt;TableCell className=&quot;font-medium&quot;&gt;{tema.nmTema}&lt;/TableCell&gt;&#10;                    &lt;TableCell className=&quot;max-w-xs&quot;&gt;&#10;                      &lt;div className=&quot;truncate&quot; title={tema.dsTema}&gt;&#10;                        {tema.dsTema}&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-1 max-w-sm&quot;&gt;&#10;                        {areas.length === 0 ? (&#10;                          &lt;span className=&quot;text-gray-400 text-sm&quot;&gt;Nenhuma área&lt;/span&gt;&#10;                        ) : (&#10;                          areas.map((area) =&gt; (&#10;                            &lt;Badge key={area.idArea} variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#10;                              {area.nmArea}&#10;                            &lt;/Badge&gt;&#10;                          ))&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{tema.nrDiasPrazo}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;&#10;                      &lt;Badge variant={tema.tpContagem === 'UTEIS' ? 'default' : 'secondary'}&gt;&#10;                        {tema.tpContagem === 'UTEIS' ? 'Úteis' : 'Corridos'}&#10;                      &lt;/Badge&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{new Date(tema.dtCadastro).toLocaleDateString('pt-BR')}&lt;/TableCell&gt;&#10;                    &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                        &lt;Button &#10;                          variant=&quot;ghost&quot; &#10;                          size=&quot;icon&quot; &#10;                          onClick={() =&gt; handleEditTema(tema)}&#10;                        &gt;&#10;                          &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;Button &#10;                          variant=&quot;ghost&quot; &#10;                          size=&quot;icon&quot; &#10;                          onClick={() =&gt; handleDeleteTema(tema.idTema)}&#10;                          className=&quot;text-red-500 hover:text-red-700&quot;&#10;                        &gt;&#10;                          &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                  &lt;/TableRow&gt;&#10;                )&#10;              })&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Tema Modal */}&#10;      {showTemaModal &amp;&amp; (&#10;        &lt;TemaModal&#10;          isOpen={showTemaModal}&#10;          onClose={() =&gt; {&#10;            setShowTemaModal(false)&#10;            setSelectedTema(null)&#10;          }}&#10;          onSave={handleSaveTema}&#10;          tema={selectedTema}&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Filter Modal */}&#10;      {showFilterModal &amp;&amp; (&#10;        &lt;Dialog open={showFilterModal} onOpenChange={setShowFilterModal}&gt;&#10;          &lt;DialogContent className=&quot;max-w-sm p-6&quot;&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle className=&quot;text-lg font-bold&quot;&gt;&#10;                Filtrar Temas&#10;              &lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;Label htmlFor=&quot;areas&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Áreas Relacionadas&#10;              &lt;/Label&gt;&#10;              &lt;div className=&quot;mt-2&quot;&gt;&#10;                {mockAreas.map(area =&gt; (&#10;                  &lt;div key={area.idArea} className=&quot;flex items-center&quot;&gt;&#10;                    &lt;Checkbox&#10;                      id={`area-${area.idArea}`}&#10;                      checked={filterAreas.includes(area.idArea)}&#10;                      onCheckedChange={(checked) =&gt; {&#10;                        if (checked) {&#10;                          setFilterAreas(prev =&gt; [...prev, area.idArea])&#10;                        } else {&#10;                          setFilterAreas(prev =&gt; prev.filter(id =&gt; id !== area.idArea))&#10;                        }&#10;                      }}&#10;                      className=&quot;h-4 w-4 text-blue-600 border-gray-300 rounded&quot;&#10;                    /&gt;&#10;                    &lt;Label htmlFor={`area-${area.idArea}`} className=&quot;ml-2 text-sm cursor-pointer&quot;&gt;&#10;                      {area.nmArea}&#10;                    &lt;/Label&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;Label htmlFor=&quot;tpContagem&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Tipo de Contagem&#10;              &lt;/Label&gt;&#10;              &lt;Select&#10;                id=&quot;tpContagem&quot;&#10;                value={filterTpContagem?.toString()}&#10;                onValueChange={setFilterTpContagem}&#10;                className=&quot;mt-2&quot;&#10;              &gt;&#10;                &lt;SelectTrigger&gt;&#10;                  &lt;SelectValue placeholder=&quot;Selecione o tipo de contagem&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;UTEIS&quot;&gt;Úteis&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;CORRIDOS&quot;&gt;Corridos&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;DialogFooter&gt;&#10;              &lt;Button&#10;                onClick={handleFilterSubmit}&#10;                className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;              &gt;&#10;                Aplicar Filtros&#10;              &lt;/Button&gt;&#10;            &lt;/DialogFooter&gt;&#10;          &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  )&#10;}" />
              <option name="updatedContent" value="'use client'&#10;&#10;import { useState } from 'react'&#10;import { Button } from '@/components/ui/button'&#10;import { Input } from '@/components/ui/input'&#10;import { Badge } from '@/components/ui/badge'&#10;import { Checkbox } from '@/components/ui/checkbox'&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow,&#10;} from '@/components/ui/table'&#10;import { &#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown,&#10;  X&#10;} from 'lucide-react'&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogFooter&#10;} from '@/components/ui/dialog'&#10;import { Label } from '@/components/ui/label'&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'&#10;import { Tema } from '@/lib/types'&#10;import { mockTemas, mockAreas } from '@/lib/mockData'&#10;import { TemaModal } from '@/components/temas/TemaModal'&#10;&#10;export default function TemasPage() {&#10;  const [temas, setTemas] = useState&lt;Tema[]&gt;(mockTemas)&#10;  const [searchQuery, setSearchQuery] = useState('')&#10;  const [selectedTema, setSelectedTema] = useState&lt;Tema | null&gt;(null)&#10;  const [showTemaModal, setShowTemaModal] = useState(false)&#10;  const [sortField, setSortField] = useState&lt;keyof Tema | null&gt;(null)&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc')&#10;  const [showFilterModal, setShowFilterModal] = useState(false)&#10;  const [filterAreas, setFilterAreas] = useState&lt;string[]&gt;([])&#10;  const [filterTpContagem, setFilterTpContagem] = useState&lt;string | null&gt;(null)&#10;&#10;  const handleSort = (field: keyof Tema) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')&#10;    } else {&#10;      setSortField(field)&#10;      setSortDirection('asc')&#10;    }&#10;  }&#10;&#10;  const sortedTemas = [...temas].sort((a, b) =&gt; {&#10;    if (!sortField) return 0&#10;    &#10;    const aValue = a[sortField]&#10;    const bValue = b[sortField]&#10;    &#10;    if (aValue === bValue) return 0&#10;    &#10;    const direction = sortDirection === 'asc' ? 1 : -1&#10;    &#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction&#10;    }&#10;    &#10;    if (Array.isArray(aValue) &amp;&amp; Array.isArray(bValue)) {&#10;      return (aValue.length - bValue.length) * direction&#10;    }&#10;    &#10;    if (aValue &lt; bValue) return -1 * direction&#10;    return 1 * direction&#10;  })&#10;&#10;  const getAreasForTema = (idAreas: string[]) =&gt; {&#10;    return mockAreas.filter(area =&gt; idAreas.includes(area.idArea))&#10;  }&#10;&#10;  const filteredTemas = sortedTemas.filter(tema =&gt;&#10;    tema.nmTema.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    tema.dsTema.toLowerCase().includes(searchQuery.toLowerCase())&#10;  ).filter(tema =&gt; {&#10;    const areas = getAreasForTema(tema.idAreas)&#10;    const areaMatch = filterAreas.length === 0 || areas.some(area =&gt; filterAreas.includes(area.idArea))&#10;    const tpContagemMatch = !filterTpContagem || tema.tpContagem === filterTpContagem&#10;    return areaMatch &amp;&amp; tpContagemMatch&#10;  })&#10;&#10;&#10;  const handleCreateTema = () =&gt; {&#10;    setSelectedTema(null)&#10;    setShowTemaModal(true)&#10;  }&#10;&#10;  const handleEditTema = (tema: Tema) =&gt; {&#10;    setSelectedTema(tema)&#10;    setShowTemaModal(true)&#10;  }&#10;&#10;  const handleDeleteTema = (temaId: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir este tema?')) {&#10;      setTemas(prev =&gt; prev.filter(tema =&gt; tema.idTema !== temaId))&#10;    }&#10;  }&#10;&#10;  const handleSaveTema = (tema: Tema) =&gt; {&#10;    if (selectedTema) {&#10;      // Update existing tema&#10;      setTemas(prev =&gt; prev.map(t =&gt; t.idTema === tema.idTema ? tema : t))&#10;    } else {&#10;      // Add new tema&#10;      setTemas(prev =&gt; [...prev, tema])&#10;    }&#10;    setShowTemaModal(false)&#10;    setSelectedTema(null)&#10;  }&#10;&#10;  const handleFilterSubmit = () =&gt; {&#10;    setShowFilterModal(false)&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Temas&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateTema} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Novo Tema&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome ou descrição...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            variant=&quot;secondary&quot;&#10;            className=&quot;h-10 px-4&quot;&#10;            onClick={() =&gt; setShowFilterModal(true)}&#10;          &gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nmTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Descrição&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('idAreas')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Áreas Relacionadas&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nrDiasPrazo')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Prazo (dias)&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('tpContagem')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Tipo de Contagem&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dtCadastro')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Data de Cadastro&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredTemas.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={7} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhum tema encontrado&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredTemas.map((tema) =&gt; {&#10;                const areas = getAreasForTema(tema.idAreas)&#10;                return (&#10;                  &lt;TableRow key={tema.idTema} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                    &lt;TableCell className=&quot;font-medium&quot;&gt;{tema.nmTema}&lt;/TableCell&gt;&#10;                    &lt;TableCell className=&quot;max-w-xs&quot;&gt;&#10;                      &lt;div className=&quot;truncate&quot; title={tema.dsTema}&gt;&#10;                        {tema.dsTema}&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-1 max-w-sm&quot;&gt;&#10;                        {areas.length === 0 ? (&#10;                          &lt;span className=&quot;text-gray-400 text-sm&quot;&gt;Nenhuma área&lt;/span&gt;&#10;                        ) : (&#10;                          areas.map((area) =&gt; (&#10;                            &lt;Badge key={area.idArea} variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#10;                              {area.nmArea}&#10;                            &lt;/Badge&gt;&#10;                          ))&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{tema.nrDiasPrazo}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;&#10;                      &lt;Badge variant={tema.tpContagem === 'UTEIS' ? 'default' : 'secondary'}&gt;&#10;                        {tema.tpContagem === 'UTEIS' ? 'Úteis' : 'Corridos'}&#10;                      &lt;/Badge&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{new Date(tema.dtCadastro).toLocaleDateString('pt-BR')}&lt;/TableCell&gt;&#10;                    &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                        &lt;Button &#10;                          variant=&quot;ghost&quot; &#10;                          size=&quot;icon&quot; &#10;                          onClick={() =&gt; handleEditTema(tema)}&#10;                        &gt;&#10;                          &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;Button &#10;                          variant=&quot;ghost&quot; &#10;                          size=&quot;icon&quot; &#10;                          onClick={() =&gt; handleDeleteTema(tema.idTema)}&#10;                          className=&quot;text-red-500 hover:text-red-700&quot;&#10;                        &gt;&#10;                          &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                  &lt;/TableRow&gt;&#10;                )&#10;              })&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Tema Modal */}&#10;      {showTemaModal &amp;&amp; (&#10;        &lt;TemaModal&#10;          isOpen={showTemaModal}&#10;          onClose={() =&gt; {&#10;            setShowTemaModal(false)&#10;            setSelectedTema(null)&#10;          }}&#10;          onSave={handleSaveTema}&#10;          tema={selectedTema}&#10;        /&gt;&#10;      )}&#10;&#10;      {/* Filter Modal */}&#10;      {showFilterModal &amp;&amp; (&#10;        &lt;Dialog open={showFilterModal} onOpenChange={setShowFilterModal}&gt;&#10;          &lt;DialogContent className=&quot;max-w-sm p-6&quot;&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle className=&quot;text-lg font-bold&quot;&gt;&#10;                Filtrar Temas&#10;              &lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;Label htmlFor=&quot;areas&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Áreas Relacionadas&#10;              &lt;/Label&gt;&#10;              &lt;div className=&quot;mt-2&quot;&gt;&#10;                {mockAreas.map(area =&gt; (&#10;                  &lt;div key={area.idArea} className=&quot;flex items-center&quot;&gt;&#10;                    &lt;Checkbox&#10;                      id={`area-${area.idArea}`}&#10;                      checked={filterAreas.includes(area.idArea)}&#10;                      onCheckedChange={(checked) =&gt; {&#10;                        if (checked) {&#10;                          setFilterAreas(prev =&gt; [...prev, area.idArea])&#10;                        } else {&#10;                          setFilterAreas(prev =&gt; prev.filter(id =&gt; id !== area.idArea))&#10;                        }&#10;                      }}&#10;                      className=&quot;h-4 w-4 text-blue-600 border-gray-300 rounded&quot;&#10;                    /&gt;&#10;                    &lt;Label htmlFor={`area-${area.idArea}`} className=&quot;ml-2 text-sm cursor-pointer&quot;&gt;&#10;                      {area.nmArea}&#10;                    &lt;/Label&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;Label htmlFor=&quot;tpContagem&quot; className=&quot;block text-sm font-medium text-gray-700&quot;&gt;&#10;                Tipo de Contagem&#10;              &lt;/Label&gt;&#10;              &lt;Select&#10;                value={filterTpContagem?.toString()}&#10;                onValueChange={setFilterTpContagem}&#10;              &gt;&#10;                &lt;SelectTrigger className=&quot;mt-2&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Selecione o tipo de contagem&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;UTEIS&quot;&gt;Úteis&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;CORRIDOS&quot;&gt;Corridos&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;DialogFooter&gt;&#10;              &lt;Button&#10;                onClick={handleFilterSubmit}&#10;                className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;              &gt;&#10;                Aplicar Filtros&#10;              &lt;/Button&gt;&#10;            &lt;/DialogFooter&gt;&#10;          &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/dashboard/Dashboard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/dashboard/Dashboard.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState, useEffect } from 'react';&#10;import { &#10;  BarChart, &#10;  Calendar, &#10;  Clock, &#10;  FileText, &#10;  Mail, &#10;  MoreHorizontal, &#10;  RefreshCw, &#10;  Users, &#10;  CheckCircle,&#10;  AlertCircle,&#10;  Clock3,&#10;  XCircle&#10;} from 'lucide-react';&#10;import { Button } from '@/components/ui/button';&#10;import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';&#10;import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';&#10;import { Badge } from '@/components/ui/badge';&#10;&#10;export default function Dashboard() {&#10;  const [lastUpdated, setLastUpdated] = useState&lt;Date | null&gt;(null);&#10;  &#10;  // Initialize lastUpdated on client side only&#10;  useEffect(() =&gt; {&#10;    setLastUpdated(new Date());&#10;  }, []);&#10;  const [calendarView, setCalendarView] = useState&lt;'month' | 'week' | 'year'&gt;('month');&#10;&#10;  const refreshData = () =&gt; {&#10;    setLastUpdated(new Date());&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;p-6 space-y-6 bg-gray-50&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900 flex items-center&quot;&gt;&#10;            &lt;BarChart className=&quot;h-8 w-8 mr-3&quot; /&gt;&#10;            Dashboard&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-500 mt-1&quot;&gt;&#10;            Visão geral do sistema e métricas importantes&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;          &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;            Última atualização: {lastUpdated ? lastUpdated.toLocaleTimeString() : '--:--:--'}&#10;          &lt;/span&gt;&#10;          &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot; onClick={refreshData}&gt;&#10;            &lt;RefreshCw className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Atualizar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Main Content */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;        {/* Tasks Overview */}&#10;        &lt;Card className=&quot;flex flex-col lg:col-span-2&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;CardTitle&gt;Visão Geral de Obrigações&lt;/CardTitle&gt;&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;            &lt;CardDescription&gt;Status de todas as obrigações contratuais&lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent&gt;&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;CheckCircle className=&quot;h-4 w-4 text-green-500 mr-2&quot; /&gt;&#10;                    &lt;span&gt;Concluídas&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;8 (44%)&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;h-2 bg-gray-100 w-full rounded-full overflow-hidden&quot;&gt;&#10;                  &lt;div className=&quot;h-full bg-green-500&quot; style={{ width: &quot;44%&quot; }}&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;Clock3 className=&quot;h-4 w-4 text-blue-500 mr-2&quot; /&gt;&#10;                    &lt;span&gt;Em Andamento&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;5 (28%)&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;h-2 bg-gray-100 w-full rounded-full overflow-hidden&quot;&gt;&#10;                  &lt;div className=&quot;h-full bg-blue-500&quot; style={{ width: &quot;28%&quot; }}&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;AlertCircle className=&quot;h-4 w-4 text-yellow-500 mr-2&quot; /&gt;&#10;                    &lt;span&gt;Pendentes&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;3 (17%)&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;h-2 bg-gray-100 w-full rounded-full overflow-hidden&quot;&gt;&#10;                  &lt;div className=&quot;h-full bg-yellow-500&quot; style={{ width: &quot;17%&quot; }}&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    &lt;XCircle className=&quot;h-4 w-4 text-red-500 mr-2&quot; /&gt;&#10;                    &lt;span&gt;Atrasadas&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;2 (11%)&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;h-2 bg-gray-100 w-full rounded-full overflow-hidden&quot;&gt;&#10;                  &lt;div className=&quot;h-full bg-red-500&quot; style={{ width: &quot;11%&quot; }}&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;mt-6&quot;&gt;&#10;              &lt;h4 className=&quot;text-sm font-medium mb-3&quot;&gt;Obrigações Recentes&lt;/h4&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                {[&#10;                  { id: 1, title: &quot;4.2.1 - Contrato&quot;, status: &quot;concluido&quot;, date: &quot;Hoje, 14:30&quot;, assignee: &quot;Jurídico&quot; },&#10;                  { id: 2, title: &quot;5.2 - Contrato&quot;, status: &quot;pendente&quot;, date: &quot;Ontem, 10:15&quot;, assignee: &quot;Operação&quot; },&#10;                  { id: 3, title: &quot;Ofício SEI n. 714/2025&quot;, status: &quot;em_andamento&quot;, date: &quot;17/07, 09:45&quot;, assignee: &quot;Meio Ambiente&quot; },&#10;                ].map((task) =&gt; (&#10;                  &lt;div key={task.id} className=&quot;flex items-center justify-between p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;div className={`w-2 h-2 rounded-full ${&#10;                        task.status === 'concluido' ? 'bg-green-500' :&#10;                        task.status === 'em_andamento' ? 'bg-blue-500' :&#10;                        task.status === 'pendente' ? 'bg-yellow-500' : 'bg-red-500'&#10;                      }`} /&gt;&#10;                      &lt;div&gt;&#10;                        &lt;div className=&quot;font-medium text-sm&quot;&gt;{task.title}&lt;/div&gt;&#10;                        &lt;div className=&quot;text-xs text-gray-500&quot;&gt;{task.assignee} • {task.date}&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; className=&quot;text-xs&quot;&gt;Ver&lt;/Button&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;          &lt;CardFooter className=&quot;border-t pt-4 mt-auto&quot;&gt;&#10;            &lt;Button variant=&quot;outline&quot; className=&quot;w-full&quot;&gt;Ver Todas as Obrigações&lt;/Button&gt;&#10;          &lt;/CardFooter&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Recent Activity */}&#10;        &lt;Card className=&quot;flex flex-col&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;CardTitle&gt;Atividade Recente&lt;/CardTitle&gt;&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;            &lt;CardDescription&gt;Últimas ações no sistema&lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent&gt;&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              {[&#10;                { &#10;                  id: 1, &#10;                  user: { name: &quot;Maria Silva&quot;, avatar: &quot;MS&quot; }, &#10;                  action: &quot;enviou um novo email&quot;, &#10;                  time: &quot;há 10 minutos&quot;,&#10;                  detail: &quot;Relatório de Compliance Q2&quot;&#10;                },&#10;                { &#10;                  id: 2, &#10;                  user: { name: &quot;João Santos&quot;, avatar: &quot;JS&quot; }, &#10;                  action: &quot;concluiu uma obrigação&quot;, &#10;                  time: &quot;há 45 minutos&quot;,&#10;                  detail: &quot;4.2.1 - Contrato&quot;&#10;                },&#10;                { &#10;                  id: 3, &#10;                  user: { name: &quot;Ana Oliveira&quot;, avatar: &quot;AO&quot; }, &#10;                  action: &quot;adicionou um comentário&quot;, &#10;                  time: &quot;há 2 horas&quot;,&#10;                  detail: &quot;Ofício SEI n. 714/2025&quot;&#10;                },&#10;                { &#10;                  id: 4, &#10;                  user: { name: &quot;Carlos Mendes&quot;, avatar: &quot;CM&quot; }, &#10;                  action: &quot;criou uma nova obrigação&quot;, &#10;                  time: &quot;há 3 horas&quot;,&#10;                  detail: &quot;5.3 - Revisão Contratual&quot;&#10;                },&#10;                { &#10;                  id: 5, &#10;                  user: { name: &quot;Lucia Ferreira&quot;, avatar: &quot;LF&quot; }, &#10;                  action: &quot;atualizou um documento&quot;, &#10;                  time: &quot;há 5 horas&quot;,&#10;                  detail: &quot;Política de Compliance v2.1&quot;&#10;                },&#10;              ].map((activity) =&gt; (&#10;                &lt;div key={activity.id} className=&quot;flex items-start space-x-3&quot;&gt;&#10;                  &lt;Avatar className=&quot;h-8 w-8&quot;&gt;&#10;                    &lt;AvatarImage src={`/placeholder-avatar-${activity.id}.jpg`} alt={activity.user.name} /&gt;&#10;                    &lt;AvatarFallback&gt;{activity.user.avatar}&lt;/AvatarFallback&gt;&#10;                  &lt;/Avatar&gt;&#10;                  &lt;div&gt;&#10;                    &lt;div className=&quot;text-sm&quot;&gt;&#10;                      &lt;span className=&quot;font-medium&quot;&gt;{activity.user.name}&lt;/span&gt;&#10;                      {&quot; &quot;}&#10;                      &lt;span className=&quot;text-gray-600&quot;&gt;{activity.action}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-xs text-gray-500 mt-1&quot;&gt;{activity.detail}&lt;/div&gt;&#10;                    &lt;div className=&quot;text-xs text-gray-400 mt-1&quot;&gt;{activity.time}&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;          &lt;CardFooter className=&quot;border-t pt-4 mt-auto&quot;&gt;&#10;            &lt;Button variant=&quot;outline&quot; className=&quot;w-full&quot;&gt;Ver Todo o Histórico&lt;/Button&gt;&#10;          &lt;/CardFooter&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Calendar and Upcoming Events */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;        &lt;Card className=&quot;flex flex-col&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;CardTitle&gt;Próximos Prazos&lt;/CardTitle&gt;&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;            &lt;CardDescription&gt;Obrigações com vencimento próximo&lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent&gt;&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;              {[&#10;                { id: 1, title: &quot;5.2 - Contrato&quot;, dueDate: &quot;Hoje, 18:00&quot;, status: &quot;pendente&quot; },&#10;                { id: 2, title: &quot;Ofício SEI n. 714/2025&quot;, dueDate: &quot;Amanhã, 14:00&quot;, status: &quot;em_andamento&quot; },&#10;                { id: 3, title: &quot;3.1.2 - Documentação&quot;, dueDate: &quot;19/07, 10:00&quot;, status: &quot;pendente&quot; },&#10;                { id: 4, title: &quot;Relatório Trimestral&quot;, dueDate: &quot;25/07, 18:00&quot;, status: &quot;pendente&quot; },&#10;              ].map((deadline) =&gt; (&#10;                &lt;div key={deadline.id} className=&quot;flex items-center space-x-3 p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;                  &lt;div className={`w-2 h-2 rounded-full ${&#10;                    deadline.status === 'concluido' ? 'bg-green-500' :&#10;                      deadline.status === 'em_andamento' ? 'bg-blue-500' :&#10;                        deadline.status === 'pendente' ? 'bg-yellow-500' : 'bg-red-500'&#10;                  }`} /&gt;&#10;                  &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                    &lt;div className=&quot;font-medium text-sm truncate&quot;&gt;{deadline.title}&lt;/div&gt;&#10;                    &lt;div className=&quot;flex items-center text-xs text-gray-500&quot;&gt;&#10;                      &lt;Clock className=&quot;h-3 w-3 mr-1&quot; /&gt;&#10;                      {deadline.dueDate}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;          &lt;CardFooter className=&quot;border-t pt-4 mt-auto&quot;&gt;&#10;            &lt;Button variant=&quot;outline&quot; className=&quot;w-full&quot;&gt;Ver Todos os Prazos&lt;/Button&gt;&#10;          &lt;/CardFooter&gt;&#10;        &lt;/Card&gt;&#10;&#10;        &lt;Card className=&quot;flex flex-col lg:col-span-2&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;CardTitle&gt;Calendário de Obrigações&lt;/CardTitle&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;Button &#10;                  variant=&quot;outline&quot; &#10;                  size=&quot;sm&quot;&#10;                  onClick={() =&gt; setCalendarView('month')}&#10;                  className={calendarView === 'month' ? &quot;bg-blue-50 text-blue-700 border-blue-200&quot; : &quot;&quot;}&#10;                &gt;&#10;                  Mês&#10;                &lt;/Button&gt;&#10;                &lt;Button &#10;                  variant=&quot;outline&quot; &#10;                  size=&quot;sm&quot;&#10;                  onClick={() =&gt; setCalendarView('week')}&#10;                  className={calendarView === 'week' ? &quot;bg-blue-50 text-blue-700 border-blue-200&quot; : &quot;&quot;}&#10;                &gt;&#10;                  Semana&#10;                &lt;/Button&gt;&#10;                &lt;Button &#10;                  variant=&quot;outline&quot; &#10;                  size=&quot;sm&quot;&#10;                  onClick={() =&gt; setCalendarView('year')}&#10;                  className={calendarView === 'year' ? &quot;bg-blue-50 text-blue-700 border-blue-200&quot; : &quot;&quot;}&#10;                &gt;&#10;                  Ano&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;CardDescription&gt;Visualize suas obrigações no calendário&lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;h-full&quot;&gt;&#10;            &lt;div className=&quot;bg-gray-50 rounded-lg p-4 min-h-full overflow-y-auto&quot;&gt;&#10;              {calendarView === 'month' &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-7 gap-1 text-center mb-2&quot;&gt;&#10;                    {['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'].map((day) =&gt; (&#10;                      &lt;div key={day} className=&quot;text-xs font-medium text-gray-500&quot;&gt;{day}&lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;grid grid-cols-7 gap-1&quot;&gt;&#10;                    {Array.from({ length: 35 }).map((_, index) =&gt; {&#10;                      const day = index - 5; // Start from previous month&#10;                      const isCurrentMonth = day &gt; 0 &amp;&amp; day &lt;= 31;&#10;                      const isToday = day === 17; // Assuming today is the 17th&#10;                      &#10;                      // Sample obligations data&#10;                      const obligations = [&#10;                        { day: 17, title: &quot;5.2 - Contrato&quot;, status: &quot;pendente&quot; },&#10;                        { day: 18, title: &quot;Ofício SEI n. 714/2025&quot;, status: &quot;em_andamento&quot; },&#10;                        { day: 19, title: &quot;3.1.2 - Documentação&quot;, status: &quot;pendente&quot; },&#10;                        { day: 25, title: &quot;Relatório Trimestral&quot;, status: &quot;pendente&quot; },&#10;                        { day: 10, title: &quot;4.2.1 - Contrato&quot;, status: &quot;concluido&quot; },&#10;                        { day: 15, title: &quot;Reunião Mensal&quot;, status: &quot;em_andamento&quot; },&#10;                      ];&#10;                      &#10;                      const dayObligations = obligations.filter(o =&gt; o.day === day);&#10;                      &#10;                      return (&#10;                        &lt;div &#10;                          key={index} &#10;                          className={`p-1 rounded-lg border text-xs h-24 flex flex-col ${&#10;                            isCurrentMonth &#10;                              ? isToday &#10;                                ? 'bg-blue-50 border-blue-200' &#10;                                : 'bg-white border-gray-200' &#10;                              : 'bg-gray-100 border-gray-200 text-gray-400'&#10;                          }`}&#10;                        &gt;&#10;                          &lt;div className=&quot;font-medium mb-1&quot;&gt;{isCurrentMonth ? day : day &lt;= 0 ? day + 30 : day - 31}&lt;/div&gt;&#10;                          &lt;div className=&quot;overflow-y-auto flex-1&quot;&gt;&#10;                            {dayObligations.map((obligation, i) =&gt; (&#10;                              &lt;div &#10;                                key={i} &#10;                                className={`mb-1 p-1 rounded text-xs truncate ${&#10;                                  obligation.status === 'concluido' ? 'bg-green-100 text-green-800' :&#10;                                  obligation.status === 'em_andamento' ? 'bg-blue-100 text-blue-800' :&#10;                                  obligation.status === 'pendente' ? 'bg-yellow-100 text-yellow-800' : &#10;                                  'bg-red-100 text-red-800'&#10;                                }`}&#10;                              &gt;&#10;                                {obligation.title}&#10;                              &lt;/div&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })}&#10;                  &lt;/div&gt;&#10;                &lt;/&gt;&#10;              )}&#10;&#10;              {calendarView === 'week' &amp;&amp; (&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-7 gap-1 text-center mb-2&quot;&gt;&#10;                    {['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'].map((day, index) =&gt; {&#10;                      const date = 14 + index; // Starting from Sunday, July 14&#10;                      const isToday = date === 17; // Assuming today is the 17th&#10;                      return (&#10;                        &lt;div &#10;                          key={day} &#10;                          className={`text-sm font-medium p-2 rounded-t-lg ${&#10;                            isToday ? 'bg-blue-50 text-blue-700' : 'text-gray-700'&#10;                          }`}&#10;                        &gt;&#10;                          {day}&#10;                          &lt;div className=&quot;text-xs mt-1&quot;&gt;{date}/07&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })}&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;grid grid-cols-7 gap-1&quot;&gt;&#10;                    {['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'].map((day, index) =&gt; {&#10;                      const date = 14 + index; // Starting from Sunday, July 14&#10;                      &#10;                      // Sample obligations data&#10;                      const obligations = [&#10;                        { day: 17, title: &quot;5.2 - Contrato&quot;, status: &quot;pendente&quot;, time: &quot;10:00&quot; },&#10;                        { day: 18, title: &quot;Ofício SEI n. 714/2025&quot;, status: &quot;em_andamento&quot;, time: &quot;14:30&quot; },&#10;                        { day: 19, title: &quot;3.1.2 - Documentação&quot;, status: &quot;pendente&quot;, time: &quot;09:00&quot; },&#10;                        { day: 15, title: &quot;Reunião Mensal&quot;, status: &quot;em_andamento&quot;, time: &quot;15:00&quot; },&#10;                      ];&#10;                      &#10;                      const dayObligations = obligations.filter(o =&gt; o.day === date);&#10;                      &#10;                      return (&#10;                        &lt;div &#10;                          key={day} &#10;                          className=&quot;bg-white border border-gray-200 rounded-b-lg p-2 h-64 overflow-y-auto&quot;&#10;                        &gt;&#10;                          {dayObligations.length === 0 ? (&#10;                            &lt;div className=&quot;text-xs text-gray-400 h-full flex items-center justify-center&quot;&gt;&#10;                              Sem obrigações&#10;                            &lt;/div&gt;&#10;                          ) : (&#10;                            dayObligations.map((obligation, i) =&gt; (&#10;                              &lt;div &#10;                                key={i} &#10;                                className={`mb-2 p-2 rounded text-xs ${&#10;                                  obligation.status === 'concluido' ? 'bg-green-100 text-green-800' :&#10;                                  obligation.status === 'em_andamento' ? 'bg-blue-100 text-blue-800' :&#10;                                  obligation.status === 'pendente' ? 'bg-yellow-100 text-yellow-800' : &#10;                                  'bg-red-100 text-red-800'&#10;                                }`}&#10;                              &gt;&#10;                                &lt;div className=&quot;font-medium&quot;&gt;{obligation.time}&lt;/div&gt;&#10;                                &lt;div&gt;{obligation.title}&lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            ))&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      );&#10;                    })}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              {calendarView === 'year' &amp;&amp; (&#10;                &lt;div className=&quot;grid grid-cols-4 gap-4&quot;&gt;&#10;                  {['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', &#10;                    'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'].map((month, index) =&gt; {&#10;                    const isCurrentMonth = index === 6; // July is the current month (0-indexed)&#10;                    &#10;                    // Sample data for number of obligations per month&#10;                    const obligationCounts = [3, 5, 2, 4, 6, 3, 8, 2, 0, 0, 0, 0];&#10;                    &#10;                    return (&#10;                      &lt;div &#10;                        key={month} &#10;                        className={`p-3 rounded-lg border ${&#10;                          isCurrentMonth ? 'bg-blue-50 border-blue-200' : 'bg-white border-gray-200'&#10;                        }`}&#10;                      &gt;&#10;                        &lt;div className=&quot;font-medium text-sm mb-2&quot;&gt;{month}&lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                          &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                            {obligationCounts[index]} obrigações&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    );&#10;                  })}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import { useState, useEffect } from 'react';&#13;&#10;import { &#13;&#10;  BarChart, &#13;&#10;  Calendar, &#13;&#10;  Clock, &#13;&#10;  FileText, &#13;&#10;  Mail, &#13;&#10;  MoreHorizontal, &#13;&#10;  RefreshCw, &#13;&#10;  Users, &#13;&#10;  CheckCircle,&#13;&#10;  AlertCircle,&#13;&#10;  Clock3,&#13;&#10;  XCircle &#13;&#10;} from 'lucide-react';&#13;&#10;import { Button } from '@/components/ui/button';&#13;&#10;import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';&#13;&#10;import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';&#13;&#10;import { Badge } from '@/components/ui/badge';&#13;&#10;import { Building2, ClipboardList } from 'lucide-react';&#13;&#10;import { mockAreas, mockTemas, mockResponsaveis, mockSolicitacoes } from '@/lib/mockData';&#13;&#10;&#13;&#10;export default function Dashboard() {&#13;&#10;  const [lastUpdated, setLastUpdated] = useState&lt;Date | null&gt;(null);&#13;&#10;  &#13;&#10;  // Initialize lastUpdated on client side only&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    setLastUpdated(new Date());&#13;&#10;  }, []);&#13;&#10;  const [calendarView, setCalendarView] = useState&lt;'month' | 'week' | 'year'&gt;('month');&#13;&#10;&#13;&#10;  const refreshData = () =&gt; {&#13;&#10;    setLastUpdated(new Date());&#13;&#10;  };&#13;&#10;&#13;&#10;  const solicitacoesPorStatus = {&#13;&#10;    pendente: mockSolicitacoes.filter(s =&gt; s.status === 'pendente').length,&#13;&#10;    em_andamento: mockSolicitacoes.filter(s =&gt; s.status === 'em_andamento').length,&#13;&#10;    concluido: mockSolicitacoes.filter(s =&gt; s.status === 'concluido').length,&#13;&#10;    atrasado: mockSolicitacoes.filter(s =&gt; s.status === 'atrasado').length,&#13;&#10;  }&#13;&#10;&#13;&#10;  const getStatusIcon = (status: string) =&gt; {&#13;&#10;    switch (status) {&#13;&#10;      case 'pendente':&#13;&#10;        return &lt;Clock className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;      case 'em_andamento':&#13;&#10;        return &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;      case 'concluido':&#13;&#10;        return &lt;CheckCircle className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;      case 'atrasado':&#13;&#10;        return &lt;XCircle className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;      default:&#13;&#10;        return &lt;Clock className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  const getStatusColor = (status: string) =&gt; {&#13;&#10;    switch (status) {&#13;&#10;      case 'pendente':&#13;&#10;        return 'text-yellow-600 bg-yellow-50'&#13;&#10;      case 'em_andamento':&#13;&#10;        return 'text-blue-600 bg-blue-50'&#13;&#10;      case 'concluido':&#13;&#10;        return 'text-green-600 bg-green-50'&#13;&#10;      case 'atrasado':&#13;&#10;        return 'text-red-600 bg-red-50'&#13;&#10;      default:&#13;&#10;        return 'text-gray-600 bg-gray-50'&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  const formatStatusLabel = (status: string) =&gt; {&#13;&#10;    switch (status) {&#13;&#10;      case 'pendente':&#13;&#10;        return 'Pendente'&#13;&#10;      case 'em_andamento':&#13;&#10;        return 'Em Andamento'&#13;&#10;      case 'concluido':&#13;&#10;        return 'Concluído'&#13;&#10;      case 'atrasado':&#13;&#10;        return 'Atrasado'&#13;&#10;      default:&#13;&#10;        return status&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;p-6 space-y-6 bg-gray-50 min-h-screen&quot;&gt;&#13;&#10;      &lt;div&gt;&#13;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Dashboard&lt;/h1&gt;&#13;&#10;        &lt;p className=&quot;text-gray-600 mt-2&quot;&gt;Visão geral do sistema de gestão&lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Cards de estatísticas */}&#13;&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#13;&#10;            &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Total de Áreas&lt;/CardTitle&gt;&#13;&#10;            &lt;Building2 className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent&gt;&#13;&#10;            &lt;div className=&quot;text-2xl font-bold&quot;&gt;{mockAreas.length}&lt;/div&gt;&#13;&#10;            &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;&#13;&#10;              Departamentos cadastrados&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#13;&#10;            &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Total de Temas&lt;/CardTitle&gt;&#13;&#10;            &lt;FileText className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent&gt;&#13;&#10;            &lt;div className=&quot;text-2xl font-bold&quot;&gt;{mockTemas.length}&lt;/div&gt;&#13;&#10;            &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;&#13;&#10;              Temas configurados&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#13;&#10;            &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Responsáveis&lt;/CardTitle&gt;&#13;&#10;            &lt;Users className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent&gt;&#13;&#10;            &lt;div className=&quot;text-2xl font-bold&quot;&gt;{mockResponsaveis.length}&lt;/div&gt;&#13;&#10;            &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;&#13;&#10;              Pessoas cadastradas&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#13;&#10;            &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Solicitações&lt;/CardTitle&gt;&#13;&#10;            &lt;ClipboardList className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent&gt;&#13;&#10;            &lt;div className=&quot;text-2xl font-bold&quot;&gt;{mockSolicitacoes.length}&lt;/div&gt;&#13;&#10;            &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;&#13;&#10;              Total de solicitações&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Status das solicitações */}&#13;&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader&gt;&#13;&#10;            &lt;CardTitle&gt;Status das Solicitações&lt;/CardTitle&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent className=&quot;space-y-4&quot;&gt;&#13;&#10;            {Object.entries(solicitacoesPorStatus).map(([status, count]) =&gt; (&#13;&#10;              &lt;div key={status} className=&quot;flex items-center justify-between&quot;&gt;&#13;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;                  &lt;div className={`p-1 rounded ${getStatusColor(status)}`}&gt;&#13;&#10;                    {getStatusIcon(status)}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;span className=&quot;font-medium&quot;&gt;{formatStatusLabel(status)}&lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;Badge variant=&quot;secondary&quot;&gt;{count}&lt;/Badge&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ))}&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;&#13;&#10;        &lt;Card&gt;&#13;&#10;          &lt;CardHeader&gt;&#13;&#10;            &lt;CardTitle&gt;Solicitações Recentes&lt;/CardTitle&gt;&#13;&#10;          &lt;/CardHeader&gt;&#13;&#10;          &lt;CardContent&gt;&#13;&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#13;&#10;              {mockSolicitacoes.slice(0, 5).map((solicitacao) =&gt; (&#13;&#10;                &lt;div key={solicitacao.idSolicitacao} className=&quot;flex items-center justify-between p-3 bg-gray-50 rounded-lg&quot;&gt;&#13;&#10;                  &lt;div&gt;&#13;&#10;                    &lt;div className=&quot;font-medium text-sm&quot;&gt;{solicitacao.dsAssunto}&lt;/div&gt;&#13;&#10;                    &lt;div className=&quot;text-xs text-gray-500&quot;&gt;{solicitacao.cdIdentificacao}&lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;Badge &#13;&#10;                    variant=&quot;outline&quot; &#13;&#10;                    className={getStatusColor(solicitacao.status)}&#13;&#10;                  &gt;&#13;&#10;                    {formatStatusLabel(solicitacao.status)}&#13;&#10;                  &lt;/Badge&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/CardContent&gt;&#13;&#10;        &lt;/Card&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Resumo por área */}&#13;&#10;      &lt;Card&gt;&#13;&#10;        &lt;CardHeader&gt;&#13;&#10;          &lt;CardTitle&gt;Áreas por Tema&lt;/CardTitle&gt;&#13;&#10;        &lt;/CardHeader&gt;&#13;&#10;        &lt;CardContent&gt;&#13;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4&quot;&gt;&#13;&#10;            {mockTemas.map((tema) =&gt; (&#13;&#10;              &lt;div key={tema.idTema} className=&quot;p-4 border rounded-lg&quot;&gt;&#13;&#10;                &lt;div className=&quot;font-medium text-sm mb-2&quot;&gt;{tema.nmTema}&lt;/div&gt;&#13;&#10;                &lt;div className=&quot;text-xs text-gray-500 mb-3&quot;&gt;{tema.dsTema}&lt;/div&gt;&#13;&#10;                &lt;div className=&quot;flex flex-wrap gap-1&quot;&gt;&#13;&#10;                  {tema.idAreas.map((areaId) =&gt; {&#13;&#10;                    const area = mockAreas.find(a =&gt; a.idArea === areaId)&#13;&#10;                    return area ? (&#13;&#10;                      &lt;Badge key={areaId} variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#13;&#10;                        {area.nmArea}&#13;&#10;                      &lt;/Badge&gt;&#13;&#10;                    ) : null&#13;&#10;                  })}&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className=&quot;mt-2 text-xs text-gray-500&quot;&gt;&#13;&#10;                  Prazo: {tema.nrDiasPrazo} dias ({tema.tpContagem.toLowerCase()})&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ))}&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/CardContent&gt;&#13;&#10;      &lt;/Card&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/temas/TemasTable.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/temas/TemasTable.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { &#10;  Table, &#10;  TableBody, &#10;  TableCell, &#10;  TableHead, &#10;  TableHeader, &#10;  TableRow &#10;} from '@/components/ui/table';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Badge } from '@/components/ui/badge';&#10;import {&#10;  Plus, &#10;  Search, &#10;  Edit, &#10;  Trash2, &#10;  Filter, &#10;  ArrowUpDown,&#10;  MoreHorizontal&#10;} from 'lucide-react';&#10;import { Tema } from '@/lib/types';&#10;import {mockTemas, mockAreas, getAreaNameById} from '@/lib/mockData';&#10;import { TemaModal } from './TemaModal';&#10;import {DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger} from &quot;@/components/ui/dropdown-menu&quot;;&#10;&#10;export default function TemasTable() {&#10;  const [temas, setTemas] = useState&lt;Tema[]&gt;(mockTemas);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedTema, setSelectedTema] = useState&lt;Tema | null&gt;(null);&#10;  const [showTemaModal, setShowTemaModal] = useState(false);&#10;  const [sortField, setSortField] = useState&lt;keyof Tema | null&gt;(null);&#10;  const [sortDirection, setSortDirection] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;&#10;  const handleSort = (field: keyof Tema) =&gt; {&#10;    if (sortField === field) {&#10;      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');&#10;    } else {&#10;      setSortField(field);&#10;      setSortDirection('asc');&#10;    }&#10;  };&#10;&#10;  const sortedTemas = [...temas].sort((a, b) =&gt; {&#10;    if (!sortField) return 0;&#10;    &#10;    const aValue = a[sortField];&#10;    const bValue = b[sortField];&#10;    &#10;    if (aValue === bValue) return 0;&#10;    &#10;    const direction = sortDirection === 'asc' ? 1 : -1;&#10;    &#10;    if (typeof aValue === 'string' &amp;&amp; typeof bValue === 'string') {&#10;      return aValue.localeCompare(bValue) * direction;&#10;    }&#10;    &#10;    if (aValue &lt; bValue) return -1 * direction;&#10;    return 1 * direction;&#10;  });&#10;&#10;  const filteredTemas = sortedTemas.filter(tema =&gt; &#10;    tema.dsTema.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    tema.nmTema.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;    tema.idAreas.some(areaId =&gt; getAreaNameById(areaId).toLowerCase().includes(searchQuery.toLowerCase()))&#10;  );&#10;&#10;  const handleCreateTema = () =&gt; {&#10;    setSelectedTema(null);&#10;    setShowTemaModal(true);&#10;  };&#10;&#10;  const handleEditTema = (tema: Tema) =&gt; {&#10;    setSelectedTema(tema);&#10;    setShowTemaModal(true);&#10;  };&#10;&#10;  const handleDeleteTema = (id: string) =&gt; {&#10;    if (window.confirm('Tem certeza que deseja excluir este tema?')) {&#10;      setTemas(temas.filter(tema =&gt; tema.idTema !== id));&#10;    }&#10;  };&#10;&#10;  const handleSaveTema = (tema: Tema) =&gt; {&#10;    if (selectedTema) {&#10;      // Update existing tema&#10;      setTemas(temas.map(t =&gt; t.idTema === tema.idTema ? tema : t));&#10;    } else {&#10;      // Add new tema&#10;      setTemas([...temas, tema]);&#10;    }&#10;    setShowTemaModal(false);&#10;    setSelectedTema(null);&#10;  };&#10;&#10;  const getAreasForTema = (idAreas: string[]) =&gt; {&#10;    return mockAreas.filter(area =&gt; idAreas.includes(area.idArea));&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;h-full flex flex-col bg-gray-50&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;            Cadastro de Temas&#10;          &lt;/h1&gt;&#10;          &lt;Button &#10;            onClick={handleCreateTema} &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;          &gt;&#10;            &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Novo Tema&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar por nome, número ou área...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button variant=&quot;secondary&quot; className=&quot;h-10 px-4&quot;&gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Table */}&#10;      &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;        &lt;Table&gt;&#10;          &lt;TableHeader className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;TableRow&gt;&#10;              &lt;TableHead className=&quot;w-16 cursor-pointer&quot; onClick={() =&gt; handleSort('nmTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Área&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dsTema')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Nome&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('idAreas')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Áreas Relacionadas&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('nrDiasPrazo')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Prazo (dias)&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('tpContagem')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Tipo de Contagem&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;cursor-pointer&quot; onClick={() =&gt; handleSort('dtCadastro')}&gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  Data de Cadastro&#10;                  &lt;ArrowUpDown className=&quot;ml-2 h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/TableHead&gt;&#10;              &lt;TableHead className=&quot;w-24 text-right&quot;&gt;Ações&lt;/TableHead&gt;&#10;            &lt;/TableRow&gt;&#10;          &lt;/TableHeader&gt;&#10;          &lt;TableBody&gt;&#10;            {filteredTemas.length === 0 ? (&#10;              &lt;TableRow&gt;&#10;                &lt;TableCell colSpan={7} className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                  Nenhum tema encontrado&#10;                &lt;/TableCell&gt;&#10;              &lt;/TableRow&gt;&#10;            ) : (&#10;              filteredTemas.map((tema) =&gt; {&#10;                const areas = getAreasForTema(tema.idAreas);&#10;                return (&#10;                  &lt;TableRow key={tema.idTema} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                    &lt;TableCell className=&quot;font-medium&quot;&gt;{tema.nmTema}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{tema.dsTema}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;&#10;                      &lt;div className=&quot;flex flex-wrap gap-1 max-w-sm&quot;&gt;&#10;                        {areas.length === 0 ? (&#10;                          &lt;span className=&quot;text-muted-foreground text-sm&quot;&gt;Nenhuma área&lt;/span&gt;&#10;                        ) : (&#10;                          areas.map((area) =&gt; (&#10;                            &lt;Badge key={area.idArea} variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#10;                              {area.nmArea}&#10;                            &lt;/Badge&gt;&#10;                          ))&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{tema.nrDiasPrazo}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{tema.tpContagem}&lt;/TableCell&gt;&#10;                    &lt;TableCell&gt;{new Date(tema.dtCadastro).toLocaleDateString('pt-BR')}&lt;/TableCell&gt;&#10;                    &lt;TableCell className=&quot;text-right&quot;&gt;&#10;                      &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                        &lt;Button&#10;                          variant=&quot;ghost&quot;&#10;                          size=&quot;icon&quot;&#10;                          onClick={() =&gt; handleEditTema(tema)}&#10;                        &gt;&#10;                          &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;Button&#10;                          variant=&quot;ghost&quot;&#10;                          size=&quot;icon&quot;&#10;                          onClick={() =&gt; handleDeleteTema(tema.idTema)}&#10;                          className=&quot;text-red-500 hover:text-red-700&quot;&#10;                        &gt;&#10;                          &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;DropdownMenu&gt;&#10;                          &lt;DropdownMenuTrigger asChild&gt;&#10;                            &lt;Button variant=&quot;ghost&quot; className=&quot;h-8 w-8 p-0&quot;&gt;&#10;                              &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;                              &lt;span className=&quot;sr-only&quot;&gt;Abrir menu&lt;/span&gt;&#10;                            &lt;/Button&gt;&#10;                          &lt;/DropdownMenuTrigger&gt;&#10;                          &lt;DropdownMenuContent align=&quot;end&quot;&gt;&#10;                            &lt;DropdownMenuItem onClick={() =&gt; handleEditTema(tema)}&gt;&#10;                              &lt;Edit className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                              Editar&#10;                            &lt;/DropdownMenuItem&gt;&#10;                            &lt;DropdownMenuItem&#10;                              onClick={() =&gt; handleDeleteTema(tema.idTema)}&#10;                              className=&quot;text-destructive&quot;&#10;                            &gt;&#10;                              &lt;Trash2 className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                              Excluir&#10;                            &lt;/DropdownMenuItem&gt;&#10;                          &lt;/DropdownMenuContent&gt;&#10;                        &lt;/DropdownMenu&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/TableCell&gt;&#10;                  &lt;/TableRow&gt;&#10;                );&#10;              })&#10;            )}&#10;          &lt;/TableBody&gt;&#10;        &lt;/Table&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Tema Modal */}&#10;      {showTemaModal &amp;&amp; (&#10;        &lt;TemaModal&#10;          tema={selectedTema}&#10;          isOpen={selectedTema !== null}&#10;          onClose={() =&gt; {&#10;            setShowTemaModal(false);&#10;            setSelectedTema(null);&#10;          }}&#10;          onSave={handleSaveTema}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client'&#10;&#10;import { useState } from 'react'&#10;import { Button } from '@/components/ui/button'&#10;import { Input } from '@/components/ui/input'&#10;import { Badge } from '@/components/ui/badge'&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow,&#10;} from '@/components/ui/table'&#10;import {&#10;  DropdownMenu,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuTrigger,&#10;} from '@/components/ui/dropdown-menu'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;import { Search, Plus, MoreHorizontal, Edit, Trash2 } from 'lucide-react'&#10;import { Tema } from '@/lib/types'&#10;import { mockTemas, mockAreas } from '@/lib/mockData'&#10;import { TemaModal } from './TemaModal'&#10;&#10;interface TemasTableProps {&#10;  onEdit?: (tema: Tema) =&gt; void&#10;  onDelete?: (temaId: string) =&gt; void&#10;}&#10;&#10;export function TemasTable({ onEdit, onDelete }: TemasTableProps) {&#10;  const [temas, setTemas] = useState&lt;Tema[]&gt;(mockTemas)&#10;  const [searchTerm, setSearchTerm] = useState('')&#10;  const [isModalOpen, setIsModalOpen] = useState(false)&#10;  const [editingTema, setEditingTema] = useState&lt;Tema | null&gt;(null)&#10;&#10;  const filteredTemas = temas.filter(tema =&gt;&#10;    tema.nmTema.toLowerCase().includes(searchTerm.toLowerCase()) ||&#10;    tema.dsTema.toLowerCase().includes(searchTerm.toLowerCase())&#10;  )&#10;&#10;  const getAreasForTema = (idAreas: string[]) =&gt; {&#10;    return mockAreas.filter(area =&gt; idAreas.includes(area.idArea))&#10;  }&#10;&#10;  const handleEdit = (tema: Tema) =&gt; {&#10;    setEditingTema(tema)&#10;    setIsModalOpen(true)&#10;    onEdit?.(tema)&#10;  }&#10;&#10;  const handleDelete = (temaId: string) =&gt; {&#10;    setTemas(prev =&gt; prev.filter(tema =&gt; tema.idTema !== temaId))&#10;    onDelete?.(temaId)&#10;  }&#10;&#10;  const handleSave = (tema: Tema) =&gt; {&#10;    if (editingTema) {&#10;      // Update existing tema&#10;      setTemas(prev =&gt; prev.map(t =&gt; t.idTema === tema.idTema ? tema : t))&#10;    } else {&#10;      // Add new tema&#10;      setTemas(prev =&gt; [...prev, tema])&#10;    }&#10;    setEditingTema(null)&#10;  }&#10;&#10;  const handleNewTema = () =&gt; {&#10;    setEditingTema(null)&#10;    setIsModalOpen(true)&#10;  }&#10;&#10;  const handleCloseModal = () =&gt; {&#10;    setIsModalOpen(false)&#10;    setEditingTema(null)&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-4&quot;&gt;&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;CardTitle&gt;Temas&lt;/CardTitle&gt;&#10;            &lt;Button onClick={handleNewTema} className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Plus className=&quot;h-4 w-4&quot; /&gt;&#10;              Novo Tema&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2 mb-4&quot;&gt;&#10;            &lt;div className=&quot;relative flex-1&quot;&gt;&#10;              &lt;Search className=&quot;absolute left-2 top-2.5 h-4 w-4 text-muted-foreground&quot; /&gt;&#10;              &lt;Input&#10;                placeholder=&quot;Buscar temas...&quot;&#10;                value={searchTerm}&#10;                onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                className=&quot;pl-8&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;rounded-md border&quot;&gt;&#10;            &lt;Table&gt;&#10;              &lt;TableHeader&gt;&#10;                &lt;TableRow&gt;&#10;                  &lt;TableHead&gt;Nome&lt;/TableHead&gt;&#10;                  &lt;TableHead&gt;Descrição&lt;/TableHead&gt;&#10;                  &lt;TableHead&gt;Áreas Relacionadas&lt;/TableHead&gt;&#10;                  &lt;TableHead className=&quot;text-center&quot;&gt;Prazo&lt;/TableHead&gt;&#10;                  &lt;TableHead className=&quot;text-center&quot;&gt;Tipo Contagem&lt;/TableHead&gt;&#10;                  &lt;TableHead className=&quot;text-center&quot;&gt;Ações&lt;/TableHead&gt;&#10;                &lt;/TableRow&gt;&#10;              &lt;/TableHeader&gt;&#10;              &lt;TableBody&gt;&#10;                {filteredTemas.length === 0 ? (&#10;                  &lt;TableRow&gt;&#10;                    &lt;TableCell colSpan={6} className=&quot;text-center py-8 text-muted-foreground&quot;&gt;&#10;                      {searchTerm ? 'Nenhum tema encontrado.' : 'Nenhum tema cadastrado.'}&#10;                    &lt;/TableCell&gt;&#10;                  &lt;/TableRow&gt;&#10;                ) : (&#10;                  filteredTemas.map((tema) =&gt; {&#10;                    const areas = getAreasForTema(tema.idAreas)&#10;                    return (&#10;                      &lt;TableRow key={tema.idTema}&gt;&#10;                        &lt;TableCell className=&quot;font-medium&quot;&gt;{tema.nmTema}&lt;/TableCell&gt;&#10;                        &lt;TableCell className=&quot;max-w-xs&quot;&gt;&#10;                          &lt;div className=&quot;truncate&quot; title={tema.dsTema}&gt;&#10;                            {tema.dsTema}&#10;                          &lt;/div&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          &lt;div className=&quot;flex flex-wrap gap-1 max-w-sm&quot;&gt;&#10;                            {areas.length === 0 ? (&#10;                              &lt;span className=&quot;text-muted-foreground text-sm&quot;&gt;Nenhuma área&lt;/span&gt;&#10;                            ) : (&#10;                              areas.map((area) =&gt; (&#10;                                &lt;Badge key={area.idArea} variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#10;                                  {area.nmArea}&#10;                                &lt;/Badge&gt;&#10;                              ))&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell className=&quot;text-center&quot;&gt;&#10;                          {tema.nrDiasPrazo} dias&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell className=&quot;text-center&quot;&gt;&#10;                          &lt;Badge variant={tema.tpContagem === 'UTEIS' ? 'default' : 'secondary'}&gt;&#10;                            {tema.tpContagem === 'UTEIS' ? 'Úteis' : 'Corridos'}&#10;                          &lt;/Badge&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell className=&quot;text-center&quot;&gt;&#10;                          &lt;DropdownMenu&gt;&#10;                            &lt;DropdownMenuTrigger asChild&gt;&#10;                              &lt;Button variant=&quot;ghost&quot; className=&quot;h-8 w-8 p-0&quot;&gt;&#10;                                &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;                                &lt;span className=&quot;sr-only&quot;&gt;Abrir menu&lt;/span&gt;&#10;                              &lt;/Button&gt;&#10;                            &lt;/DropdownMenuTrigger&gt;&#10;                            &lt;DropdownMenuContent align=&quot;end&quot;&gt;&#10;                              &lt;DropdownMenuItem onClick={() =&gt; handleEdit(tema)}&gt;&#10;                                &lt;Edit className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                Editar&#10;                              &lt;/DropdownMenuItem&gt;&#10;                              &lt;DropdownMenuItem &#10;                                onClick={() =&gt; handleDelete(tema.idTema)}&#10;                                className=&quot;text-destructive&quot;&#10;                              &gt;&#10;                                &lt;Trash2 className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                Excluir&#10;                              &lt;/DropdownMenuItem&gt;&#10;                            &lt;/DropdownMenuContent&gt;&#10;                          &lt;/DropdownMenu&gt;&#10;                        &lt;/TableCell&gt;&#10;                      &lt;/TableRow&gt;&#10;                    )&#10;                  })&#10;                )}&#10;              &lt;/TableBody&gt;&#10;            &lt;/Table&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      &lt;TemaModal&#10;        isOpen={isModalOpen}&#10;        onClose={handleCloseModal}&#10;        onSave={handleSave}&#10;        tema={editingTema}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/mockData.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/mockData.ts" />
              <option name="originalContent" value="import { Area, Responsavel, Solicitacao, Tema, TipoContagem } from './types';&#10;import { v4 as uuidv4 } from 'uuid';&#10;&#10;// Mock Areas&#10;export const mockAreas: Area[] = [&#10;  {&#10;    idArea: uuidv4(),&#10;    cdArea: 1001,&#10;    nmArea: 'Jurídico',&#10;    dsArea: 'Departamento Jurídico',&#10;    dtCadastro: '2025-01-15',&#10;    nrCpfCadastro: '12345678901',&#10;    vsVersao: 1,&#10;    dtAlteracao: '2025-01-15',&#10;    nrCpfAlteracao: '12345678901'&#10;  },&#10;  {&#10;    idArea: uuidv4(),&#10;    cdArea: 1002,&#10;    nmArea: 'Financeiro',&#10;    dsArea: 'Departamento Financeiro',&#10;    dtCadastro: '2025-01-15',&#10;    nrCpfCadastro: '12345678901',&#10;    vsVersao: 1,&#10;    dtAlteracao: '2025-01-15',&#10;    nrCpfAlteracao: '12345678901'&#10;  },&#10;  {&#10;    idArea: uuidv4(),&#10;    cdArea: 1003,&#10;    nmArea: 'Recursos Humanos',&#10;    dsArea: 'Departamento de Recursos Humanos',&#10;    dtCadastro: '2025-01-15',&#10;    nrCpfCadastro: '12345678901',&#10;    vsVersao: 1,&#10;    dtAlteracao: '2025-01-15',&#10;    nrCpfAlteracao: '12345678901'&#10;  },&#10;  {&#10;    idArea: uuidv4(),&#10;    cdArea: 1004,&#10;    nmArea: 'TI',&#10;    dsArea: 'Departamento de Tecnologia da Informação',&#10;    dtCadastro: '2025-01-15',&#10;    nrCpfCadastro: '12345678901',&#10;    vsVersao: 1,&#10;    dtAlteracao: '2025-01-15',&#10;    nrCpfAlteracao: '12345678901'&#10;  },&#10;  {&#10;    idArea: uuidv4(),&#10;    cdArea: 1005,&#10;    nmArea: 'Operações',&#10;    dsArea: 'Departamento de Operações',&#10;    dtCadastro: '2025-01-15',&#10;    nrCpfCadastro: '12345678901',&#10;    vsVersao: 1,&#10;    dtAlteracao: '2025-01-15',&#10;    nrCpfAlteracao: '12345678901'&#10;  }&#10;];&#10;&#10;// Mock Responsaveis&#10;export const mockResponsaveis: Responsavel[] = [&#10;  {&#10;    idResponsavel: uuidv4(),&#10;    dsNome: 'João Silva',&#10;    dsEmail: 'joao.silva@empresa.com',&#10;    nmTelefone: '(11) 98765-4321'&#10;  },&#10;  {&#10;    idResponsavel: uuidv4(),&#10;    dsNome: 'Maria Oliveira',&#10;    dsEmail: 'maria.oliveira@empresa.com',&#10;    nmTelefone: '(21) 99876-5432'&#10;  },&#10;  {&#10;    idResponsavel: uuidv4(),&#10;    dsNome: 'Carlos Santos',&#10;    dsEmail: 'carlos.santos@empresa.com',&#10;    nmTelefone: '(31) 97654-3210'&#10;  },&#10;  {&#10;    idResponsavel: uuidv4(),&#10;    dsNome: 'Ana Pereira',&#10;    dsEmail: 'ana.pereira@empresa.com',&#10;    nmTelefone: '(41) 96543-2109'&#10;  },&#10;  {&#10;    idResponsavel: uuidv4(),&#10;    dsNome: 'Lucas Costa',&#10;    dsEmail: 'lucas.costa@empresa.com',&#10;    nmTelefone: '(51) 95432-1098'&#10;  }&#10;];&#10;&#10;// Mock Temas&#10;export const mockTemas: Tema[] = [&#10;  {&#10;    idTema: uuidv4(),&#10;    nmTema: 'Jurídico',&#10;    dsTema: 'Contratos Jurídicos',&#10;    idAreas: [mockAreas[0].idArea, mockAreas[1].idArea], // Múltiplas áreas&#10;    nrDiasPrazo: 30,&#10;    tpContagem: TipoContagem.UTEIS,&#10;    dtCadastro: '2025-01-20',&#10;    nrCpfCadastro: '12345678901',&#10;    vsVersao: 1,&#10;    dtAlteracao: '2025-01-20',&#10;    nrCpfAlteracao: '12345678901'&#10;  },&#10;  {&#10;    idTema: uuidv4(),&#10;    nmTema: 'Financeiro',&#10;    dsTema: 'Relatórios Financeiros',&#10;    idAreas: [mockAreas[1].idArea, mockAreas[3].idArea, mockAreas[4].idArea], // Múltiplas áreas&#10;    nrDiasPrazo: 15,&#10;    tpContagem: TipoContagem.CORRIDOS,&#10;    dtCadastro: '2025-01-20',&#10;    nrCpfCadastro: '12345678901',&#10;    vsVersao: 1,&#10;    dtAlteracao: '2025-01-20',&#10;    nrCpfAlteracao: '12345678901'&#10;  },&#10;  {&#10;    idTema: uuidv4(),&#10;    nmTema: 'Recursos Humanos',&#10;    dsTema: 'Processos de RH',&#10;    idAreas: [mockAreas[2].idArea],&#10;    nrDiasPrazo: 10,&#10;    tpContagem: TipoContagem.UTEIS,&#10;    dtCadastro: '2025-01-20',&#10;    nrCpfCadastro: '12345678901',&#10;    vsVersao: 1,&#10;    dtAlteracao: '2025-01-20',&#10;    nrCpfAlteracao: '12345678901'&#10;  },&#10;  {&#10;    idTema: uuidv4(),&#10;    nmTema: 'TI',&#10;    dsTema: 'Infraestrutura de TI',&#10;    idAreas: [mockAreas[3].idArea, mockAreas[0].idArea], // Múltiplas áreas&#10;    nrDiasPrazo: 20,&#10;    tpContagem: TipoContagem.CORRIDOS,&#10;    dtCadastro: '2025-01-20',&#10;    nrCpfCadastro: '12345678901',&#10;    vsVersao: 1,&#10;    dtAlteracao: '2025-01-20',&#10;    nrCpfAlteracao: '12345678901'&#10;  },&#10;  {&#10;    idTema: uuidv4(),&#10;    nmTema: 'Operações',&#10;    dsTema: 'Processos Operacionais',&#10;    idAreas: [mockAreas[4].idArea, mockAreas[2].idArea, mockAreas[1].idArea], // Múltiplas áreas&#10;    nrDiasPrazo: 25,&#10;    tpContagem: TipoContagem.UTEIS,&#10;    dtCadastro: '2025-01-20',&#10;    nrCpfCadastro: '12345678901',&#10;    vsVersao: 1,&#10;    dtAlteracao: '2025-01-20',&#10;    nrCpfAlteracao: '12345678901'&#10;  }&#10;];&#10;&#10;// Mock Solicitacoes&#10;export const mockSolicitacoes: Solicitacao[] = [&#10;  {&#10;    idSolicitacao: uuidv4(),&#10;    cdSolicitante: ['SOL001', 'SOL002'],&#10;    dsAssunto: 'Revisão de contrato',&#10;    cdIdentificacao: 'REV001',&#10;    dsDescricao: 'Necessidade de revisão do contrato com fornecedor X',&#10;    dsAnexos: ['contrato.pdf', 'anexo1.pdf'],&#10;    status: 'pendente',&#10;    dtCriacao: '2025-03-01',&#10;    idResponsavel: mockResponsaveis[0].idResponsavel&#10;  },&#10;  {&#10;    idSolicitacao: uuidv4(),&#10;    cdSolicitante: ['SOL003'],&#10;    dsAssunto: 'Análise de relatório financeiro',&#10;    cdIdentificacao: 'FIN002',&#10;    dsDescricao: 'Análise do relatório financeiro do primeiro trimestre',&#10;    dsAnexos: ['relatorio.xlsx'],&#10;    status: 'em_andamento',&#10;    dtCriacao: '2025-03-05',&#10;    idResponsavel: mockResponsaveis[1].idResponsavel&#10;  },&#10;  {&#10;    idSolicitacao: uuidv4(),&#10;    cdSolicitante: ['SOL004', 'SOL005'],&#10;    dsAssunto: 'Processo seletivo',&#10;    cdIdentificacao: 'RH003',&#10;    dsDescricao: 'Abertura de processo seletivo para desenvolvedor',&#10;    dsAnexos: ['requisitos.docx'],&#10;    status: 'concluido',&#10;    dtCriacao: '2025-02-20',&#10;    idResponsavel: mockResponsaveis[2].idResponsavel&#10;  },&#10;  {&#10;    idSolicitacao: uuidv4(),&#10;    cdSolicitante: ['SOL006'],&#10;    dsAssunto: 'Atualização de infraestrutura',&#10;    cdIdentificacao: 'TI004',&#10;    dsDescricao: 'Atualização dos servidores da empresa',&#10;    dsAnexos: ['planejamento.pdf', 'orcamento.xlsx'],&#10;    status: 'atrasado',&#10;    dtCriacao: '2025-02-10',&#10;    idResponsavel: mockResponsaveis[3].idResponsavel&#10;  },&#10;  {&#10;    idSolicitacao: uuidv4(),&#10;    cdSolicitante: ['SOL007', 'SOL008'],&#10;    dsAssunto: 'Otimização de processos',&#10;    cdIdentificacao: 'OP005',&#10;    dsDescricao: 'Análise e otimização dos processos operacionais',&#10;    dsAnexos: ['processos.pptx'],&#10;    status: 'pendente',&#10;    dtCriacao: '2025-03-10',&#10;    idResponsavel: mockResponsaveis[4].idResponsavel&#10;  }&#10;];&#10;&#10;// Helper function to get area name by id&#10;export const getAreaNameById = (id: string): string =&gt; {&#10;  const area = mockAreas.find(area =&gt; area.idArea === id);&#10;  return area ? area.nmArea : 'Área não encontrada';&#10;};&#10;&#10;// Helper function to get responsavel name by id&#10;export const getResponsavelNameById = (id: string): string =&gt; {&#10;  const responsavel = mockResponsaveis.find(resp =&gt; resp.idResponsavel === id);&#10;  return responsavel ? responsavel.dsNome : 'Responsável não encontrado';&#10;};&#10;&#10;// Helper function to get responsavel email by id&#10;export const getResponsavelEmailById = (id: string): string =&gt; {&#10;  const responsavel = mockResponsaveis.find(resp =&gt; resp.idResponsavel === id);&#10;  return responsavel ? responsavel.dsEmail : '';&#10;};&#10;&#10;// Helper function to get responsavel phone number by id&#10;export const getResponsavelTelefoneById = (id: string): string =&gt; {&#10;  const responsavel = mockResponsaveis.find(resp =&gt; resp.idResponsavel === id);&#10;  return responsavel ? responsavel.nmTelefone : '';&#10;};&#10;" />
              <option name="updatedContent" value="import { Area, Responsavel, Solicitacao, Tema, TipoContagem } from './types';&#13;&#10;import { v4 as uuidv4 } from 'uuid';&#13;&#10;&#13;&#10;// Mock Areas&#13;&#10;export const mockAreas: Area[] = [&#13;&#10;  {&#13;&#10;    idArea: uuidv4(),&#13;&#10;    cdArea: 1001,&#13;&#10;    nmArea: 'Jurídico',&#13;&#10;    dsArea: 'Departamento Jurídico',&#13;&#10;    dtCadastro: '2025-01-15',&#13;&#10;    nrCpfCadastro: '12345678901',&#13;&#10;    vsVersao: 1,&#13;&#10;    dtAlteracao: '2025-01-15',&#13;&#10;    nrCpfAlteracao: '12345678901'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idArea: uuidv4(),&#13;&#10;    cdArea: 1002,&#13;&#10;    nmArea: 'Financeiro',&#13;&#10;    dsArea: 'Departamento Financeiro',&#13;&#10;    dtCadastro: '2025-01-15',&#13;&#10;    nrCpfCadastro: '12345678901',&#13;&#10;    vsVersao: 1,&#13;&#10;    dtAlteracao: '2025-01-15',&#13;&#10;    nrCpfAlteracao: '12345678901'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idArea: uuidv4(),&#13;&#10;    cdArea: 1003,&#13;&#10;    nmArea: 'Recursos Humanos',&#13;&#10;    dsArea: 'Departamento de Recursos Humanos',&#13;&#10;    dtCadastro: '2025-01-15',&#13;&#10;    nrCpfCadastro: '12345678901',&#13;&#10;    vsVersao: 1,&#13;&#10;    dtAlteracao: '2025-01-15',&#13;&#10;    nrCpfAlteracao: '12345678901'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idArea: uuidv4(),&#13;&#10;    cdArea: 1004,&#13;&#10;    nmArea: 'TI',&#13;&#10;    dsArea: 'Departamento de Tecnologia da Informação',&#13;&#10;    dtCadastro: '2025-01-15',&#13;&#10;    nrCpfCadastro: '12345678901',&#13;&#10;    vsVersao: 1,&#13;&#10;    dtAlteracao: '2025-01-15',&#13;&#10;    nrCpfAlteracao: '12345678901'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idArea: uuidv4(),&#13;&#10;    cdArea: 1005,&#13;&#10;    nmArea: 'Operações',&#13;&#10;    dsArea: 'Departamento de Operações',&#13;&#10;    dtCadastro: '2025-01-15',&#13;&#10;    nrCpfCadastro: '12345678901',&#13;&#10;    vsVersao: 1,&#13;&#10;    dtAlteracao: '2025-01-15',&#13;&#10;    nrCpfAlteracao: '12345678901'&#13;&#10;  }&#13;&#10;];&#13;&#10;&#13;&#10;// Mock Responsaveis&#13;&#10;export const mockResponsaveis: Responsavel[] = [&#13;&#10;  {&#13;&#10;    idResponsavel: uuidv4(),&#13;&#10;    dsNome: 'João Silva',&#13;&#10;    dsEmail: 'joao.silva@empresa.com',&#13;&#10;    nmTelefone: '(11) 98765-4321',&#13;&#10;    dsPerfil: 'admin'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idResponsavel: uuidv4(),&#13;&#10;    dsNome: 'Maria Oliveira',&#13;&#10;    dsEmail: 'maria.oliveira@empresa.com',&#13;&#10;    nmTelefone: '(21) 99876-5432',&#13;&#10;    dsPerfil: 'manager'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idResponsavel: uuidv4(),&#13;&#10;    dsNome: 'Carlos Santos',&#13;&#10;    dsEmail: 'carlos.santos@empresa.com',&#13;&#10;    nmTelefone: '(31) 97654-3210',&#13;&#10;    dsPerfil: 'user'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idResponsavel: uuidv4(),&#13;&#10;    dsNome: 'Ana Pereira',&#13;&#10;    dsEmail: 'ana.pereira@empresa.com',&#13;&#10;    nmTelefone: '(41) 96543-2109',&#13;&#10;    dsPerfil: 'user'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idResponsavel: uuidv4(),&#13;&#10;    dsNome: 'Lucas Costa',&#13;&#10;    dsEmail: 'lucas.costa@empresa.com',&#13;&#10;    nmTelefone: '(51) 95432-1098',&#13;&#10;    dsPerfil: 'manager'&#13;&#10;  }&#13;&#10;];&#13;&#10;&#13;&#10;// Mock Temas&#13;&#10;export const mockTemas: Tema[] = [&#13;&#10;  {&#13;&#10;    idTema: uuidv4(),&#13;&#10;    nmTema: 'Jurídico',&#13;&#10;    dsTema: 'Contratos Jurídicos',&#13;&#10;    idAreas: [mockAreas[0].idArea, mockAreas[1].idArea], // Múltiplas áreas&#13;&#10;    nrDiasPrazo: 30,&#13;&#10;    tpContagem: TipoContagem.UTEIS,&#13;&#10;    dtCadastro: '2025-01-20',&#13;&#10;    nrCpfCadastro: '12345678901',&#13;&#10;    vsVersao: 1,&#13;&#10;    dtAlteracao: '2025-01-20',&#13;&#10;    nrCpfAlteracao: '12345678901'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idTema: uuidv4(),&#13;&#10;    nmTema: 'Financeiro',&#13;&#10;    dsTema: 'Relatórios Financeiros',&#13;&#10;    idAreas: [mockAreas[1].idArea, mockAreas[3].idArea, mockAreas[4].idArea], // Múltiplas áreas&#13;&#10;    nrDiasPrazo: 15,&#13;&#10;    tpContagem: TipoContagem.CORRIDOS,&#13;&#10;    dtCadastro: '2025-01-20',&#13;&#10;    nrCpfCadastro: '12345678901',&#13;&#10;    vsVersao: 1,&#13;&#10;    dtAlteracao: '2025-01-20',&#13;&#10;    nrCpfAlteracao: '12345678901'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idTema: uuidv4(),&#13;&#10;    nmTema: 'Recursos Humanos',&#13;&#10;    dsTema: 'Processos de RH',&#13;&#10;    idAreas: [mockAreas[2].idArea],&#13;&#10;    nrDiasPrazo: 10,&#13;&#10;    tpContagem: TipoContagem.UTEIS,&#13;&#10;    dtCadastro: '2025-01-20',&#13;&#10;    nrCpfCadastro: '12345678901',&#13;&#10;    vsVersao: 1,&#13;&#10;    dtAlteracao: '2025-01-20',&#13;&#10;    nrCpfAlteracao: '12345678901'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idTema: uuidv4(),&#13;&#10;    nmTema: 'TI',&#13;&#10;    dsTema: 'Infraestrutura de TI',&#13;&#10;    idAreas: [mockAreas[3].idArea, mockAreas[0].idArea], // Múltiplas áreas&#13;&#10;    nrDiasPrazo: 20,&#13;&#10;    tpContagem: TipoContagem.CORRIDOS,&#13;&#10;    dtCadastro: '2025-01-20',&#13;&#10;    nrCpfCadastro: '12345678901',&#13;&#10;    vsVersao: 1,&#13;&#10;    dtAlteracao: '2025-01-20',&#13;&#10;    nrCpfAlteracao: '12345678901'&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idTema: uuidv4(),&#13;&#10;    nmTema: 'Operações',&#13;&#10;    dsTema: 'Processos Operacionais',&#13;&#10;    idAreas: [mockAreas[4].idArea, mockAreas[2].idArea, mockAreas[1].idArea], // Múltiplas áreas&#13;&#10;    nrDiasPrazo: 25,&#13;&#10;    tpContagem: TipoContagem.UTEIS,&#13;&#10;    dtCadastro: '2025-01-20',&#13;&#10;    nrCpfCadastro: '12345678901',&#13;&#10;    vsVersao: 1,&#13;&#10;    dtAlteracao: '2025-01-20',&#13;&#10;    nrCpfAlteracao: '12345678901'&#13;&#10;  }&#13;&#10;];&#13;&#10;&#13;&#10;// Mock Solicitacoes&#13;&#10;export const mockSolicitacoes: Solicitacao[] = [&#13;&#10;  {&#13;&#10;    idSolicitacao: uuidv4(),&#13;&#10;    cdSolicitante: ['SOL001', 'SOL002'],&#13;&#10;    dsAssunto: 'Revisão de contrato',&#13;&#10;    cdIdentificacao: 'REV001',&#13;&#10;    dsDescricao: 'Necessidade de revisão do contrato com fornecedor X',&#13;&#10;    dsAnexos: ['contrato.pdf', 'anexo1.pdf'],&#13;&#10;    status: 'pendente',&#13;&#10;    dtCriacao: '2025-03-01',&#13;&#10;    idResponsavel: mockResponsaveis[0].idResponsavel&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idSolicitacao: uuidv4(),&#13;&#10;    cdSolicitante: ['SOL003'],&#13;&#10;    dsAssunto: 'Análise de relatório financeiro',&#13;&#10;    cdIdentificacao: 'FIN002',&#13;&#10;    dsDescricao: 'Análise do relatório financeiro do primeiro trimestre',&#13;&#10;    dsAnexos: ['relatorio.xlsx'],&#13;&#10;    status: 'em_andamento',&#13;&#10;    dtCriacao: '2025-03-05',&#13;&#10;    idResponsavel: mockResponsaveis[1].idResponsavel&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idSolicitacao: uuidv4(),&#13;&#10;    cdSolicitante: ['SOL004', 'SOL005'],&#13;&#10;    dsAssunto: 'Processo seletivo',&#13;&#10;    cdIdentificacao: 'RH003',&#13;&#10;    dsDescricao: 'Abertura de processo seletivo para desenvolvedor',&#13;&#10;    dsAnexos: ['requisitos.docx'],&#13;&#10;    status: 'concluido',&#13;&#10;    dtCriacao: '2025-02-20',&#13;&#10;    idResponsavel: mockResponsaveis[2].idResponsavel&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idSolicitacao: uuidv4(),&#13;&#10;    cdSolicitante: ['SOL006'],&#13;&#10;    dsAssunto: 'Atualização de infraestrutura',&#13;&#10;    cdIdentificacao: 'TI004',&#13;&#10;    dsDescricao: 'Atualização dos servidores da empresa',&#13;&#10;    dsAnexos: ['planejamento.pdf', 'orcamento.xlsx'],&#13;&#10;    status: 'atrasado',&#13;&#10;    dtCriacao: '2025-02-10',&#13;&#10;    idResponsavel: mockResponsaveis[3].idResponsavel&#13;&#10;  },&#13;&#10;  {&#13;&#10;    idSolicitacao: uuidv4(),&#13;&#10;    cdSolicitante: ['SOL007', 'SOL008'],&#13;&#10;    dsAssunto: 'Otimização de processos',&#13;&#10;    cdIdentificacao: 'OP005',&#13;&#10;    dsDescricao: 'Análise e otimização dos processos operacionais',&#13;&#10;    dsAnexos: ['processos.pptx'],&#13;&#10;    status: 'pendente',&#13;&#10;    dtCriacao: '2025-03-10',&#13;&#10;    idResponsavel: mockResponsaveis[4].idResponsavel&#13;&#10;  }&#13;&#10;];&#13;&#10;&#13;&#10;// Helper function to get area name by id&#13;&#10;export const getAreaNameById = (id: string): string =&gt; {&#13;&#10;  const area = mockAreas.find(area =&gt; area.idArea === id);&#13;&#10;  return area ? area.nmArea : 'Área não encontrada';&#13;&#10;};&#13;&#10;&#13;&#10;// Helper function to get responsavel name by id&#13;&#10;export const getResponsavelNameById = (id: string): string =&gt; {&#13;&#10;  const responsavel = mockResponsaveis.find(resp =&gt; resp.idResponsavel === id);&#13;&#10;  return responsavel ? responsavel.dsNome : 'Responsável não encontrado';&#13;&#10;};&#13;&#10;&#13;&#10;// Helper function to get responsavel email by id&#13;&#10;export const getResponsavelEmailById = (id: string): string =&gt; {&#13;&#10;  const responsavel = mockResponsaveis.find(resp =&gt; resp.idResponsavel === id);&#13;&#10;  return responsavel ? responsavel.dsEmail : '';&#13;&#10;};&#13;&#10;&#13;&#10;// Helper function to get responsavel phone number by id&#13;&#10;export const getResponsavelTelefoneById = (id: string): string =&gt; {&#13;&#10;  const responsavel = mockResponsaveis.find(resp =&gt; resp.idResponsavel === id);&#13;&#10;  return responsavel ? responsavel.nmTelefone : '';&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/email/EmailDetail.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/email/EmailDetail.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import {useEffect, useState} from 'react';&#10;import {ArrowLeft, Download, Loader2, MoreHorizontal, Paperclip, Trash2, FileText} from 'lucide-react';&#10;import {Button} from '@/components/ui/button';&#10;import {Avatar, AvatarFallback, AvatarImage} from '@/components/ui/avatar';&#10;import {DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger,} from '@/components/ui/dropdown-menu';&#10;import {useEmail} from '@/api/hooks';&#10;import {useToast} from '@/hooks/use-toast';&#10;import {Anexo} from '@/api/types';&#10;import SolicitacaoModal from '@/components/solicitacoes/SolicitacaoModal';&#10;import { Solicitacao } from '@/lib/types';&#10;import { v4 as uuidv4 } from 'uuid';&#10;&#10;interface EmailDetailProps {&#10;  emailId: string;&#10;  onClose(): void;&#10;  onSend?: (email: {&#10;    to: string;&#10;    cc?: string;&#10;    bcc?: string;&#10;    subject: string;&#10;    content: string;&#10;    date: string;&#10;  }) =&gt; void;&#10;  emailConfig?: {&#10;    defaultMessages: {&#10;      [key: string]: string;&#10;    };&#10;    defaultFooter: string;&#10;  };&#10;}&#10;&#10;// Helper function to format date&#10;const formatDate = (dateString?: string): string =&gt; {&#10;  if (!dateString) return '';&#10;&#10;  const date = new Date(dateString);&#10;&#10;  // Format as full date and time&#10;  return date.toLocaleDateString('pt-BR', { &#10;    year: 'numeric', &#10;    month: 'long', &#10;    day: 'numeric',&#10;    hour: '2-digit',&#10;    minute: '2-digit'&#10;  });&#10;};&#10;&#10;// Mock emails data - same as in EmailList&#10;const MOCK_EMAILS = [&#10;  {&#10;    id: 'mock-1',&#10;    from: 'João Silva',&#10;    fromEmail: 'joao@empresa.com',&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#10;    content: `Prezado(a),&#10;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#10;&#10;Os principais destaques são:&#10;• Crescimento de 15% em relação ao mês anterior&#10;• Aumento de 8% no número de novos clientes&#10;• Melhoria na taxa de conversão para 12%&#10;&#10;Principais produtos vendidos:&#10;1. Produto A - R$ 45.000&#10;2. Produto B - R$ 32.000  &#10;3. Produto C - R$ 28.500&#10;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#10;&#10;Atenciosamente,&#10;João Silva&#10;Gerente Comercial&#10;(11) 9999-8888`,&#10;    date: new Date().toISOString(),&#10;    isStarred: true,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-2',&#10;    from: 'Maria Santos',&#10;    fromEmail: 'maria@consultoria.com',&#10;    subject: 'Proposta de consultoria em marketing digital',&#10;    content: `Olá!&#10;&#10;Espero que esteja bem!&#10;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#10;&#10;Nossa experiência inclui:&#10;• Gestão de redes sociais&#10;• Campanhas no Google Ads&#10;• SEO e marketing de conteúdo&#10;• E-mail marketing&#10;• Análise de métricas e ROI&#10;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#10;&#10;Quando seria um bom momento para conversarmos?&#10;&#10;Abraços,&#10;Maria Santos&#10;Consultora em Marketing Digital&#10;maria@consultoria.com&#10;(11) 8888-7777`,&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: false,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-3',&#10;    from: 'Carlos Oliveira',&#10;    fromEmail: 'carlos@fornecedor.com',&#10;    subject: 'Confirmação do pedido #2024-1156',&#10;    content: `Prezado Cliente,&#10;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#10;&#10;Detalhes do pedido:&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#10;• Valor total: R$ 2.850,00&#10;• Prazo de entrega: 5 dias úteis&#10;• Forma de pagamento: Boleto bancário&#10;&#10;Itens do pedido:&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#10;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#10;&#10;Em caso de dúvidas, entre em contato conosco.&#10;&#10;Atenciosamente,&#10;Carlos Oliveira&#10;Departamento de Vendas&#10;carlos@fornecedor.com&#10;(11) 7777-6666`,&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: false,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-4',&#10;    from: 'Ana Costa',&#10;    fromEmail: 'ana@juridico.com',&#10;    subject: 'Revisão do contrato de prestação de serviços',&#10;    content: `Prezado(a),&#10;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#10;&#10;Pontos que precisam de atenção:&#10;1. Cláusula 5.2 - Prazo de pagamento&#10;2. Cláusula 8.1 - Rescisão contratual  &#10;3. Cláusula 12 - Foro de eleição&#10;&#10;Recomendações:&#10;• Incluir cláusula de reajuste anual&#10;• Especificar melhor as penalidades por atraso&#10;• Definir critérios objetivos para avaliação de performance&#10;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#10;&#10;Podemos agendar uma reunião para discutir estas alterações?&#10;&#10;Cordialmente,&#10;Ana Costa&#10;Advogada&#10;OAB/SP 123.456&#10;ana@juridico.com&#10;(11) 6666-5555`,&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: true,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-5',&#10;    from: 'Ricardo Ferreira',&#10;    fromEmail: 'ricardo@ti.com',&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#10;    content: `Prezados usuários,&#10;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#10;&#10;Durante este período:&#10;• O sistema ficará indisponível&#10;• Não será possível acessar dados&#10;• Funcionalidades estarão offline&#10;&#10;Melhorias que serão implementadas:&#10;• Otimização da performance&#10;• Correção de bugs reportados&#10;• Atualização de segurança&#10;• Nova funcionalidade de relatórios&#10;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#10;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#10;&#10;Obrigado pela compreensão.&#10;&#10;Equipe de TI&#10;Ricardo Ferreira&#10;Coordenador de Sistemas&#10;ricardo@ti.com`,&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: false,&#10;    attachments: []&#10;  }&#10;];&#10;&#10;// Sample HTML content for emails that don't have a response&#10;const DEFAULT_EMAIL_CONTENT = `&#10;  &lt;p&gt;Este email não possui conteúdo detalhado.&lt;/p&gt;&#10;  &lt;p&gt;Em uma aplicação real, o conteúdo completo do email seria exibido aqui.&lt;/p&gt;&#10;`;&#10;export default function EmailDetail({&#10;  emailId,&#10;  onClose,&#10;  onSend,&#10;  emailConfig&#10;}: EmailDetailProps) {&#10;  const { toast } = useToast();&#10;  const [sentEmail, setSentEmail] = useState&lt;any&gt;(null);&#10;  const [isSentEmail, setIsSentEmail] = useState(false);&#10;  const [mockEmail, setMockEmail] = useState&lt;any&gt;(null);&#10;  const [isMockEmail, setIsMockEmail] = useState(false);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const emailIdNumber = parseInt(emailId, 10);&#10;  const [showSolicitacaoModal, setShowSolicitacaoModal] = useState(false);&#10;  const [newSolicitacao, setNewSolicitacao] = useState&lt;Solicitacao | null&gt;(null);&#10;&#10;  // Check if this is a mock email&#10;  useEffect(() =&gt; {&#10;    const foundMockEmail = MOCK_EMAILS.find(email =&gt; email.id === emailId);&#10;    if (foundMockEmail) {&#10;      setMockEmail(foundMockEmail);&#10;      setIsMockEmail(true);&#10;      setIsLoading(false);&#10;      return;&#10;    }&#10;&#10;    // Check if this is a sent email from localStorage&#10;    if (typeof window !== 'undefined') {&#10;      const savedEmails = localStorage.getItem('sentEmails');&#10;      if (savedEmails) {&#10;        const sentEmails = JSON.parse(savedEmails);&#10;        const foundEmail = sentEmails.find((email: any) =&gt; email.id === emailId);&#10;        if (foundEmail) {&#10;          setSentEmail(foundEmail);&#10;          setIsSentEmail(true);&#10;        }&#10;      }&#10;      setIsLoading(false);&#10;    }&#10;  }, [emailId]);&#10;&#10;  // Only fetch from API if not a sent email, not a mock email, and we have a valid number&#10;  const { data: apiEmail, loading: apiLoading, error } = useEmail(&#10;    !isSentEmail &amp;&amp; !isMockEmail &amp;&amp; !isNaN(emailIdNumber) ? emailIdNumber : 0&#10;  );&#10;&#10;  // Function to create a new solicitation from email&#10;  const createSolicitacaoFromEmail = () =&gt; {&#10;    const today = new Date().toISOString().split('T')[0];&#10;    const newSolicitacao: Solicitacao = {&#10;      idSolicitacao: uuidv4(),&#10;      cdSolicitante: [email.fromEmail],&#10;      dsAssunto: `Solicitação baseada em email: ${email.subject}`,&#10;      cdIdentificacao: `EMAIL-${email.id}`,&#10;      dsDescricao: `Este email requer atenção:\n\nDe: ${email.from} &lt;${email.fromEmail}&gt;\nData: ${email.date}\nAssunto: ${email.subject}\n\nConteúdo do email:\n${email.content.replace(/&lt;[^&gt;]*&gt;/g, '')}`,&#10;      dsAnexos: email.attachments.map(attachment =&gt; attachment?.ds_nome_anexo || 'Anexo'),&#10;      status: 'pendente',&#10;      dtCriacao: today,&#10;      idResponsavel: undefined&#10;    };&#10;    return newSolicitacao;&#10;  };&#10;&#10;  // Show error toast if API call fails&#10;  useEffect(() =&gt; {&#10;    if (error &amp;&amp; !isSentEmail) {&#10;      toast({&#10;        title: &quot;Erro ao carregar email&quot;,&#10;        description: &quot;Não foi possível carregar os detalhes do email. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    }&#10;  }, [error, toast, isSentEmail]);&#10;&#10;  // Loading state&#10;  if ((apiLoading &amp;&amp; !isSentEmail &amp;&amp; !isMockEmail) || (isLoading &amp;&amp; !isMockEmail)) {&#10;    return (&#10;      &lt;div className=&quot;flex-1 bg-white flex flex-col h-full items-center justify-center&quot;&gt;&#10;        &lt;Loader2 className=&quot;h-8 w-8 text-blue-500 animate-spin mb-4&quot; /&gt;&#10;        &lt;p className=&quot;text-gray-500&quot;&gt;Carregando email...&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Email not found state - only show if it's not a mock email and not a sent email&#10;  if (!isMockEmail &amp;&amp; !isSentEmail &amp;&amp; (!apiEmail || (isNaN(emailIdNumber)))) {&#10;    return (&#10;      &lt;div className=&quot;flex-1 bg-white flex items-center justify-center&quot;&gt;&#10;        &lt;p className=&quot;text-gray-500&quot;&gt;Email não encontrado&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // Map data to the format expected by the component&#10;  const email = isSentEmail ? {&#10;    id: sentEmail.id,&#10;    from: 'voce',&#10;    fromEmail: sentEmail.from || 'voce@example.com',&#10;    subject: sentEmail.subject,&#10;    content: sentEmail.content,&#10;    date: formatDate(sentEmail.date) || formatDate(new Date().toISOString()),&#10;    attachments: [] as Anexo[],&#10;    isStarred: false&#10;  } : isMockEmail ? {&#10;    id: mockEmail.id,&#10;    from: mockEmail.from,&#10;    fromEmail: mockEmail.fromEmail,&#10;    subject: mockEmail.subject,&#10;    content: mockEmail.content,&#10;    date: formatDate(mockEmail.date) || formatDate(new Date().toISOString()),&#10;    attachments: [] as Anexo[],&#10;    isStarred: false&#10;  } : {&#10;    id: apiEmail?.id_email.toString(),&#10;    from: apiEmail?.remetente.split(&quot;@&quot;)[0], // More user-friendly name&#10;    fromEmail: apiEmail?.remetente, // Placeholder email&#10;    subject: apiEmail?.assunto,&#10;    content: apiEmail?.conteudo || DEFAULT_EMAIL_CONTENT,&#10;    date: formatDate(apiEmail?.prazo_resposta) || formatDate(new Date().toISOString()), // Use prazo_resposta or current date&#10;    attachments: [] as Anexo[], // API doesn't have attachments yet&#10;    isStarred: false // API doesn't have this concept yet&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex-1 bg-white flex flex-col overflow-y-auto h-full max-h-full&quot;&gt;&#10;      {/* Email Header */}&#10;      &lt;div className=&quot;p-6 border-b border-gray-200&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={onClose}&gt;&#10;              &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;            &lt;/Button&gt;&#10;            &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;              &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;DropdownMenu&gt;&#10;              &lt;DropdownMenuTrigger asChild&gt;&#10;                &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                  &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;/Button&gt;&#10;              &lt;/DropdownMenuTrigger&gt;&#10;              &lt;DropdownMenuContent&gt;&#10;                &lt;DropdownMenuItem&gt;Marcar como não lido&lt;/DropdownMenuItem&gt;&#10;                &lt;DropdownMenuItem&gt;Adicionar etiqueta&lt;/DropdownMenuItem&gt;&#10;                &lt;DropdownMenuItem&gt;Imprimir&lt;/DropdownMenuItem&gt;&#10;                &lt;DropdownMenuItem&gt;Reportar spam&lt;/DropdownMenuItem&gt;&#10;              &lt;/DropdownMenuContent&gt;&#10;            &lt;/DropdownMenu&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;h1 className=&quot;text-2xl font-bold text-gray-900 mb-2&quot;&gt;{email.subject}&lt;/h1&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-600&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Avatar className=&quot;h-8 w-8&quot;&gt;&#10;              &lt;AvatarFallback&gt;MS&lt;/AvatarFallback&gt;&#10;            &lt;/Avatar&gt;&#10;            &lt;div&gt;&#10;              &lt;div className=&quot;font-medium text-gray-900&quot;&gt;{email.from}&lt;/div&gt;&#10;              &lt;div className=&quot;text-gray-500&quot;&gt;{email.fromEmail}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex-1 p-6&quot;&gt;&#10;        &lt;div&#10;          className=&quot;prose max-w-none&quot;&#10;          dangerouslySetInnerHTML={{ __html: email.content }}&#10;        /&gt;&#10;&#10;        {email.attachments.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-8 p-4 bg-gray-50 rounded-3xl&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 mb-3 flex items-center&quot;&gt;&#10;              &lt;Paperclip className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Anexos ({email.attachments.length})&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              {email.attachments.map((attachment, index) =&gt; (&#10;                &lt;div key={index} className=&quot;flex items-center justify-between p-2 bg-white rounded border&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                    &lt;div className=&quot;w-8 h-8 bg-blue-100 rounded flex items-center justify-center&quot;&gt;&#10;                      &lt;Paperclip className=&quot;h-4 w-4 text-blue-600&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;font-medium text-sm&quot;&gt;{attachment?.ds_nome_anexo || &quot;Arquivo&quot;}&lt;/div&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500&quot;&gt;{attachment?.nm_tamanho_anexo || &quot;20MB&quot;}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                    &lt;Download className=&quot;h-4 w-4&quot; /&gt;&#10;                  &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6 mt-auto&quot;&gt;&#10;        &lt;div className=&quot;flex items-center gap-2 w-full&quot;&gt;&#10;          &lt;Button &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;            onClick={() =&gt; {&#10;              const solicitation = createSolicitacaoFromEmail();&#10;              setNewSolicitacao(solicitation);&#10;              setShowSolicitacaoModal(true);&#10;            }}&#10;          &gt;&#10;            &lt;FileText className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Criar Solicitação&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {showSolicitacaoModal &amp;&amp; (&#10;        &lt;SolicitacaoModal&#10;          solicitacao={newSolicitacao}&#10;          onClose={() =&gt; {&#10;            setShowSolicitacaoModal(false);&#10;            setNewSolicitacao(null);&#10;          }}&#10;          onSave={(solicitacao) =&gt; {&#10;            toast({&#10;              title: &quot;Solicitação criada&quot;,&#10;              description: &quot;A solicitação foi criada com sucesso.&quot;,&#10;            });&#10;            setShowSolicitacaoModal(false);&#10;            setNewSolicitacao(null);&#10;          }}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import {useEffect, useState} from 'react';&#13;&#10;import {ArrowLeftIcon, DownloadIcon, SpinnerIcon, DotsThreeVerticalIcon, PaperclipIcon, TrashIcon, FileTextIcon} from '@phosphor-icons/react';&#13;&#10;import {Button} from '@/components/ui/button';&#13;&#10;import {Avatar, AvatarFallback, AvatarImage} from '@/components/ui/avatar';&#13;&#10;import {DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger,} from '@/components/ui/dropdown-menu';&#13;&#10;import {useEmail} from '@/api/hooks';&#13;&#10;import {useToast} from '@/hooks/use-toast';&#13;&#10;import {Anexo} from '@/api/types';&#13;&#10;import SolicitacaoModal from '@/components/solicitacoes/SolicitacaoModal';&#13;&#10;import { Solicitacao } from '@/lib/types';&#13;&#10;import { v4 as uuidv4 } from 'uuid';&#13;&#10;&#13;&#10;interface EmailDetailProps {&#13;&#10;  emailId: string;&#13;&#10;  onClose(): void;&#13;&#10;  onSend?: (email: {&#13;&#10;    to: string;&#13;&#10;    cc?: string;&#13;&#10;    bcc?: string;&#13;&#10;    subject: string;&#13;&#10;    content: string;&#13;&#10;    date: string;&#13;&#10;  }) =&gt; void;&#13;&#10;  emailConfig?: {&#13;&#10;    defaultMessages: {&#13;&#10;      [key: string]: string;&#13;&#10;    };&#13;&#10;    defaultFooter: string;&#13;&#10;  };&#13;&#10;}&#13;&#10;&#13;&#10;// Helper function to format date&#13;&#10;const formatDate = (dateString?: string): string =&gt; {&#13;&#10;  if (!dateString) return '';&#13;&#10;&#13;&#10;  const date = new Date(dateString);&#13;&#10;&#13;&#10;  // Format as full date and time&#13;&#10;  return date.toLocaleDateString('pt-BR', { &#13;&#10;    year: 'numeric', &#13;&#10;    month: 'long', &#13;&#10;    day: 'numeric',&#13;&#10;    hour: '2-digit',&#13;&#10;    minute: '2-digit'&#13;&#10;  });&#13;&#10;};&#13;&#10;&#13;&#10;// Mock emails data - same as in EmailList&#13;&#10;const MOCK_EMAILS = [&#13;&#10;  {&#13;&#10;    id: 'mock-1',&#13;&#10;    from: 'João Silva',&#13;&#10;    fromEmail: 'joao@empresa.com',&#13;&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#13;&#10;    content: `Prezado(a),&#13;&#10;&#13;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#13;&#10;&#13;&#10;Os principais destaques são:&#13;&#10;• Crescimento de 15% em relação ao mês anterior&#13;&#10;• Aumento de 8% no número de novos clientes&#13;&#10;• Melhoria na taxa de conversão para 12%&#13;&#10;&#13;&#10;Principais produtos vendidos:&#13;&#10;1. Produto A - R$ 45.000&#13;&#10;2. Produto B - R$ 32.000  &#13;&#10;3. Produto C - R$ 28.500&#13;&#10;&#13;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#13;&#10;&#13;&#10;Atenciosamente,&#13;&#10;João Silva&#13;&#10;Gerente Comercial&#13;&#10;(11) 9999-8888`,&#13;&#10;    date: new Date().toISOString(),&#13;&#10;    isStarred: true,&#13;&#10;    attachments: []&#13;&#10;  },&#13;&#10;  {&#13;&#10;    id: 'mock-2',&#13;&#10;    from: 'Maria Santos',&#13;&#10;    fromEmail: 'maria@consultoria.com',&#13;&#10;    subject: 'Proposta de consultoria em marketing digital',&#13;&#10;    content: `Olá!&#13;&#10;&#13;&#10;Espero que esteja bem!&#13;&#10;&#13;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#13;&#10;&#13;&#10;Nossa experiência inclui:&#13;&#10;• Gestão de redes sociais&#13;&#10;• Campanhas no Google Ads&#13;&#10;• SEO e marketing de conteúdo&#13;&#10;• E-mail marketing&#13;&#10;• Análise de métricas e ROI&#13;&#10;&#13;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#13;&#10;&#13;&#10;Quando seria um bom momento para conversarmos?&#13;&#10;&#13;&#10;Abraços,&#13;&#10;Maria Santos&#13;&#10;Consultora em Marketing Digital&#13;&#10;maria@consultoria.com&#13;&#10;(11) 8888-7777`,&#13;&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),&#13;&#10;    isStarred: false,&#13;&#10;    attachments: []&#13;&#10;  },&#13;&#10;  {&#13;&#10;    id: 'mock-3',&#13;&#10;    from: 'Carlos Oliveira',&#13;&#10;    fromEmail: 'carlos@fornecedor.com',&#13;&#10;    subject: 'Confirmação do pedido #2024-1156',&#13;&#10;    content: `Prezado Cliente,&#13;&#10;&#13;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#13;&#10;&#13;&#10;Detalhes do pedido:&#13;&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#13;&#10;• Valor total: R$ 2.850,00&#13;&#10;• Prazo de entrega: 5 dias úteis&#13;&#10;• Forma de pagamento: Boleto bancário&#13;&#10;&#13;&#10;Itens do pedido:&#13;&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#13;&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#13;&#10;&#13;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#13;&#10;&#13;&#10;Em caso de dúvidas, entre em contato conosco.&#13;&#10;&#13;&#10;Atenciosamente,&#13;&#10;Carlos Oliveira&#13;&#10;Departamento de Vendas&#13;&#10;carlos@fornecedor.com&#13;&#10;(11) 7777-6666`,&#13;&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),&#13;&#10;    isStarred: false,&#13;&#10;    attachments: []&#13;&#10;  },&#13;&#10;  {&#13;&#10;    id: 'mock-4',&#13;&#10;    from: 'Ana Costa',&#13;&#10;    fromEmail: 'ana@juridico.com',&#13;&#10;    subject: 'Revisão do contrato de prestação de serviços',&#13;&#10;    content: `Prezado(a),&#13;&#10;&#13;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#13;&#10;&#13;&#10;Pontos que precisam de atenção:&#13;&#10;1. Cláusula 5.2 - Prazo de pagamento&#13;&#10;2. Cláusula 8.1 - Rescisão contratual  &#13;&#10;3. Cláusula 12 - Foro de eleição&#13;&#10;&#13;&#10;Recomendações:&#13;&#10;• Incluir cláusula de reajuste anual&#13;&#10;• Especificar melhor as penalidades por atraso&#13;&#10;• Definir critérios objetivos para avaliação de performance&#13;&#10;&#13;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#13;&#10;&#13;&#10;Podemos agendar uma reunião para discutir estas alterações?&#13;&#10;&#13;&#10;Cordialmente,&#13;&#10;Ana Costa&#13;&#10;Advogada&#13;&#10;OAB/SP 123.456&#13;&#10;ana@juridico.com&#13;&#10;(11) 6666-5555`,&#13;&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),&#13;&#10;    isStarred: true,&#13;&#10;    attachments: []&#13;&#10;  },&#13;&#10;  {&#13;&#10;    id: 'mock-5',&#13;&#10;    from: 'Ricardo Ferreira',&#13;&#10;    fromEmail: 'ricardo@ti.com',&#13;&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#13;&#10;    content: `Prezados usuários,&#13;&#10;&#13;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#13;&#10;&#13;&#10;Durante este período:&#13;&#10;• O sistema ficará indisponível&#13;&#10;• Não será possível acessar dados&#13;&#10;• Funcionalidades estarão offline&#13;&#10;&#13;&#10;Melhorias que serão implementadas:&#13;&#10;• Otimização da performance&#13;&#10;• Correção de bugs reportados&#13;&#10;• Atualização de segurança&#13;&#10;• Nova funcionalidade de relatórios&#13;&#10;&#13;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#13;&#10;&#13;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#13;&#10;&#13;&#10;Obrigado pela compreensão.&#13;&#10;&#13;&#10;Equipe de TI&#13;&#10;Ricardo Ferreira&#13;&#10;Coordenador de Sistemas&#13;&#10;ricardo@ti.com`,&#13;&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),&#13;&#10;    isStarred: false,&#13;&#10;    attachments: []&#13;&#10;  }&#13;&#10;];&#13;&#10;&#13;&#10;// Sample HTML content for emails that don't have a response&#13;&#10;const DEFAULT_EMAIL_CONTENT = `&#13;&#10;  &lt;p&gt;Este email não possui conteúdo detalhado.&lt;/p&gt;&#13;&#10;  &lt;p&gt;Em uma aplicação real, o conteúdo completo do email seria exibido aqui.&lt;/p&gt;&#13;&#10;`;&#13;&#10;export default function EmailDetail({&#13;&#10;  emailId,&#13;&#10;  onClose,&#13;&#10;  onSend,&#13;&#10;  emailConfig&#13;&#10;}: EmailDetailProps) {&#13;&#10;  const { toast } = useToast();&#13;&#10;  const [sentEmail, setSentEmail] = useState&lt;any&gt;(null);&#13;&#10;  const [isSentEmail, setIsSentEmail] = useState(false);&#13;&#10;  const [mockEmail, setMockEmail] = useState&lt;any&gt;(null);&#13;&#10;  const [isMockEmail, setIsMockEmail] = useState(false);&#13;&#10;  const [isLoading, setIsLoading] = useState(true);&#13;&#10;  const emailIdNumber = parseInt(emailId, 10);&#13;&#10;  const [showSolicitacaoModal, setShowSolicitacaoModal] = useState(false);&#13;&#10;  const [newSolicitacao, setNewSolicitacao] = useState&lt;Solicitacao | null&gt;(null);&#13;&#10;&#13;&#10;  // Check if this is a mock email&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    const foundMockEmail = MOCK_EMAILS.find(email =&gt; email.id === emailId);&#13;&#10;    if (foundMockEmail) {&#13;&#10;      setMockEmail(foundMockEmail);&#13;&#10;      setIsMockEmail(true);&#13;&#10;      setIsLoading(false);&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    // Check if this is a sent email from localStorage&#13;&#10;    if (typeof window !== 'undefined') {&#13;&#10;      const savedEmails = localStorage.getItem('sentEmails');&#13;&#10;      if (savedEmails) {&#13;&#10;        const sentEmails = JSON.parse(savedEmails);&#13;&#10;        const foundEmail = sentEmails.find((email: any) =&gt; email.id === emailId);&#13;&#10;        if (foundEmail) {&#13;&#10;          setSentEmail(foundEmail);&#13;&#10;          setIsSentEmail(true);&#13;&#10;        }&#13;&#10;      }&#13;&#10;      setIsLoading(false);&#13;&#10;    }&#13;&#10;  }, [emailId]);&#13;&#10;&#13;&#10;  // Only fetch from API if not a sent email, not a mock email, and we have a valid number&#13;&#10;  const { data: apiEmail, loading: apiLoading, error } = useEmail(&#13;&#10;    !isSentEmail &amp;&amp; !isMockEmail &amp;&amp; !isNaN(emailIdNumber) ? emailIdNumber : 0&#13;&#10;  );&#13;&#10;&#13;&#10;  // Function to create a new solicitation from email&#13;&#10;  const createSolicitacaoFromEmail = () =&gt; {&#13;&#10;    const today = new Date().toISOString().split('T')[0];&#13;&#10;    const newSolicitacao: Solicitacao = {&#13;&#10;      idSolicitacao: uuidv4(),&#13;&#10;      cdSolicitante: [email.fromEmail],&#13;&#10;      dsAssunto: `Solicitação baseada em email: ${email.subject}`,&#13;&#10;      cdIdentificacao: `EMAIL-${email.id}`,&#13;&#10;      dsDescricao: `Este email requer atenção:\n\nDe: ${email.from} &lt;${email.fromEmail}&gt;\nData: ${email.date}\nAssunto: ${email.subject}\n\nConteúdo do email:\n${email.content.replace(/&lt;[^&gt;]*&gt;/g, '')}`,&#13;&#10;      dsAnexos: email.attachments.map(attachment =&gt; attachment?.ds_nome_anexo || 'Anexo'),&#13;&#10;      status: 'pendente',&#13;&#10;      dtCriacao: today,&#13;&#10;      idResponsavel: undefined&#13;&#10;    };&#13;&#10;    return newSolicitacao;&#13;&#10;  };&#13;&#10;&#13;&#10;  // Show error toast if API call fails&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    if (error &amp;&amp; !isSentEmail) {&#13;&#10;      toast({&#13;&#10;        title: &quot;Erro ao carregar email&quot;,&#13;&#10;        description: &quot;Não foi possível carregar os detalhes do email. Tente novamente mais tarde.&quot;,&#13;&#10;        variant: &quot;destructive&quot;,&#13;&#10;      });&#13;&#10;    }&#13;&#10;  }, [error, toast, isSentEmail]);&#13;&#10;&#13;&#10;  // Loading state&#13;&#10;  if ((apiLoading &amp;&amp; !isSentEmail &amp;&amp; !isMockEmail) || (isLoading &amp;&amp; !isMockEmail)) {&#13;&#10;    return (&#13;&#10;      &lt;div className=&quot;flex-1 bg-white flex flex-col h-full items-center justify-center&quot;&gt;&#13;&#10;        &lt;SpinnerIcon className=&quot;h-8 w-8 text-blue-500 animate-spin mb-4&quot; /&gt;&#13;&#10;        &lt;p className=&quot;text-gray-500&quot;&gt;Carregando email...&lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  // Email not found state - only show if it's not a mock email and not a sent email&#13;&#10;  if (!isMockEmail &amp;&amp; !isSentEmail &amp;&amp; (!apiEmail || (isNaN(emailIdNumber)))) {&#13;&#10;    return (&#13;&#10;      &lt;div className=&quot;flex-1 bg-white flex items-center justify-center&quot;&gt;&#13;&#10;        &lt;p className=&quot;text-gray-500&quot;&gt;Email não encontrado&lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  // Map data to the format expected by the component&#13;&#10;  const email = isSentEmail ? {&#13;&#10;    id: sentEmail.id,&#13;&#10;    from: 'voce',&#13;&#10;    fromEmail: sentEmail.from || 'voce@example.com',&#13;&#10;    subject: sentEmail.subject,&#13;&#10;    content: sentEmail.content,&#13;&#10;    date: formatDate(sentEmail.date) || formatDate(new Date().toISOString()),&#13;&#10;    attachments: [] as Anexo[],&#13;&#10;    isStarred: false&#13;&#10;  } : isMockEmail ? {&#13;&#10;    id: mockEmail.id,&#13;&#10;    from: mockEmail.from,&#13;&#10;    fromEmail: mockEmail.fromEmail,&#13;&#10;    subject: mockEmail.subject,&#13;&#10;    content: mockEmail.content,&#13;&#10;    date: formatDate(mockEmail.date) || formatDate(new Date().toISOString()),&#13;&#10;    attachments: [] as Anexo[],&#13;&#10;    isStarred: false&#13;&#10;  } : {&#13;&#10;    id: apiEmail?.id_email.toString(),&#13;&#10;    from: apiEmail?.remetente.split(&quot;@&quot;)[0], // More user-friendly name&#13;&#10;    fromEmail: apiEmail?.remetente, // Placeholder email&#13;&#10;    subject: apiEmail?.assunto,&#13;&#10;    content: apiEmail?.conteudo || DEFAULT_EMAIL_CONTENT,&#13;&#10;    date: formatDate(apiEmail?.prazo_resposta) || formatDate(new Date().toISOString()), // Use prazo_resposta or current date&#13;&#10;    attachments: [] as Anexo[], // API doesn't have attachments yet&#13;&#10;    isStarred: false // API doesn't have this concept yet&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;flex-1 bg-white flex flex-col overflow-y-auto h-full max-h-full&quot;&gt;&#13;&#10;      {/* Email Header */}&#13;&#10;      &lt;div className=&quot;p-6 border-b border-gray-200&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;            &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={onClose}&gt;&#13;&#10;              &lt;ArrowLeftIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;            &lt;/Button&gt;&#13;&#10;            &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#13;&#10;              &lt;TrashIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;            &lt;/Button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div&gt;&#13;&#10;            &lt;DropdownMenu&gt;&#13;&#10;              &lt;DropdownMenuTrigger asChild&gt;&#13;&#10;                &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#13;&#10;                  &lt;DotsThreeVerticalIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;                &lt;/Button&gt;&#13;&#10;              &lt;/DropdownMenuTrigger&gt;&#13;&#10;              &lt;DropdownMenuContent&gt;&#13;&#10;                &lt;DropdownMenuItem&gt;Marcar como não lido&lt;/DropdownMenuItem&gt;&#13;&#10;                &lt;DropdownMenuItem&gt;Adicionar etiqueta&lt;/DropdownMenuItem&gt;&#13;&#10;                &lt;DropdownMenuItem&gt;Imprimir&lt;/DropdownMenuItem&gt;&#13;&#10;                &lt;DropdownMenuItem&gt;Reportar spam&lt;/DropdownMenuItem&gt;&#13;&#10;              &lt;/DropdownMenuContent&gt;&#13;&#10;            &lt;/DropdownMenu&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;h1 className=&quot;text-2xl font-bold text-gray-900 mb-2&quot;&gt;{email.subject}&lt;/h1&gt;&#13;&#10;&#13;&#10;        &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-600&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;            &lt;Avatar className=&quot;h-8 w-8&quot;&gt;&#13;&#10;              &lt;AvatarFallback&gt;MS&lt;/AvatarFallback&gt;&#13;&#10;            &lt;/Avatar&gt;&#13;&#10;            &lt;div&gt;&#13;&#10;              &lt;div className=&quot;font-medium text-gray-900&quot;&gt;{email.from}&lt;/div&gt;&#13;&#10;              &lt;div className=&quot;text-gray-500&quot;&gt;{email.fromEmail}&lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;div className=&quot;flex-1 p-6&quot;&gt;&#13;&#10;        &lt;div&#13;&#10;          className=&quot;prose max-w-none&quot;&#13;&#10;          dangerouslySetInnerHTML={{ __html: email.content }}&#13;&#10;        /&gt;&#13;&#10;&#13;&#10;        {email.attachments.length &gt; 0 &amp;&amp; (&#13;&#10;          &lt;div className=&quot;mt-8 p-4 bg-gray-50 rounded-3xl&quot;&gt;&#13;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 mb-3 flex items-center&quot;&gt;&#13;&#10;              &lt;PaperclipIcon className=&quot;h-4 w-4 mr-2&quot; /&gt;&#13;&#10;              Anexos ({email.attachments.length})&#13;&#10;            &lt;/h3&gt;&#13;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#13;&#10;              {email.attachments.map((attachment, index) =&gt; (&#13;&#10;                &lt;div key={index} className=&quot;flex items-center justify-between p-2 bg-white rounded border&quot;&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#13;&#10;                    &lt;div className=&quot;w-8 h-8 bg-blue-100 rounded flex items-center justify-center&quot;&gt;&#13;&#10;                      &lt;PaperclipIcon className=&quot;h-4 w-4 text-blue-600&quot; /&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;div&gt;&#13;&#10;                      &lt;div className=&quot;font-medium text-sm&quot;&gt;{attachment?.ds_nome_anexo || &quot;Arquivo&quot;}&lt;/div&gt;&#13;&#10;                      &lt;div className=&quot;text-xs text-gray-500&quot;&gt;{attachment?.nm_tamanho_anexo || &quot;20MB&quot;}&lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#13;&#10;                    &lt;DownloadIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;                  &lt;/Button&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        )}&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;div className=&quot;p-6 mt-auto&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex items-center gap-2 w-full&quot;&gt;&#13;&#10;          &lt;Button &#13;&#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#13;&#10;            onClick={() =&gt; {&#13;&#10;              const solicitation = createSolicitacaoFromEmail();&#13;&#10;              setNewSolicitacao(solicitation);&#13;&#10;              setShowSolicitacaoModal(true);&#13;&#10;            }}&#13;&#10;          &gt;&#13;&#10;            &lt;FileTextIcon className=&quot;h-4 w-4 mr-2&quot; /&gt;&#13;&#10;            Criar Solicitação&#13;&#10;          &lt;/Button&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {showSolicitacaoModal &amp;&amp; (&#13;&#10;        &lt;SolicitacaoModal&#13;&#10;          solicitacao={newSolicitacao}&#13;&#10;          onClose={() =&gt; {&#13;&#10;            setShowSolicitacaoModal(false);&#13;&#10;            setNewSolicitacao(null);&#13;&#10;          }}&#13;&#10;          onSave={(solicitacao) =&gt; {&#13;&#10;            toast({&#13;&#10;              title: &quot;Solicitação criada&quot;,&#13;&#10;              description: &quot;A solicitação foi criada com sucesso.&quot;,&#13;&#10;            });&#13;&#10;            setShowSolicitacaoModal(false);&#13;&#10;            setNewSolicitacao(null);&#13;&#10;          }}&#13;&#10;        /&gt;&#13;&#10;      )}&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/email/EmailList.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/email/EmailList.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, {useState, useCallback, useEffect, useMemo} from 'react';&#10;import {Paperclip, RotateCw, Trash2, Loader2, Mail} from 'lucide-react';&#10;import {Button} from '@/components/ui/button';&#10;import {Checkbox} from '@/components/ui/checkbox';&#10;import {cn} from '@/lib/utils';&#10;import {useEmails} from '@/api/hooks';&#10;import {Email as ApiEmail} from '@/api/types';&#10;import {useToast} from '@/hooks/use-toast';&#10;import {apiClient} from '@/api/client';&#10;&#10;interface Email {&#10;  id: string;&#10;  from: string;&#10;  subject: string;&#10;  preview: string;&#10;  date: string;&#10;  isRead: boolean;&#10;  hasAttachment: boolean;&#10;  labels: string[];&#10;  content?: string;&#10;}&#10;&#10;const MOCK_EMAILS = [&#10;  {&#10;    id: 'mock-1',&#10;    from: 'João Silva &lt;joao@empresa.com&gt;',&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#10;    preview: 'Segue em anexo o relatório mensal de vendas referente ao mês de novembro. Os resultados mostram um crescimento de 15% em relação ao mês anterior...',&#10;    date: new Date().toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['importante', 'trabalho'],&#10;    content: `Prezado(a),&#10;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#10;&#10;Os principais destaques são:&#10;• Crescimento de 15% em relação ao mês anterior&#10;• Aumento de 8% no número de novos clientes&#10;• Melhoria na taxa de conversão para 12%&#10;&#10;Principais produtos vendidos:&#10;1. Produto A - R$ 45.000&#10;2. Produto B - R$ 32.000  &#10;3. Produto C - R$ 28.500&#10;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#10;&#10;Atenciosamente,&#10;João Silva&#10;Gerente Comercial&#10;(11) 9999-8888`&#10;  },&#10;  {&#10;    id: 'mock-2',&#10;    from: 'Maria Santos &lt;maria@consultoria.com&gt;',&#10;    subject: 'Proposta de consultoria em marketing digital',&#10;    preview: 'Espero que esteja bem! Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa...',&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['proposta'],&#10;    content: `Olá!&#10;&#10;Espero que esteja bem!&#10;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#10;&#10;Nossa experiência inclui:&#10;• Gestão de redes sociais&#10;• Campanhas no Google Ads&#10;• SEO e marketing de conteúdo&#10;• E-mail marketing&#10;• Análise de métricas e ROI&#10;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#10;&#10;Quando seria um bom momento para conversarmos?&#10;&#10;Abraços,&#10;Maria Santos&#10;Consultora em Marketing Digital&#10;maria@consultoria.com&#10;(11) 8888-7777`&#10;  },&#10;  {&#10;    id: 'mock-3',&#10;    from: 'Carlos Oliveira &lt;carlos@fornecedor.com&gt;',&#10;    subject: 'Confirmação do pedido #2024-1156',&#10;    preview: 'Confirmamos o recebimento do seu pedido #2024-1156. Prazo de entrega estimado: 5 dias úteis...',&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['pedido'],&#10;    content: `Prezado Cliente,&#10;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#10;&#10;Detalhes do pedido:&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#10;• Valor total: R$ 2.850,00&#10;• Prazo de entrega: 5 dias úteis&#10;• Forma de pagamento: Boleto banceiro&#10;&#10;Itens do pedido:&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#10;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#10;&#10;Em caso de dúvidas, entre em contato conosco.&#10;&#10;Atenciosamente,&#10;Carlos Oliveira&#10;Departamento de Vendas&#10;carlos@fornecedor.com&#10;(11) 7777-6666`&#10;  },&#10;  {&#10;    id: 'mock-4',&#10;    from: 'Ana Costa &lt;ana@juridico.com&gt;',&#10;    subject: 'Revisão do contrato de prestação de serviços',&#10;    preview: 'Conforme solicitado, segue a revisão do contrato de prestação de serviços. Identifiquei alguns pontos que precisam de atenção...',&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: true,&#10;    labels: ['jurídico', 'urgente'],&#10;    content: `Prezado(a),&#10;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#10;&#10;Pontos que precisam de atenção:&#10;1. Cláusula 5.2 - Prazo de pagamento&#10;2. Cláusula 8.1 - Rescisão contratual  &#10;3. Cláusula 12 - Foro de eleição&#10;&#10;Recomendações:&#10;• Incluir cláusula de reajuste anual&#10;• Especificar melhor as penalidades por atraso&#10;• Definir critérios objetivos para avaliação de performance&#10;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#10;&#10;Podemos agendar uma reunião para discutir estas alterações?&#10;&#10;Cordialmente,&#10;Ana Costa&#10;Advogada&#10;OAB/SP 123.456&#10;ana@juridico.com&#10;(11) 6666-5555`&#10;  },&#10;  {&#10;    id: 'mock-5',&#10;    from: 'Ricardo Ferreira &lt;ricardo@ti.com&gt;',&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#10;    preview: 'Informamos que será realizada manutenção programada no sistema no sábado, 09/12, das 02h às 06h...',&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['sistema', 'manutenção'],&#10;    content: `Prezados usuários,&#10;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#10;&#10;Durante este período:&#10;• O sistema ficará indisponível&#10;• Não será possível acessar dados&#10;• Funcionalidades estarão offline&#10;&#10;Melhorias que serão implementadas:&#10;• Otimização da performance&#10;• Correção de bugs reportados&#10;• Atualização de segurança&#10;• Nova funcionalidade de relatórios&#10;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#10;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#10;&#10;Obrigado pela compreensão.&#10;&#10;Equipe de TI&#10;Ricardo Ferreira&#10;Coordenador de Sistemas&#10;ricardo@ti.com`&#10;  }&#10;];&#10;&#10;const formatDate = (dateString?: string): string =&gt; {&#10;  if (!dateString) return '';&#10;&#10;  try {&#10;    const date = new Date(dateString);&#10;&#10;    if (isNaN(date.getTime())) return '';&#10;&#10;    const day = date.getDate().toString().padStart(2, '0');&#10;    const month = (date.getMonth() + 1).toString().padStart(2, '0');&#10;    const year = date.getFullYear();&#10;    const hours = date.getHours().toString().padStart(2, '0');&#10;    const minutes = date.getMinutes().toString().padStart(2, '0');&#10;&#10;    return `${day}/${month}/${year} ${hours}:${minutes}`;&#10;  } catch (error) {&#10;    console.warn('Invalid date:', dateString);&#10;    return '';&#10;  }&#10;};&#10;&#10;interface SentEmail {&#10;  id: string;&#10;  to: string;&#10;  cc?: string;&#10;  bcc?: string;&#10;  subject: string;&#10;  content: string;&#10;  date: string;&#10;  from: string;&#10;}&#10;&#10;interface EmailListProps {&#10;  folder: string;&#10;  searchQuery: string;&#10;  selectedEmail: string | null;&#10;  onEmailSelect: (emailId: string) =&gt; void;&#10;  sentEmails?: SentEmail[];&#10;  onUnreadCountChange?: (count: number) =&gt; void;&#10;}&#10;&#10;const EmailItem = React.memo&lt;{&#10;  email: Email;&#10;  isSelected: boolean;&#10;  isChecked: boolean;&#10;  onSelect(): void;&#10;  onToggleCheck(): void;&#10;}&gt;(({ email, isSelected, isChecked, onSelect, onToggleCheck }) =&gt; {&#10;  const handleClick = useCallback((e: React.MouseEvent) =&gt; {&#10;    e.preventDefault();&#10;    onSelect();&#10;  }, [onSelect]);&#10;&#10;  const handleCheckboxClick = useCallback((e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    onToggleCheck();&#10;  }, [onToggleCheck]);&#10;&#10;  return (&#10;    &lt;div&#10;      className={cn(&#10;        &quot;p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 transition-colors&quot;,&#10;        isSelected &amp;&amp; &quot;bg-blue-100&quot;,&#10;        !email.isRead &amp;&amp; &quot;bg-blue-50/30&quot;&#10;      )}&#10;      onClick={handleClick}&#10;    &gt;&#10;      &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;        &lt;Checkbox&#10;          checked={isChecked}&#10;          onCheckedChange={onToggleCheck}&#10;          onClick={handleCheckboxClick}&#10;        /&gt;&#10;        &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-1&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;span className=&quot;text-sm truncate font-semibold text-gray-700&quot;&gt;&#10;                {email.from}&#10;              &lt;/span&gt;&#10;              {email.hasAttachment &amp;&amp; (&#10;                &lt;Paperclip className=&quot;h-3 w-3 text-gray-400&quot;/&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &lt;span className=&quot;text-xs text-gray-500&quot;&gt;{email.date}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;h3 className=&quot;text-sm mb-1 truncate font-bold text-gray-900&quot;&gt;&#10;            {email.subject}&#10;          &lt;/h3&gt;&#10;&#10;          &lt;p className=&quot;text-xs text-gray-500 line-clamp-2&quot;&gt;&#10;            {email.preview}&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;});&#10;&#10;EmailItem.displayName = 'EmailItem';&#10;&#10;function EmailList({&#10;  folder,&#10;  searchQuery,&#10;  selectedEmail,&#10;  onEmailSelect,&#10;  sentEmails = [],&#10;  onUnreadCountChange&#10;}: EmailListProps) {&#10;  const [selectedEmails, setSelectedEmails] = useState&lt;string[]&gt;([]);&#10;  const [syncLoading, setSyncLoading] = useState(false);&#10;  const {toast} = useToast();&#10;&#10;  const {data, error, loading, refetch} = useEmails();&#10;&#10;  const apiEmails = useMemo((): Email[] =&gt; {&#10;    if (!data?.items) return [];&#10;&#10;    return data.items.map((apiEmail: ApiEmail) =&gt; ({&#10;      id: apiEmail.id_email.toString(),&#10;      from: apiEmail.remetente || 'Remetente desconhecido',&#10;      subject: apiEmail.assunto || 'Sem assunto',&#10;      preview: apiEmail.conteudo || '',&#10;      date: formatDate(apiEmail.prazo_resposta),&#10;      isRead: apiEmail.tp_status !== 'NOVO',&#10;      hasAttachment: false,&#10;      labels: [],&#10;    }));&#10;  }, [data?.items]);&#10;&#10;  const formattedMockEmails = useMemo(() =&gt; {&#10;    return MOCK_EMAILS.map(email =&gt; ({&#10;      ...email,&#10;      date: formatDate(email.date)&#10;    }));&#10;  }, []);&#10;&#10;  const emails = useMemo((): Email[] =&gt; {&#10;    if (folder === 'sent') {&#10;      return sentEmails.map(email =&gt; ({&#10;        id: email.id,&#10;        from: 'Você',&#10;        subject: email.subject || 'Sem assunto',&#10;        preview: email.content?.replace(/&lt;[^&gt;]*&gt;/g, '') || '',&#10;        date: formatDate(email.date),&#10;        isRead: true,&#10;        hasAttachment: false,&#10;        labels: [],&#10;      }));&#10;    }&#10;&#10;    if (folder === 'inbox') {&#10;      return [...formattedMockEmails, ...apiEmails];&#10;    }&#10;&#10;    return apiEmails;&#10;  }, [folder, sentEmails, formattedMockEmails, apiEmails]);&#10;&#10;  const filteredEmails = useMemo(() =&gt; {&#10;    if (!searchQuery?.trim()) {&#10;      return emails;&#10;    }&#10;&#10;    const query = searchQuery.toLowerCase().trim();&#10;    return emails.filter(email =&gt;&#10;      email?.subject?.toLowerCase().includes(query) ||&#10;      email?.from?.toLowerCase().includes(query) ||&#10;      email?.preview?.toLowerCase().includes(query)&#10;    );&#10;  }, [emails, searchQuery]);&#10;&#10;  const syncAndFetchEmails = useCallback(async () =&gt; {&#10;    if (syncLoading) return;&#10;&#10;    try {&#10;      setSyncLoading(true);&#10;      await apiClient.sincronizarEmails();&#10;      await refetch();&#10;&#10;      toast({&#10;        title: &quot;Emails sincronizados&quot;,&#10;        description: &quot;Seus emails foram sincronizados com sucesso.&quot;,&#10;      });&#10;    } catch (err) {&#10;      console.error('Error syncing emails:', err);&#10;      toast({&#10;        title: &quot;Erro ao sincronizar emails&quot;,&#10;        description: &quot;Não foi possível sincronizar seus emails. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    } finally {&#10;      setSyncLoading(false);&#10;    }&#10;  }, [refetch, toast, syncLoading]);&#10;&#10;  const toggleEmailSelection = useCallback((emailId: string) =&gt; {&#10;    setSelectedEmails(prev =&gt; {&#10;      const newSelection = prev.includes(emailId)&#10;        ? prev.filter(id =&gt; id !== emailId)&#10;        : [...prev, emailId];&#10;      return newSelection;&#10;    });&#10;  }, []);&#10;&#10;  const selectAllEmails = useCallback(() =&gt; {&#10;    const allIds = filteredEmails.map(email =&gt; email.id);&#10;    setSelectedEmails(prev =&gt;&#10;      prev.length === allIds.length ? [] : allIds&#10;    );&#10;  }, [filteredEmails]);&#10;&#10;  const handleEmailSelect = useCallback((emailId: string) =&gt; {&#10;    if (selectedEmail === emailId) {&#10;      onEmailSelect('');&#10;    } else {&#10;      onEmailSelect(emailId);&#10;    }&#10;  }, [selectedEmail, onEmailSelect]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!onUnreadCountChange || folder !== 'inbox') return;&#10;&#10;    const updateCount = () =&gt; {&#10;      const allEmails = [...MOCK_EMAILS, ...apiEmails];&#10;      const unreadCount = allEmails.filter(email =&gt; !email.isRead).length;&#10;      const safeCount = Math.max(0, unreadCount);&#10;      onUnreadCountChange(safeCount);&#10;    };&#10;&#10;    if ('requestIdleCallback' in window) {&#10;      requestIdleCallback(updateCount);&#10;    } else {&#10;      setTimeout(updateCount, 0);&#10;    }&#10;  }, [apiEmails, onUnreadCountChange, folder]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (error &amp;&amp; !loading) {&#10;      toast({&#10;        title: &quot;Erro ao carregar emails&quot;,&#10;        description: &quot;Não foi possível carregar os emails. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    }&#10;  }, [error, loading, toast]);&#10;&#10;  return (&#10;    &lt;div className=&quot;flex-1 flex flex-col&quot;&gt;&#10;      {/* Email Actions */}&#10;      &lt;div className=&quot;p-4 border-b border-gray-200&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between min-h-[2rem]&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Checkbox&#10;              checked={selectedEmails.length === filteredEmails.length &amp;&amp; filteredEmails.length &gt; 0}&#10;              onCheckedChange={selectAllEmails}&#10;              disabled={loading || filteredEmails.length === 0}&#10;            /&gt;&#10;            &lt;span className=&quot;text-sm text-gray-600 whitespace-nowrap&quot;&gt;&#10;              {loading ? (&#10;                &quot;Carregando...&quot;&#10;              ) : selectedEmails.length &gt; 0 ? (&#10;                `${selectedEmails.length} selecionados`&#10;              ) : (&#10;                `${filteredEmails.length} emails`&#10;              )}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;            {selectedEmails.length &gt; 0 ? (&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                &lt;Trash2 className=&quot;h-4 w-4&quot;/&gt;&#10;              &lt;/Button&gt;&#10;            ) : (&#10;              &lt;Button&#10;                variant=&quot;ghost&quot;&#10;                size=&quot;sm&quot;&#10;                onClick={syncAndFetchEmails}&#10;                disabled={loading || syncLoading}&#10;              &gt;&#10;                {loading || syncLoading ? (&#10;                  &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot;/&gt;&#10;                ) : (&#10;                  &lt;RotateCw className=&quot;h-4 w-4&quot;/&gt;&#10;                )}&#10;              &lt;/Button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Email List */}&#10;      &lt;div className=&quot;flex flex-col-reverse overflow-y-auto&quot;&gt;&#10;        {loading ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#10;            &lt;Loader2 className=&quot;h-8 w-8 text-blue-500 animate-spin mb-4&quot;/&gt;&#10;            &lt;p className=&quot;text-gray-500&quot;&gt;Carregando emails...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : filteredEmails.length === 0 ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#10;            &lt;Mail className=&quot;h-12 w-12 text-gray-300 mb-4&quot;/&gt;&#10;            &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-1&quot;&gt;Nenhum email encontrado&lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-500 text-center&quot;&gt;&#10;              {searchQuery ?&#10;                &quot;Não encontramos emails correspondentes à sua pesquisa.&quot; :&#10;                &quot;Não há emails nesta pasta no momento.&quot;}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          filteredEmails.map((email) =&gt; (&#10;            &lt;EmailItem&#10;              key={email.id}&#10;              email={email}&#10;              isSelected={selectedEmail === email.id}&#10;              isChecked={selectedEmails.includes(email.id)}&#10;              onSelect={() =&gt; handleEmailSelect(email.id)}&#10;              onToggleCheck={() =&gt; toggleEmailSelection(email.id)}&#10;            /&gt;&#10;          ))&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default EmailList;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import React, {useState, useCallback, useEffect, useMemo} from 'react';&#13;&#10;import {PaperclipIcon, ArrowClockwiseIcon, TrashIcon, SpinnerIcon, EnvelopeIcon} from '@phosphor-icons/react';&#13;&#10;import {Button} from '@/components/ui/button';&#13;&#10;import {Checkbox} from '@/components/ui/checkbox';&#13;&#10;import {cn} from '@/lib/utils';&#13;&#10;import {useEmails} from '@/api/hooks';&#13;&#10;import {Email as ApiEmail} from '@/api/types';&#13;&#10;import {useToast} from '@/hooks/use-toast';&#13;&#10;import {apiClient} from '@/api/client';&#13;&#10;&#13;&#10;interface Email {&#13;&#10;  id: string;&#13;&#10;  from: string;&#13;&#10;  subject: string;&#13;&#10;  preview: string;&#13;&#10;  date: string;&#13;&#10;  isRead: boolean;&#13;&#10;  hasAttachment: boolean;&#13;&#10;  labels: string[];&#13;&#10;  content?: string;&#13;&#10;}&#13;&#10;&#13;&#10;const MOCK_EMAILS = [&#13;&#10;  {&#13;&#10;    id: 'mock-1',&#13;&#10;    from: 'João Silva &lt;joao@empresa.com&gt;',&#13;&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#13;&#10;    preview: 'Segue em anexo o relatório mensal de vendas referente ao mês de novembro. Os resultados mostram um crescimento de 15% em relação ao mês anterior...',&#13;&#10;    date: new Date().toISOString(),&#13;&#10;    isRead: false,&#13;&#10;    hasAttachment: true,&#13;&#10;    labels: ['importante', 'trabalho'],&#13;&#10;    content: `Prezado(a),&#13;&#10;&#13;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#13;&#10;&#13;&#10;Os principais destaques são:&#13;&#10;• Crescimento de 15% em relação ao mês anterior&#13;&#10;• Aumento de 8% no número de novos clientes&#13;&#10;• Melhoria na taxa de conversão para 12%&#13;&#10;&#13;&#10;Principais produtos vendidos:&#13;&#10;1. Produto A - R$ 45.000&#13;&#10;2. Produto B - R$ 32.000  &#13;&#10;3. Produto C - R$ 28.500&#13;&#10;&#13;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#13;&#10;&#13;&#10;Atenciosamente,&#13;&#10;João Silva&#13;&#10;Gerente Comercial&#13;&#10;(11) 9999-8888`&#13;&#10;  },&#13;&#10;  {&#13;&#10;    id: 'mock-2',&#13;&#10;    from: 'Maria Santos &lt;maria@consultoria.com&gt;',&#13;&#10;    subject: 'Proposta de consultoria em marketing digital',&#13;&#10;    preview: 'Espero que esteja bem! Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa...',&#13;&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),&#13;&#10;    isRead: false,&#13;&#10;    hasAttachment: true,&#13;&#10;    labels: ['proposta'],&#13;&#10;    content: `Olá!&#13;&#10;&#13;&#10;Espero que esteja bem!&#13;&#10;&#13;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#13;&#10;&#13;&#10;Nossa experiência inclui:&#13;&#10;• Gestão de redes sociais&#13;&#10;• Campanhas no Google Ads&#13;&#10;• SEO e marketing de conteúdo&#13;&#10;• E-mail marketing&#13;&#10;• Análise de métricas e ROI&#13;&#10;&#13;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#13;&#10;&#13;&#10;Quando seria um bom momento para conversarmos?&#13;&#10;&#13;&#10;Abraços,&#13;&#10;Maria Santos&#13;&#10;Consultora em Marketing Digital&#13;&#10;maria@consultoria.com&#13;&#10;(11) 8888-7777`&#13;&#10;  },&#13;&#10;  {&#13;&#10;    id: 'mock-3',&#13;&#10;    from: 'Carlos Oliveira &lt;carlos@fornecedor.com&gt;',&#13;&#10;    subject: 'Confirmação do pedido #2024-1156',&#13;&#10;    preview: 'Confirmamos o recebimento do seu pedido #2024-1156. Prazo de entrega estimado: 5 dias úteis...',&#13;&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),&#13;&#10;    isRead: true,&#13;&#10;    hasAttachment: false,&#13;&#10;    labels: ['pedido'],&#13;&#10;    content: `Prezado Cliente,&#13;&#10;&#13;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#13;&#10;&#13;&#10;Detalhes do pedido:&#13;&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#13;&#10;• Valor total: R$ 2.850,00&#13;&#10;• Prazo de entrega: 5 dias úteis&#13;&#10;• Forma de pagamento: Boleto banceiro&#13;&#10;&#13;&#10;Itens do pedido:&#13;&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#13;&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#13;&#10;&#13;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#13;&#10;&#13;&#10;Em caso de dúvidas, entre em contato conosco.&#13;&#10;&#13;&#10;Atenciosamente,&#13;&#10;Carlos Oliveira&#13;&#10;Departamento de Vendas&#13;&#10;carlos@fornecedor.com&#13;&#10;(11) 7777-6666`&#13;&#10;  },&#13;&#10;  {&#13;&#10;    id: 'mock-4',&#13;&#10;    from: 'Ana Costa &lt;ana@juridico.com&gt;',&#13;&#10;    subject: 'Revisão do contrato de prestação de serviços',&#13;&#10;    preview: 'Conforme solicitado, segue a revisão do contrato de prestação de serviços. Identifiquei alguns pontos que precisam de atenção...',&#13;&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),&#13;&#10;    isRead: true,&#13;&#10;    hasAttachment: true,&#13;&#10;    labels: ['jurídico', 'urgente'],&#13;&#10;    content: `Prezado(a),&#13;&#10;&#13;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#13;&#10;&#13;&#10;Pontos que precisam de atenção:&#13;&#10;1. Cláusula 5.2 - Prazo de pagamento&#13;&#10;2. Cláusula 8.1 - Rescisão contratual  &#13;&#10;3. Cláusula 12 - Foro de eleição&#13;&#10;&#13;&#10;Recomendações:&#13;&#10;• Incluir cláusula de reajuste anual&#13;&#10;• Especificar melhor as penalidades por atraso&#13;&#10;• Definir critérios objetivos para avaliação de performance&#13;&#10;&#13;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#13;&#10;&#13;&#10;Podemos agendar uma reunião para discutir estas alterações?&#13;&#10;&#13;&#10;Cordialmente,&#13;&#10;Ana Costa&#13;&#10;Advogada&#13;&#10;OAB/SP 123.456&#13;&#10;ana@juridico.com&#13;&#10;(11) 6666-5555`&#13;&#10;  },&#13;&#10;  {&#13;&#10;    id: 'mock-5',&#13;&#10;    from: 'Ricardo Ferreira &lt;ricardo@ti.com&gt;',&#13;&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#13;&#10;    preview: 'Informamos que será realizada manutenção programada no sistema no sábado, 09/12, das 02h às 06h...',&#13;&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),&#13;&#10;    isRead: true,&#13;&#10;    hasAttachment: false,&#13;&#10;    labels: ['sistema', 'manutenção'],&#13;&#10;    content: `Prezados usuários,&#13;&#10;&#13;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#13;&#10;&#13;&#10;Durante este período:&#13;&#10;• O sistema ficará indisponível&#13;&#10;• Não será possível acessar dados&#13;&#10;• Funcionalidades estarão offline&#13;&#10;&#13;&#10;Melhorias que serão implementadas:&#13;&#10;• Otimização da performance&#13;&#10;• Correção de bugs reportados&#13;&#10;• Atualização de segurança&#13;&#10;• Nova funcionalidade de relatórios&#13;&#10;&#13;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#13;&#10;&#13;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#13;&#10;&#13;&#10;Obrigado pela compreensão.&#13;&#10;&#13;&#10;Equipe de TI&#13;&#10;Ricardo Ferreira&#13;&#10;Coordenador de Sistemas&#13;&#10;ricardo@ti.com`&#13;&#10;  }&#13;&#10;];&#13;&#10;&#13;&#10;const formatDate = (dateString?: string): string =&gt; {&#13;&#10;  if (!dateString) return '';&#13;&#10;&#13;&#10;  try {&#13;&#10;    const date = new Date(dateString);&#13;&#10;&#13;&#10;    if (isNaN(date.getTime())) return '';&#13;&#10;&#13;&#10;    const day = date.getDate().toString().padStart(2, '0');&#13;&#10;    const month = (date.getMonth() + 1).toString().padStart(2, '0');&#13;&#10;    const year = date.getFullYear();&#13;&#10;    const hours = date.getHours().toString().padStart(2, '0');&#13;&#10;    const minutes = date.getMinutes().toString().padStart(2, '0');&#13;&#10;&#13;&#10;    return `${day}/${month}/${year} ${hours}:${minutes}`;&#13;&#10;  } catch (error) {&#13;&#10;    console.warn('Invalid date:', dateString);&#13;&#10;    return '';&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;interface SentEmail {&#13;&#10;  id: string;&#13;&#10;  to: string;&#13;&#10;  cc?: string;&#13;&#10;  bcc?: string;&#13;&#10;  subject: string;&#13;&#10;  content: string;&#13;&#10;  date: string;&#13;&#10;  from: string;&#13;&#10;}&#13;&#10;&#13;&#10;interface EmailListProps {&#13;&#10;  folder: string;&#13;&#10;  searchQuery: string;&#13;&#10;  selectedEmail: string | null;&#13;&#10;  onEmailSelect: (emailId: string) =&gt; void;&#13;&#10;  sentEmails?: SentEmail[];&#13;&#10;  onUnreadCountChange?: (count: number) =&gt; void;&#13;&#10;}&#13;&#10;&#13;&#10;const EmailItem = React.memo&lt;{&#13;&#10;  email: Email;&#13;&#10;  isSelected: boolean;&#13;&#10;  isChecked: boolean;&#13;&#10;  onSelect(): void;&#13;&#10;  onToggleCheck(): void;&#13;&#10;}&gt;(({ email, isSelected, isChecked, onSelect, onToggleCheck }) =&gt; {&#13;&#10;  const handleClick = useCallback((e: React.MouseEvent) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;    onSelect();&#13;&#10;  }, [onSelect]);&#13;&#10;&#13;&#10;  const handleCheckboxClick = useCallback((e: React.MouseEvent) =&gt; {&#13;&#10;    e.stopPropagation();&#13;&#10;    onToggleCheck();&#13;&#10;  }, [onToggleCheck]);&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div&#13;&#10;      className={cn(&#13;&#10;        &quot;p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 transition-colors&quot;,&#13;&#10;        isSelected &amp;&amp; &quot;bg-blue-100&quot;,&#13;&#10;        !email.isRead &amp;&amp; &quot;bg-blue-50/30&quot;&#13;&#10;      )}&#13;&#10;      onClick={handleClick}&#13;&#10;    &gt;&#13;&#10;      &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#13;&#10;        &lt;Checkbox&#13;&#10;          checked={isChecked}&#13;&#10;          onCheckedChange={onToggleCheck}&#13;&#10;          onClick={handleCheckboxClick}&#13;&#10;        /&gt;&#13;&#10;        &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex items-center justify-between mb-1&quot;&gt;&#13;&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;              &lt;span className=&quot;text-sm truncate font-semibold text-gray-700&quot;&gt;&#13;&#10;                {email.from}&#13;&#10;              &lt;/span&gt;&#13;&#10;              {email.hasAttachment &amp;&amp; (&#13;&#10;                &lt;PaperclipIcon className=&quot;h-3 w-3 text-gray-400&quot;/&gt;&#13;&#10;              )}&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;span className=&quot;text-xs text-gray-500&quot;&gt;{email.date}&lt;/span&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;h3 className=&quot;text-sm mb-1 truncate font-bold text-gray-900&quot;&gt;&#13;&#10;            {email.subject}&#13;&#10;          &lt;/h3&gt;&#13;&#10;&#13;&#10;          &lt;p className=&quot;text-xs text-gray-500 line-clamp-2&quot;&gt;&#13;&#10;            {email.preview}&#13;&#10;          &lt;/p&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;});&#13;&#10;&#13;&#10;EmailItem.displayName = 'EmailItem';&#13;&#10;&#13;&#10;function EmailList({&#13;&#10;  folder,&#13;&#10;  searchQuery,&#13;&#10;  selectedEmail,&#13;&#10;  onEmailSelect,&#13;&#10;  sentEmails = [],&#13;&#10;  onUnreadCountChange&#13;&#10;}: EmailListProps) {&#13;&#10;  const [selectedEmails, setSelectedEmails] = useState&lt;string[]&gt;([]);&#13;&#10;  const [syncLoading, setSyncLoading] = useState(false);&#13;&#10;  const {toast} = useToast();&#13;&#10;&#13;&#10;  const {data, error, loading, refetch} = useEmails();&#13;&#10;&#13;&#10;  const apiEmails = useMemo((): Email[] =&gt; {&#13;&#10;    if (!data?.items) return [];&#13;&#10;&#13;&#10;    return data.items.map((apiEmail: ApiEmail) =&gt; ({&#13;&#10;      id: apiEmail.id_email.toString(),&#13;&#10;      from: apiEmail.remetente || 'Remetente desconhecido',&#13;&#10;      subject: apiEmail.assunto || 'Sem assunto',&#13;&#10;      preview: apiEmail.conteudo || '',&#13;&#10;      date: formatDate(apiEmail.prazo_resposta),&#13;&#10;      isRead: apiEmail.tp_status !== 'NOVO',&#13;&#10;      hasAttachment: false,&#13;&#10;      labels: [],&#13;&#10;    }));&#13;&#10;  }, [data?.items]);&#13;&#10;&#13;&#10;  const formattedMockEmails = useMemo(() =&gt; {&#13;&#10;    return MOCK_EMAILS.map(email =&gt; ({&#13;&#10;      ...email,&#13;&#10;      date: formatDate(email.date)&#13;&#10;    }));&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  const emails = useMemo((): Email[] =&gt; {&#13;&#10;    if (folder === 'sent') {&#13;&#10;      return sentEmails.map(email =&gt; ({&#13;&#10;        id: email.id,&#13;&#10;        from: 'Você',&#13;&#10;        subject: email.subject || 'Sem assunto',&#13;&#10;        preview: email.content?.replace(/&lt;[^&gt;]*&gt;/g, '') || '',&#13;&#10;        date: formatDate(email.date),&#13;&#10;        isRead: true,&#13;&#10;        hasAttachment: false,&#13;&#10;        labels: [],&#13;&#10;      }));&#13;&#10;    }&#13;&#10;&#13;&#10;    if (folder === 'inbox') {&#13;&#10;      return [...formattedMockEmails, ...apiEmails];&#13;&#10;    }&#13;&#10;&#13;&#10;    return apiEmails;&#13;&#10;  }, [folder, sentEmails, formattedMockEmails, apiEmails]);&#13;&#10;&#13;&#10;  const filteredEmails = useMemo(() =&gt; {&#13;&#10;    if (!searchQuery?.trim()) {&#13;&#10;      return emails;&#13;&#10;    }&#13;&#10;&#13;&#10;    const query = searchQuery.toLowerCase().trim();&#13;&#10;    return emails.filter(email =&gt;&#13;&#10;      email?.subject?.toLowerCase().includes(query) ||&#13;&#10;      email?.from?.toLowerCase().includes(query) ||&#13;&#10;      email?.preview?.toLowerCase().includes(query)&#13;&#10;    );&#13;&#10;  }, [emails, searchQuery]);&#13;&#10;&#13;&#10;  const syncAndFetchEmails = useCallback(async () =&gt; {&#13;&#10;    if (syncLoading) return;&#13;&#10;&#13;&#10;    try {&#13;&#10;      setSyncLoading(true);&#13;&#10;      await apiClient.sincronizarEmails();&#13;&#10;      await refetch();&#13;&#10;&#13;&#10;      toast({&#13;&#10;        title: &quot;Emails sincronizados&quot;,&#13;&#10;        description: &quot;Seus emails foram sincronizados com sucesso.&quot;,&#13;&#10;      });&#13;&#10;    } catch (err) {&#13;&#10;      console.error('Error syncing emails:', err);&#13;&#10;      toast({&#13;&#10;        title: &quot;Erro ao sincronizar emails&quot;,&#13;&#10;        description: &quot;Não foi possível sincronizar seus emails. Tente novamente mais tarde.&quot;,&#13;&#10;        variant: &quot;destructive&quot;,&#13;&#10;      });&#13;&#10;    } finally {&#13;&#10;      setSyncLoading(false);&#13;&#10;    }&#13;&#10;  }, [refetch, toast, syncLoading]);&#13;&#10;&#13;&#10;  const toggleEmailSelection = useCallback((emailId: string) =&gt; {&#13;&#10;    setSelectedEmails(prev =&gt; {&#13;&#10;      const newSelection = prev.includes(emailId)&#13;&#10;        ? prev.filter(id =&gt; id !== emailId)&#13;&#10;        : [...prev, emailId];&#13;&#10;      return newSelection;&#13;&#10;    });&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  const selectAllEmails = useCallback(() =&gt; {&#13;&#10;    const allIds = filteredEmails.map(email =&gt; email.id);&#13;&#10;    setSelectedEmails(prev =&gt;&#13;&#10;      prev.length === allIds.length ? [] : allIds&#13;&#10;    );&#13;&#10;  }, [filteredEmails]);&#13;&#10;&#13;&#10;  const handleEmailSelect = useCallback((emailId: string) =&gt; {&#13;&#10;    if (selectedEmail === emailId) {&#13;&#10;      onEmailSelect('');&#13;&#10;    } else {&#13;&#10;      onEmailSelect(emailId);&#13;&#10;    }&#13;&#10;  }, [selectedEmail, onEmailSelect]);&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    if (!onUnreadCountChange || folder !== 'inbox') return;&#13;&#10;&#13;&#10;    const updateCount = () =&gt; {&#13;&#10;      const allEmails = [...MOCK_EMAILS, ...apiEmails];&#13;&#10;      const unreadCount = allEmails.filter(email =&gt; !email.isRead).length;&#13;&#10;      const safeCount = Math.max(0, unreadCount);&#13;&#10;      onUnreadCountChange(safeCount);&#13;&#10;    };&#13;&#10;&#13;&#10;    if ('requestIdleCallback' in window) {&#13;&#10;      requestIdleCallback(updateCount);&#13;&#10;    } else {&#13;&#10;      setTimeout(updateCount, 0);&#13;&#10;    }&#13;&#10;  }, [apiEmails, onUnreadCountChange, folder]);&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    if (error &amp;&amp; !loading) {&#13;&#10;      toast({&#13;&#10;        title: &quot;Erro ao carregar emails&quot;,&#13;&#10;        description: &quot;Não foi possível carregar os emails. Tente novamente mais tarde.&quot;,&#13;&#10;        variant: &quot;destructive&quot;,&#13;&#10;      });&#13;&#10;    }&#13;&#10;  }, [error, loading, toast]);&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;flex-1 flex flex-col&quot;&gt;&#13;&#10;      {/* Email Actions */}&#13;&#10;      &lt;div className=&quot;p-4 border-b border-gray-200&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex items-center justify-between min-h-[2rem]&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;            &lt;Checkbox&#13;&#10;              checked={selectedEmails.length === filteredEmails.length &amp;&amp; filteredEmails.length &gt; 0}&#13;&#10;              onCheckedChange={selectAllEmails}&#13;&#10;              disabled={loading || filteredEmails.length === 0}&#13;&#10;            /&gt;&#13;&#10;            &lt;span className=&quot;text-sm text-gray-600 whitespace-nowrap&quot;&gt;&#13;&#10;              {loading ? (&#13;&#10;                &quot;Carregando...&quot;&#13;&#10;              ) : selectedEmails.length &gt; 0 ? (&#13;&#10;                `${selectedEmails.length} selecionados`&#13;&#10;              ) : (&#13;&#10;                `${filteredEmails.length} emails`&#13;&#10;              )}&#13;&#10;            &lt;/span&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#13;&#10;            {selectedEmails.length &gt; 0 ? (&#13;&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#13;&#10;                &lt;TrashIcon className=&quot;h-4 w-4&quot;/&gt;&#13;&#10;              &lt;/Button&gt;&#13;&#10;            ) : (&#13;&#10;              &lt;Button&#13;&#10;                variant=&quot;ghost&quot;&#13;&#10;                size=&quot;sm&quot;&#13;&#10;                onClick={syncAndFetchEmails}&#13;&#10;                disabled={loading || syncLoading}&#13;&#10;              &gt;&#13;&#10;                {loading || syncLoading ? (&#13;&#10;                  &lt;SpinnerIcon className=&quot;h-4 w-4 animate-spin&quot;/&gt;&#13;&#10;                ) : (&#13;&#10;                  &lt;ArrowClockwiseIcon className=&quot;h-4 w-4&quot;/&gt;&#13;&#10;                )}&#13;&#10;              &lt;/Button&gt;&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Email List */}&#13;&#10;      &lt;div className=&quot;flex flex-col-reverse overflow-y-auto&quot;&gt;&#13;&#10;        {loading ? (&#13;&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#13;&#10;            &lt;SpinnerIcon className=&quot;h-8 w-8 text-blue-500 animate-spin mb-4&quot;/&gt;&#13;&#10;            &lt;p className=&quot;text-gray-500&quot;&gt;Carregando emails...&lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        ) : filteredEmails.length === 0 ? (&#13;&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#13;&#10;            &lt;EnvelopeIcon className=&quot;h-12 w-12 text-gray-300 mb-4&quot;/&gt;&#13;&#10;            &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-1&quot;&gt;Nenhum email encontrado&lt;/h3&gt;&#13;&#10;            &lt;p className=&quot;text-gray-500 text-center&quot;&gt;&#13;&#10;              {searchQuery ?&#13;&#10;                &quot;Não encontramos emails correspondentes à sua pesquisa.&quot; :&#13;&#10;                &quot;Não há emails nesta pasta no momento.&quot;}&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        ) : (&#13;&#10;          filteredEmails.map((email) =&gt; (&#13;&#10;            &lt;EmailItem&#13;&#10;              key={email.id}&#13;&#10;              email={email}&#13;&#10;              isSelected={selectedEmail === email.id}&#13;&#10;              isChecked={selectedEmails.includes(email.id)}&#13;&#10;              onSelect={() =&gt; handleEmailSelect(email.id)}&#13;&#10;              onToggleCheck={() =&gt; toggleEmailSelection(email.id)}&#13;&#10;            /&gt;&#13;&#10;          ))&#13;&#10;        )}&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}&#13;&#10;&#13;&#10;export default EmailList;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/kanban/ColumnSettingsModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/kanban/ColumnSettingsModal.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { X, Trash2, Settings } from 'lucide-react';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { cn } from '@/lib/utils';&#10;&#10;interface Column {&#10;  id: string;&#10;  title: string;&#10;  tasks: any[];&#10;  color: string;&#10;}&#10;&#10;interface ColumnSettingsModalProps {&#10;  column: Column | null;&#10;  availableColors: string[];&#10;  onClose(): void;&#10;  onSave(column: Column): void;&#10;  onDelete(columnId: string): void;&#10;}&#10;&#10;export default function ColumnSettingsModal({&#10;  column,&#10;  availableColors,&#10;  onClose,&#10;  onSave,&#10;  onDelete,&#10;}: ColumnSettingsModalProps) {&#10;  const [title, setTitle] = useState(column?.title || 'Nova Seção');&#10;  const [color, setColor] = useState(column?.color || 'bg-gray-500');&#10;&#10;  const handleSave = () =&gt; {&#10;    if (column) {&#10;      onSave({&#10;        ...column,&#10;        title,&#10;        color,&#10;      });&#10;    } else {&#10;      // Create new column&#10;      const newColumn: Column = {&#10;        id: Date.now().toString(),&#10;        title,&#10;        color,&#10;        tasks: [],&#10;      };&#10;      onSave(newColumn);&#10;    }&#10;  };&#10;&#10;  const handleDelete = () =&gt; {&#10;    if (column &amp;&amp; window.confirm('Tem certeza que deseja excluir esta seção? Todas as tarefas serão perdidas.')) {&#10;      onDelete(column.id);&#10;      onClose();&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;      &lt;div className=&quot;bg-white rounded-3xl shadow-xl w-full max-w-md&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex items-center justify-between p-6 border-b border-gray-200&quot;&gt;&#10;          &lt;h2 className=&quot;text-lg font-semibold flex items-center&quot;&gt;&#10;            &lt;Settings className=&quot;h-5 w-5 mr-2&quot; /&gt;&#10;            {column ? 'Editar Seção' : 'Nova Seção'}&#10;          &lt;/h2&gt;&#10;          &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={onClose}&gt;&#10;            &lt;X className=&quot;h-4 w-4&quot; /&gt;&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Content */}&#10;        &lt;div className=&quot;p-6 space-y-6&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;title&quot; className=&quot;text-sm font-medium&quot;&gt;Nome da Seção&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;title&quot;&#10;              value={title}&#10;              onChange={(e) =&gt; setTitle(e.target.value)}&#10;              placeholder=&quot;Digite o nome da seção...&quot;&#10;              className=&quot;mt-1&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div&gt;&#10;            &lt;Label className=&quot;text-sm font-medium&quot;&gt;Cor&lt;/Label&gt;&#10;            &lt;div className=&quot;mt-2 grid grid-cols-5 gap-2&quot;&gt;&#10;              {availableColors.map((colorOption) =&gt; (&#10;                &lt;button&#10;                  key={colorOption}&#10;                  className={cn(&#10;                    &quot;w-10 h-10 rounded-full border-2 transition-all&quot;,&#10;                    colorOption,&#10;                    color === colorOption ? &quot;border-gray-900 scale-110&quot; : &quot;border-gray-300 hover:border-gray-400&quot;&#10;                  )}&#10;                  onClick={() =&gt; setColor(colorOption)}&#10;                /&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Actions */}&#10;        &lt;div className=&quot;flex items-center justify-between p-6 border-t border-gray-200&quot;&gt;&#10;          &lt;div&gt;&#10;            {column &amp;&amp; (&#10;              &lt;Button variant=&quot;destructive&quot; size=&quot;sm&quot; onClick={handleDelete}&gt;&#10;                &lt;Trash2 className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                Excluir Seção&#10;              &lt;/Button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Button variant=&quot;secondary&quot; onClick={onClose}&gt;&#10;              Cancelar&#10;            &lt;/Button&gt;&#10;            &lt;Button onClick={handleSave} className=&quot;bg-blue-600 hover:bg-blue-700&quot;&gt;&#10;              {column ? 'Salvar Alterações' : 'Criar Seção'}&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import { useState } from 'react';&#13;&#10;import { XIcon, TrashIcon, GearIcon } from '@phosphor-icons/react';&#13;&#10;import { Button } from '@/components/ui/button';&#13;&#10;import { Input } from '@/components/ui/input';&#13;&#10;import { Label } from '@/components/ui/label';&#13;&#10;import { cn } from '@/lib/utils';&#13;&#10;&#13;&#10;interface Column {&#13;&#10;  id: string;&#13;&#10;  title: string;&#13;&#10;  tasks: any[];&#13;&#10;  color: string;&#13;&#10;}&#13;&#10;&#13;&#10;interface ColumnSettingsModalProps {&#13;&#10;  column: Column | null;&#13;&#10;  availableColors: string[];&#13;&#10;  onClose(): void;&#13;&#10;  onSave(column: Column): void;&#13;&#10;  onDelete(columnId: string): void;&#13;&#10;}&#13;&#10;&#13;&#10;export default function ColumnSettingsModal({&#13;&#10;  column,&#13;&#10;  availableColors,&#13;&#10;  onClose,&#13;&#10;  onSave,&#13;&#10;  onDelete,&#13;&#10;}: ColumnSettingsModalProps) {&#13;&#10;  const [title, setTitle] = useState(column?.title || 'Nova Seção');&#13;&#10;  const [color, setColor] = useState(column?.color || 'bg-gray-500');&#13;&#10;&#13;&#10;  const handleSave = () =&gt; {&#13;&#10;    if (column) {&#13;&#10;      onSave({&#13;&#10;        ...column,&#13;&#10;        title,&#13;&#10;        color,&#13;&#10;      });&#13;&#10;    } else {&#13;&#10;      // Create new column&#13;&#10;      const newColumn: Column = {&#13;&#10;        id: Date.now().toString(),&#13;&#10;        title,&#13;&#10;        color,&#13;&#10;        tasks: [],&#13;&#10;      };&#13;&#10;      onSave(newColumn);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleDelete = () =&gt; {&#13;&#10;    if (column &amp;&amp; window.confirm('Tem certeza que deseja excluir esta seção? Todas as tarefas serão perdidas.')) {&#13;&#10;      onDelete(column.id);&#13;&#10;      onClose();&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#13;&#10;      &lt;div className=&quot;bg-white rounded-3xl shadow-xl w-full max-w-md&quot;&gt;&#13;&#10;        {/* Header */}&#13;&#10;        &lt;div className=&quot;flex items-center justify-between p-6 border-b border-gray-200&quot;&gt;&#13;&#10;          &lt;h2 className=&quot;text-lg font-semibold flex items-center&quot;&gt;&#13;&#10;            &lt;GearIcon className=&quot;h-5 w-5 mr-2&quot; /&gt;&#13;&#10;            {column ? 'Editar Seção' : 'Nova Seção'}&#13;&#10;          &lt;/h2&gt;&#13;&#10;          &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={onClose}&gt;&#13;&#10;            &lt;XIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;          &lt;/Button&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Content */}&#13;&#10;        &lt;div className=&quot;p-6 space-y-6&quot;&gt;&#13;&#10;          &lt;div&gt;&#13;&#10;            &lt;Label htmlFor=&quot;title&quot; className=&quot;text-sm font-medium&quot;&gt;Nome da Seção&lt;/Label&gt;&#13;&#10;            &lt;Input&#13;&#10;              id=&quot;title&quot;&#13;&#10;              value={title}&#13;&#10;              onChange={(e) =&gt; setTitle(e.target.value)}&#13;&#10;              placeholder=&quot;Digite o nome da seção...&quot;&#13;&#10;              className=&quot;mt-1&quot;&#13;&#10;            /&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div&gt;&#13;&#10;            &lt;Label className=&quot;text-sm font-medium&quot;&gt;Cor&lt;/Label&gt;&#13;&#10;            &lt;div className=&quot;mt-2 grid grid-cols-5 gap-2&quot;&gt;&#13;&#10;              {availableColors.map((colorOption) =&gt; (&#13;&#10;                &lt;button&#13;&#10;                  key={colorOption}&#13;&#10;                  className={cn(&#13;&#10;                    &quot;w-10 h-10 rounded-full border-2 transition-all&quot;,&#13;&#10;                    colorOption,&#13;&#10;                    color === colorOption ? &quot;border-gray-900 scale-110&quot; : &quot;border-gray-300 hover:border-gray-400&quot;&#13;&#10;                  )}&#13;&#10;                  onClick={() =&gt; setColor(colorOption)}&#13;&#10;                /&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Actions */}&#13;&#10;        &lt;div className=&quot;flex items-center justify-between p-6 border-t border-gray-200&quot;&gt;&#13;&#10;          &lt;div&gt;&#13;&#10;            {column &amp;&amp; (&#13;&#10;              &lt;Button variant=&quot;destructive&quot; size=&quot;sm&quot; onClick={handleDelete}&gt;&#13;&#10;                &lt;TrashIcon className=&quot;h-4 w-4 mr-2&quot; /&gt;&#13;&#10;                Excluir Seção&#13;&#10;              &lt;/Button&gt;&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;          &#13;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;            &lt;Button variant=&quot;secondary&quot; onClick={onClose}&gt;&#13;&#10;              Cancelar&#13;&#10;            &lt;/Button&gt;&#13;&#10;            &lt;Button onClick={handleSave} className=&quot;bg-blue-600 hover:bg-blue-700&quot;&gt;&#13;&#10;              {column ? 'Salvar Alterações' : 'Criar Seção'}&#13;&#10;            &lt;/Button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/kanban/ImportSpreadsheetModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/kanban/ImportSpreadsheetModal.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState, useRef } from 'react';&#10;import { X, Upload, FileSpreadsheet, AlertCircle, Check } from 'lucide-react';&#10;import { Button } from '@/components/ui/button';&#10;import { Label } from '@/components/ui/label';&#10;import { cn } from '@/lib/utils';&#10;&#10;interface ImportSpreadsheetModalProps {&#10;  onClose(): void;&#10;  onImport(file: File): void;&#10;}&#10;&#10;export default function ImportSpreadsheetModal({&#10;  onClose,&#10;  onImport,&#10;}: ImportSpreadsheetModalProps) {&#10;  const [file, setFile] = useState&lt;File | null&gt;(null);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [isDragging, setIsDragging] = useState(false);&#10;  const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;  const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    const selectedFile = e.target.files?.[0];&#10;    validateAndSetFile(selectedFile);&#10;  };&#10;&#10;  const handleDrop = (e: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;    e.preventDefault();&#10;    setIsDragging(false);&#10;    &#10;    const selectedFile = e.dataTransfer.files?.[0];&#10;    validateAndSetFile(selectedFile);&#10;  };&#10;&#10;  const validateAndSetFile = (selectedFile: File | undefined) =&gt; {&#10;    setError(null);&#10;    &#10;    if (!selectedFile) {&#10;      return;&#10;    }&#10;&#10;    // Check file extension&#10;    const fileExtension = selectedFile.name.split('.').pop()?.toLowerCase();&#10;    const validExtensions = ['csv', 'xlsx', 'xls'];&#10;    &#10;    if (!fileExtension || !validExtensions.includes(fileExtension)) {&#10;      setError(`Formato de arquivo inválido. Por favor, selecione um arquivo .csv, .xlsx ou .xls.`);&#10;      return;&#10;    }&#10;&#10;    // Check file size (max 10MB)&#10;    const maxSize = 10 * 1024 * 1024; // 10MB in bytes&#10;    if (selectedFile.size &gt; maxSize) {&#10;      setError(`O arquivo é muito grande. O tamanho máximo permitido é 10MB.`);&#10;      return;&#10;    }&#10;&#10;    setFile(selectedFile);&#10;  };&#10;&#10;  const handleDragOver = (e: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;    e.preventDefault();&#10;    setIsDragging(true);&#10;  };&#10;&#10;  const handleDragLeave = (e: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;    e.preventDefault();&#10;    setIsDragging(false);&#10;  };&#10;&#10;  const handleImport = () =&gt; {&#10;    if (file) {&#10;      onImport(file);&#10;    }&#10;  };&#10;&#10;  const triggerFileInput = () =&gt; {&#10;    fileInputRef.current?.click();&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;      &lt;div className=&quot;bg-white rounded-3xl shadow-xl w-full max-w-md&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex items-center justify-between p-6 border-b border-gray-200&quot;&gt;&#10;          &lt;h2 className=&quot;text-lg font-semibold flex items-center&quot;&gt;&#10;            &lt;FileSpreadsheet className=&quot;h-5 w-5 mr-2&quot; /&gt;&#10;            Importar Planilha&#10;          &lt;/h2&gt;&#10;          &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={onClose}&gt;&#10;            &lt;X className=&quot;h-4 w-4&quot; /&gt;&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Content */}&#10;        &lt;div className=&quot;p-6 space-y-6&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;Label className=&quot;text-sm font-medium&quot;&gt;Arquivo de Planilha&lt;/Label&gt;&#10;            &lt;div&#10;              className={cn(&#10;                &quot;mt-2 border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors&quot;,&#10;                isDragging ? &quot;border-blue-500 bg-blue-50&quot; : &quot;border-gray-300 hover:border-gray-400&quot;,&#10;                file ? &quot;bg-green-50 border-green-300&quot; : &quot;&quot;&#10;              )}&#10;              onDragOver={handleDragOver}&#10;              onDragLeave={handleDragLeave}&#10;              onDrop={handleDrop}&#10;              onClick={triggerFileInput}&#10;            &gt;&#10;              &lt;input&#10;                type=&quot;file&quot;&#10;                ref={fileInputRef}&#10;                onChange={handleFileChange}&#10;                accept=&quot;.csv,.xlsx,.xls&quot;&#10;                className=&quot;hidden&quot;&#10;              /&gt;&#10;              &#10;              {file ? (&#10;                &lt;div className=&quot;flex flex-col items-center&quot;&gt;&#10;                  &lt;div className=&quot;w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mb-3&quot;&gt;&#10;                    &lt;Check className=&quot;h-6 w-6 text-green-600&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-gray-900 mb-1&quot;&gt;{file.name}&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xs text-gray-500&quot;&gt;&#10;                    {(file.size / 1024 / 1024).toFixed(2)} MB&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;flex flex-col items-center&quot;&gt;&#10;                  &lt;div className=&quot;w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mb-3&quot;&gt;&#10;                    &lt;Upload className=&quot;h-6 w-6 text-gray-600&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-gray-900 mb-1&quot;&gt;&#10;                    Arraste e solte seu arquivo aqui ou clique para selecionar&#10;                  &lt;/p&gt;&#10;                  &lt;p className=&quot;text-xs text-gray-500&quot;&gt;&#10;                    Formatos suportados: .CSV, .XLSX, .XLS (máx. 10MB)&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &#10;            {error &amp;&amp; (&#10;              &lt;div className=&quot;mt-3 flex items-start space-x-2 text-red-600&quot;&gt;&#10;                &lt;AlertCircle className=&quot;h-4 w-4 mt-0.5 flex-shrink-0&quot; /&gt;&#10;                &lt;p className=&quot;text-sm&quot;&gt;{error}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;bg-blue-50 rounded-lg p-4 border border-blue-100&quot;&gt;&#10;            &lt;h3 className=&quot;text-sm font-medium text-blue-800 mb-2&quot;&gt;Formato esperado da planilha:&lt;/h3&gt;&#10;            &lt;p className=&quot;text-xs text-blue-700&quot;&gt;&#10;              A planilha deve conter as seguintes colunas: NOME DA TAREFA, ITEM, STATUS, ATRIBUIDO, &#10;              AREA CONDICIONADA, PERIODICIDADE, DATA INICIO, DATA DE TÉRMINO, DURAÇÃO EM DIAS, &#10;              DATA LIMITE, COMENTÁRIOS&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Actions */}&#10;        &lt;div className=&quot;flex items-center justify-end p-6 border-t border-gray-200 space-x-2&quot;&gt;&#10;          &lt;Button variant=&quot;secondary&quot; onClick={onClose}&gt;&#10;            Cancelar&#10;          &lt;/Button&gt;&#10;          &lt;Button &#10;            onClick={handleImport} &#10;            className=&quot;bg-green-600 hover:bg-green-700&quot;&#10;            disabled={!file}&#10;          &gt;&#10;            Importar Planilha&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import { useState, useRef } from 'react';&#13;&#10;import { XIcon, UploadIcon, MicrosoftExcelLogoIcon, WarningCircleIcon, CheckIcon } from '@phosphor-icons/react';&#13;&#10;import { Button } from '@/components/ui/button';&#13;&#10;import { Label } from '@/components/ui/label';&#13;&#10;import { cn } from '@/lib/utils';&#13;&#10;&#13;&#10;interface ImportSpreadsheetModalProps {&#13;&#10;  onClose(): void;&#13;&#10;  onImport(file: File): void;&#13;&#10;}&#13;&#10;&#13;&#10;export default function ImportSpreadsheetModal({&#13;&#10;  onClose,&#13;&#10;  onImport,&#13;&#10;}: ImportSpreadsheetModalProps) {&#13;&#10;  const [file, setFile] = useState&lt;File | null&gt;(null);&#13;&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#13;&#10;  const [isDragging, setIsDragging] = useState(false);&#13;&#10;  const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#13;&#10;&#13;&#10;  const handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#13;&#10;    const selectedFile = e.target.files?.[0];&#13;&#10;    validateAndSetFile(selectedFile);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleDrop = (e: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;    setIsDragging(false);&#13;&#10;    &#13;&#10;    const selectedFile = e.dataTransfer.files?.[0];&#13;&#10;    validateAndSetFile(selectedFile);&#13;&#10;  };&#13;&#10;&#13;&#10;  const validateAndSetFile = (selectedFile: File | undefined) =&gt; {&#13;&#10;    setError(null);&#13;&#10;    &#13;&#10;    if (!selectedFile) {&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    // Check file extension&#13;&#10;    const fileExtension = selectedFile.name.split('.').pop()?.toLowerCase();&#13;&#10;    const validExtensions = ['csv', 'xlsx', 'xls'];&#13;&#10;    &#13;&#10;    if (!fileExtension || !validExtensions.includes(fileExtension)) {&#13;&#10;      setError(`Formato de arquivo inválido. Por favor, selecione um arquivo .csv, .xlsx ou .xls.`);&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    // Check file size (max 10MB)&#13;&#10;    const maxSize = 10 * 1024 * 1024; // 10MB in bytes&#13;&#10;    if (selectedFile.size &gt; maxSize) {&#13;&#10;      setError(`O arquivo é muito grande. O tamanho máximo permitido é 10MB.`);&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    setFile(selectedFile);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleDragOver = (e: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;    setIsDragging(true);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleDragLeave = (e: React.DragEvent&lt;HTMLDivElement&gt;) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;    setIsDragging(false);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleImport = () =&gt; {&#13;&#10;    if (file) {&#13;&#10;      onImport(file);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const triggerFileInput = () =&gt; {&#13;&#10;    fileInputRef.current?.click();&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#13;&#10;      &lt;div className=&quot;bg-white rounded-3xl shadow-xl w-full max-w-md&quot;&gt;&#13;&#10;        {/* Header */}&#13;&#10;        &lt;div className=&quot;flex items-center justify-between p-6 border-b border-gray-200&quot;&gt;&#13;&#10;          &lt;h2 className=&quot;text-lg font-semibold flex items-center&quot;&gt;&#13;&#10;            &lt;MicrosoftExcelLogoIcon className=&quot;h-5 w-5 mr-2&quot; /&gt;&#13;&#10;            Importar Planilha&#13;&#10;          &lt;/h2&gt;&#13;&#10;          &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={onClose}&gt;&#13;&#10;            &lt;XIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;          &lt;/Button&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Content */}&#13;&#10;        &lt;div className=&quot;p-6 space-y-6&quot;&gt;&#13;&#10;          &lt;div&gt;&#13;&#10;            &lt;Label className=&quot;text-sm font-medium&quot;&gt;Arquivo de Planilha&lt;/Label&gt;&#13;&#10;            &lt;div&#13;&#10;              className={cn(&#13;&#10;                &quot;mt-2 border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors&quot;,&#13;&#10;                isDragging ? &quot;border-blue-500 bg-blue-50&quot; : &quot;border-gray-300 hover:border-gray-400&quot;,&#13;&#10;                file ? &quot;bg-green-50 border-green-300&quot; : &quot;&quot;&#13;&#10;              )}&#13;&#10;              onDragOver={handleDragOver}&#13;&#10;              onDragLeave={handleDragLeave}&#13;&#10;              onDrop={handleDrop}&#13;&#10;              onClick={triggerFileInput}&#13;&#10;            &gt;&#13;&#10;              &lt;input&#13;&#10;                type=&quot;file&quot;&#13;&#10;                ref={fileInputRef}&#13;&#10;                onChange={handleFileChange}&#13;&#10;                accept=&quot;.csv,.xlsx,.xls&quot;&#13;&#10;                className=&quot;hidden&quot;&#13;&#10;              /&gt;&#13;&#10;              &#13;&#10;              {file ? (&#13;&#10;                &lt;div className=&quot;flex flex-col items-center&quot;&gt;&#13;&#10;                  &lt;div className=&quot;w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mb-3&quot;&gt;&#13;&#10;                    &lt;CheckIcon className=&quot;h-6 w-6 text-green-600&quot; /&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;p className=&quot;text-sm font-medium text-gray-900 mb-1&quot;&gt;{file.name}&lt;/p&gt;&#13;&#10;                  &lt;p className=&quot;text-xs text-gray-500&quot;&gt;&#13;&#10;                    {(file.size / 1024 / 1024).toFixed(2)} MB&#13;&#10;                  &lt;/p&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              ) : (&#13;&#10;                &lt;div className=&quot;flex flex-col items-center&quot;&gt;&#13;&#10;                  &lt;div className=&quot;w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mb-3&quot;&gt;&#13;&#10;                    &lt;UploadIcon className=&quot;h-6 w-6 text-gray-600&quot; /&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;p className=&quot;text-sm font-medium text-gray-900 mb-1&quot;&gt;&#13;&#10;                    Arraste e solte seu arquivo aqui ou clique para selecionar&#13;&#10;                  &lt;/p&gt;&#13;&#10;                  &lt;p className=&quot;text-xs text-gray-500&quot;&gt;&#13;&#10;                    Formatos suportados: .CSV, .XLSX, .XLS (máx. 10MB)&#13;&#10;                  &lt;/p&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              )}&#13;&#10;            &lt;/div&gt;&#13;&#10;            &#13;&#10;            {error &amp;&amp; (&#13;&#10;              &lt;div className=&quot;mt-3 flex items-start space-x-2 text-red-600&quot;&gt;&#13;&#10;                &lt;WarningCircleIcon className=&quot;h-4 w-4 mt-0.5 flex-shrink-0&quot; /&gt;&#13;&#10;                &lt;p className=&quot;text-sm&quot;&gt;{error}&lt;/p&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className=&quot;bg-blue-50 rounded-lg p-4 border border-blue-100&quot;&gt;&#13;&#10;            &lt;h3 className=&quot;text-sm font-medium text-blue-800 mb-2&quot;&gt;Formato esperado da planilha:&lt;/h3&gt;&#13;&#10;            &lt;p className=&quot;text-xs text-blue-700&quot;&gt;&#13;&#10;              A planilha deve conter as seguintes colunas: NOME DA TAREFA, ITEM, STATUS, ATRIBUIDO, &#13;&#10;              AREA CONDICIONADA, PERIODICIDADE, DATA INICIO, DATA DE TÉRMINO, DURAÇÃO EM DIAS, &#13;&#10;              DATA LIMITE, COMENTÁRIOS&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Actions */}&#13;&#10;        &lt;div className=&quot;flex items-center justify-end p-6 border-t border-gray-200 space-x-2&quot;&gt;&#13;&#10;          &lt;Button variant=&quot;secondary&quot; onClick={onClose}&gt;&#13;&#10;            Cancelar&#13;&#10;          &lt;/Button&gt;&#13;&#10;          &lt;Button &#13;&#10;            onClick={handleImport} &#13;&#10;            className=&quot;bg-green-600 hover:bg-green-700&quot;&#13;&#10;            disabled={!file}&#13;&#10;          &gt;&#13;&#10;            Importar Planilha&#13;&#10;          &lt;/Button&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/kanban/KanbanColumn.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/kanban/KanbanColumn.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { Plus, GripVertical, Edit } from 'lucide-react';&#10;import { Button } from '@/components/ui/button';&#10;import { Badge } from '@/components/ui/badge';&#10;import TaskCard from './TaskCard';&#10;import { cn } from '@/lib/utils';&#10;&#10;interface Task {&#10;  id: string;&#10;  nome: string;&#10;  item: string;&#10;  status: 'concluido' | 'pendente' | 'em_andamento' | 'atrasado';&#10;  atribuido: string;&#10;  areaCondicionante: string;&#10;  periodicidade: string;&#10;  dataInicio: string;&#10;  dataTermino: string;&#10;  duracao: number;&#10;  dataLimite: string;&#10;  comentarios: string;&#10;}&#10;&#10;interface Column {&#10;  id: string;&#10;  title: string;&#10;  tasks: Task[];&#10;  color: string;&#10;}&#10;&#10;interface KanbanColumnProps {&#10;  column: Column;&#10;  index: number;&#10;  onDragStart(e: React.DragEvent, taskId: string): void;&#10;  onDragOver(e: React.DragEvent): void;&#10;  onDrop(e: React.DragEvent, columnId: string): void;&#10;  onColumnDragStart(e: React.DragEvent, columnId: string): void;&#10;  onColumnDragOver(e: React.DragEvent): void;&#10;  onColumnDrop(e: React.DragEvent, index: number): void;&#10;  onTaskClick(task: Task): void;&#10;  onEditColumn(column: Column): void;&#10;}&#10;&#10;export default function KanbanColumn({&#10;  column,&#10;  index,&#10;  onDragStart,&#10;  onDragOver,&#10;  onDrop,&#10;  onColumnDragStart,&#10;  onColumnDragOver,&#10;  onColumnDrop,&#10;  onTaskClick,&#10;  onEditColumn,&#10;}: KanbanColumnProps) {&#10;  return (&#10;    &lt;div&#10;      className=&quot;w-80 bg-gray-100 rounded-3xl p-4 h-fit&quot;&#10;      draggable&#10;      onDragStart={(e) =&gt; onColumnDragStart(e, column.id)}&#10;      onDragOver={onDragOver}&#10;      onDrop={(e) =&gt; {&#10;        if (e.dataTransfer.getData('column')) {&#10;          onColumnDrop(e, index);&#10;        } else {&#10;          onDrop(e, column.id);&#10;        }&#10;      }}&#10;    &gt;&#10;      {/* Column Header */}&#10;      &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;          &lt;GripVertical className=&quot;h-4 w-4 text-gray-400 cursor-grab&quot; /&gt;&#10;          &lt;div className={cn(&quot;w-3 h-3 rounded-full&quot;, column.color)} /&gt;&#10;          &lt;h3 className=&quot;font-semibold text-gray-900&quot;&gt;{column.title}&lt;/h3&gt;&#10;          &lt;Badge variant=&quot;secondary&quot; className=&quot;text-xs&quot;&gt;&#10;            {column.tasks.length}&#10;          &lt;/Badge&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;          &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; className=&quot;text-gray-500 hover:text-gray-700&quot;&gt;&#10;            &lt;Plus className=&quot;h-4 w-4&quot; /&gt;&#10;          &lt;/Button&gt;&#10;          &lt;Button &#10;            variant=&quot;ghost&quot; &#10;            size=&quot;sm&quot; &#10;            className=&quot;text-gray-500 hover:text-gray-700&quot;&#10;            onClick={() =&gt; onEditColumn(column)}&#10;          &gt;&#10;            &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Tasks */}&#10;      &lt;div className=&quot;space-y-3&quot;&gt;&#10;        {column.tasks.map((task) =&gt; (&#10;          &lt;TaskCard&#10;            key={task.id}&#10;            task={task}&#10;            onDragStart={onDragStart}&#10;            onClick={() =&gt; onTaskClick(task)}&#10;          /&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      {/* Drop Zone */}&#10;      {column.tasks.length === 0 &amp;&amp; (&#10;        &lt;div className=&quot;border-2 border-dashed border-gray-300 rounded-3xl p-8 text-center&quot;&gt;&#10;          &lt;p className=&quot;text-gray-500 text-sm&quot;&gt;Arraste tarefas aqui&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import React from 'react';&#13;&#10;import { PlusIcon, DotsNineIcon, PencilIcon } from '@phosphor-icons/react';&#13;&#10;import { Button } from '@/components/ui/button';&#13;&#10;import { Badge } from '@/components/ui/badge';&#13;&#10;import TaskCard from './TaskCard';&#13;&#10;import { cn } from '@/lib/utils';&#13;&#10;&#13;&#10;interface Task {&#13;&#10;  id: string;&#13;&#10;  nome: string;&#13;&#10;  item: string;&#13;&#10;  status: 'concluido' | 'pendente' | 'em_andamento' | 'atrasado';&#13;&#10;  atribuido: string;&#13;&#10;  areaCondicionante: string;&#13;&#10;  periodicidade: string;&#13;&#10;  dataInicio: string;&#13;&#10;  dataTermino: string;&#13;&#10;  duracao: number;&#13;&#10;  dataLimite: string;&#13;&#10;  comentarios: string;&#13;&#10;}&#13;&#10;&#13;&#10;interface Column {&#13;&#10;  id: string;&#13;&#10;  title: string;&#13;&#10;  tasks: Task[];&#13;&#10;  color: string;&#13;&#10;}&#13;&#10;&#13;&#10;interface KanbanColumnProps {&#13;&#10;  column: Column;&#13;&#10;  index: number;&#13;&#10;  onDragStart(e: React.DragEvent, taskId: string): void;&#13;&#10;  onDragOver(e: React.DragEvent): void;&#13;&#10;  onDrop(e: React.DragEvent, columnId: string): void;&#13;&#10;  onColumnDragStart(e: React.DragEvent, columnId: string): void;&#13;&#10;  onColumnDragOver(e: React.DragEvent): void;&#13;&#10;  onColumnDrop(e: React.DragEvent, index: number): void;&#13;&#10;  onTaskClick(task: Task): void;&#13;&#10;  onEditColumn(column: Column): void;&#13;&#10;}&#13;&#10;&#13;&#10;export default function KanbanColumn({&#13;&#10;  column,&#13;&#10;  index,&#13;&#10;  onDragStart,&#13;&#10;  onDragOver,&#13;&#10;  onDrop,&#13;&#10;  onColumnDragStart,&#13;&#10;  onColumnDragOver,&#13;&#10;  onColumnDrop,&#13;&#10;  onTaskClick,&#13;&#10;  onEditColumn,&#13;&#10;}: KanbanColumnProps) {&#13;&#10;  return (&#13;&#10;    &lt;div&#13;&#10;      className=&quot;w-80 bg-gray-100 rounded-3xl p-4 h-fit&quot;&#13;&#10;      draggable&#13;&#10;      onDragStart={(e) =&gt; onColumnDragStart(e, column.id)}&#13;&#10;      onDragOver={onDragOver}&#13;&#10;      onDrop={(e) =&gt; {&#13;&#10;        if (e.dataTransfer.getData('column')) {&#13;&#10;          onColumnDrop(e, index);&#13;&#10;        } else {&#13;&#10;          onDrop(e, column.id);&#13;&#10;        }&#13;&#10;      }}&#13;&#10;    &gt;&#13;&#10;      {/* Column Header */}&#13;&#10;      &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;          &lt;DotsNineIcon className=&quot;h-4 w-4 text-gray-400 cursor-grab&quot; /&gt;&#13;&#10;          &lt;div className={cn(&quot;w-3 h-3 rounded-full&quot;, column.color)} /&gt;&#13;&#10;          &lt;h3 className=&quot;font-semibold text-gray-900&quot;&gt;{column.title}&lt;/h3&gt;&#13;&#10;          &lt;Badge variant=&quot;secondary&quot; className=&quot;text-xs&quot;&gt;&#13;&#10;            {column.tasks.length}&#13;&#10;          &lt;/Badge&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#13;&#10;          &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; className=&quot;text-gray-500 hover:text-gray-700&quot;&gt;&#13;&#10;            &lt;PlusIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;          &lt;/Button&gt;&#13;&#10;          &lt;Button &#13;&#10;            variant=&quot;ghost&quot; &#13;&#10;            size=&quot;sm&quot; &#13;&#10;            className=&quot;text-gray-500 hover:text-gray-700&quot;&#13;&#10;            onClick={() =&gt; onEditColumn(column)}&#13;&#10;          &gt;&#13;&#10;            &lt;PencilIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;          &lt;/Button&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Tasks */}&#13;&#10;      &lt;div className=&quot;space-y-3&quot;&gt;&#13;&#10;        {column.tasks.map((task) =&gt; (&#13;&#10;          &lt;TaskCard&#13;&#10;            key={task.id}&#13;&#10;            task={task}&#13;&#10;            onDragStart={onDragStart}&#13;&#10;            onClick={() =&gt; onTaskClick(task)}&#13;&#10;          /&gt;&#13;&#10;        ))}&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Drop Zone */}&#13;&#10;      {column.tasks.length === 0 &amp;&amp; (&#13;&#10;        &lt;div className=&quot;border-2 border-dashed border-gray-300 rounded-3xl p-8 text-center&quot;&gt;&#13;&#10;          &lt;p className=&quot;text-gray-500 text-sm&quot;&gt;Arraste tarefas aqui&lt;/p&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      )}&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/solicitacoes/SolicitacoesKanban.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/solicitacoes/SolicitacoesKanban.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { Plus, Filter, Users, Calendar, Search, ArrowLeft } from 'lucide-react';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Badge } from '@/components/ui/badge';&#10;import { Solicitacao } from '@/lib/types';&#10;import { mockSolicitacoes } from '@/lib/mockData';&#10;import { getResponsavelNameById } from '@/lib/mockData';&#10;import SolicitacaoModal from './SolicitacaoModal';&#10;import Link from 'next/link';&#10;&#10;interface Column {&#10;  id: Solicitacao['status'];&#10;  title: string;&#10;  tasks: Solicitacao[];&#10;  color: string;&#10;}&#10;&#10;export default function SolicitacoesKanban() {&#10;  // Initialize columns with mock data&#10;  const initialColumns: Column[] = [&#10;    {&#10;      id: 'pendente',&#10;      title: 'Pendente',&#10;      color: 'bg-yellow-500',&#10;      tasks: mockSolicitacoes.filter(s =&gt; s.status === 'pendente'),&#10;    },&#10;    {&#10;      id: 'em_andamento',&#10;      title: 'Em Andamento',&#10;      color: 'bg-blue-500',&#10;      tasks: mockSolicitacoes.filter(s =&gt; s.status === 'em_andamento'),&#10;    },&#10;    {&#10;      id: 'concluido',&#10;      title: 'Concluído',&#10;      color: 'bg-green-500',&#10;      tasks: mockSolicitacoes.filter(s =&gt; s.status === 'concluido'),&#10;    },&#10;    {&#10;      id: 'atrasado',&#10;      title: 'Atrasado',&#10;      color: 'bg-red-500',&#10;      tasks: mockSolicitacoes.filter(s =&gt; s.status === 'atrasado'),&#10;    },&#10;  ];&#10;&#10;  const [columns, setColumns] = useState&lt;Column[]&gt;(initialColumns);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [selectedTask, setSelectedTask] = useState&lt;Solicitacao | null&gt;(null);&#10;  const [showTaskModal, setShowTaskModal] = useState(false);&#10;&#10;  const handleDragStart = (e: React.DragEvent, taskId: string) =&gt; {&#10;    e.dataTransfer.setData('text/plain', taskId);&#10;  };&#10;&#10;  const handleDragOver = (e: React.DragEvent) =&gt; {&#10;    e.preventDefault();&#10;  };&#10;&#10;  const handleDrop = (e: React.DragEvent, targetColumnId: Solicitacao['status']) =&gt; {&#10;    e.preventDefault();&#10;    const taskId = e.dataTransfer.getData('text/plain');&#10;&#10;    setColumns(prevColumns =&gt; {&#10;      const newColumns = [...prevColumns];&#10;      let task: Solicitacao | null = null;&#10;&#10;      // Find and remove task from source column&#10;      for (let column of newColumns) {&#10;        const taskIndex = column.tasks.findIndex(t =&gt; t.idSolicitacao === taskId);&#10;        if (taskIndex &gt; -1) {&#10;          task = column.tasks[taskIndex];&#10;          column.tasks.splice(taskIndex, 1);&#10;          break;&#10;        }&#10;      }&#10;&#10;      // Add task to target column and update status&#10;      if (task) {&#10;        const targetColumn = newColumns.find(col =&gt; col.id === targetColumnId);&#10;        if (targetColumn) {&#10;          task.status = targetColumnId;&#10;          targetColumn.tasks.push(task);&#10;        }&#10;      }&#10;&#10;      return newColumns;&#10;    });&#10;  };&#10;&#10;  const handleCreateTask = () =&gt; {&#10;    setSelectedTask(null);&#10;    setShowTaskModal(true);&#10;  };&#10;&#10;  const handleSaveTask = (task: Solicitacao) =&gt; {&#10;    if (selectedTask) {&#10;      // Update existing task&#10;      setColumns(prevColumns =&gt; {&#10;        return prevColumns.map(column =&gt; {&#10;          return {&#10;            ...column,&#10;            tasks: column.tasks.map(t =&gt; &#10;              t.idSolicitacao === task.idSolicitacao ? task : t&#10;            )&#10;          };&#10;        });&#10;      });&#10;    } else {&#10;      // Add new task to the appropriate column&#10;      setColumns(prevColumns =&gt; {&#10;        return prevColumns.map(column =&gt; {&#10;          if (column.id === task.status) {&#10;            return {&#10;              ...column,&#10;              tasks: [...column.tasks, task]&#10;            };&#10;          }&#10;          return column;&#10;        });&#10;      });&#10;    }&#10;    setShowTaskModal(false);&#10;    setSelectedTask(null);&#10;  };&#10;&#10;  // Filter tasks based on search query&#10;  const filteredColumns = columns.map(column =&gt; ({&#10;    ...column,&#10;    tasks: column.tasks.filter(task =&gt;&#10;      task.dsAssunto.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      task.dsDescricao.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      task.cdIdentificacao.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;      (task.idResponsavel &amp;&amp; &#10;        getResponsavelNameById(task.idResponsavel).toLowerCase().includes(searchQuery.toLowerCase()))&#10;    ),&#10;  }));&#10;&#10;  const totalTasks = columns.reduce((sum, column) =&gt; sum + column.tasks.length, 0);&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;            &lt;h1 className=&quot;text-2xl font-bold text-gray-900 flex items-center&quot;&gt;&#10;              Solicitações - Quadro Kanban&#10;            &lt;/h1&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              &lt;Badge variant=&quot;secondary&quot; className=&quot;text-sm hover:bg-gray-100&quot;&gt;&#10;                {totalTasks} solicitações&#10;              &lt;/Badge&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;            &lt;Button&#10;              variant=&quot;outline&quot;&#10;              className=&quot;bg-white hover:bg-gray-50&quot;&#10;              onClick={() =&gt; {&#10;                // This would be handled by a router in a real implementation&#10;                window.location.href = &quot;/solicitacoes&quot;;&#10;              }}&#10;            &gt;&#10;              &lt;ArrowLeft className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Voltar para Lista&#10;            &lt;/Button&gt;&#10;            &lt;Button onClick={handleCreateTask} className=&quot;bg-blue-600 hover:bg-blue-700&quot;&gt;&#10;              &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Nova Solicitação&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;div className=&quot;flex-1 flex flex-row items-center space-x-4&quot;&gt;&#10;            &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;              &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;              &lt;Input&#10;                placeholder=&quot;Pesquisar por assunto, descrição, identificação ou responsável...&quot;&#10;                value={searchQuery}&#10;                onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;                className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;Button variant=&quot;secondary&quot; className=&quot;h-10 px-4&quot;&gt;&#10;              &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Filtrar&#10;            &lt;/Button&gt;&#10;            &lt;Button variant=&quot;secondary&quot; className=&quot;h-10 px-4&quot;&gt;&#10;              &lt;Users className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Responsáveis&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Kanban Board */}&#10;      &lt;div className=&quot;flex-1 overflow-x-auto p-6&quot;&gt;&#10;        &lt;div className=&quot;flex space-x-6 min-w-max&quot;&gt;&#10;          {filteredColumns.map((column) =&gt; (&#10;            &lt;div&#10;              key={column.id}&#10;              className=&quot;w-80 flex flex-col bg-gray-100 rounded-md&quot;&#10;              onDragOver={handleDragOver}&#10;              onDrop={(e) =&gt; handleDrop(e, column.id)}&#10;            &gt;&#10;              &lt;div &#10;                className={`p-3 font-medium text-white rounded-t-md ${column.color} flex justify-between items-center`}&#10;              &gt;&#10;                &lt;span&gt;{column.title}&lt;/span&gt;&#10;                &lt;Badge variant=&quot;secondary&quot; className=&quot;bg-white text-gray-800&quot;&gt;&#10;                  {column.tasks.length}&#10;                &lt;/Badge&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;p-2 flex-1 overflow-y-auto max-h-[calc(100vh-250px)]&quot;&gt;&#10;                {column.tasks.length === 0 ? (&#10;                  &lt;div className=&quot;p-3 text-center text-gray-500 text-sm&quot;&gt;&#10;                    Nenhuma solicitação nesta coluna&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  column.tasks.map((task) =&gt; (&#10;                    &lt;div&#10;                      key={task.idSolicitacao}&#10;                      className=&quot;bg-white p-3 rounded-md shadow-sm mb-2 cursor-pointer hover:shadow-md&quot;&#10;                      draggable&#10;                      onDragStart={(e) =&gt; handleDragStart(e, task.idSolicitacao)}&#10;                      onClick={() =&gt; setSelectedTask(task)}&#10;                    &gt;&#10;                      &lt;div className=&quot;text-sm font-medium mb-1&quot;&gt;{task.dsAssunto}&lt;/div&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500 mb-2&quot;&gt;{task.cdIdentificacao}&lt;/div&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-600 line-clamp-2 mb-2&quot;&gt;&#10;                        {task.dsDescricao}&#10;                      &lt;/div&gt;&#10;                      {task.idResponsavel &amp;&amp; (&#10;                        &lt;div className=&quot;flex items-center mt-2&quot;&gt;&#10;                          &lt;div className=&quot;w-5 h-5 rounded-full bg-gray-200 flex items-center justify-center text-xs mr-2&quot;&gt;&#10;                            {getResponsavelNameById(task.idResponsavel).charAt(0)}&#10;                          &lt;/div&gt;&#10;                          &lt;span className=&quot;text-xs&quot;&gt;{getResponsavelNameById(task.idResponsavel)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                      {task.dsAnexos.length &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;mt-2&quot;&gt;&#10;                          &lt;Badge variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#10;                            {task.dsAnexos.length} anexo(s)&#10;                          &lt;/Badge&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  ))&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Task Modal */}&#10;      {showTaskModal &amp;&amp; (&#10;        &lt;SolicitacaoModal&#10;          solicitacao={selectedTask}&#10;          onClose={() =&gt; {&#10;            setShowTaskModal(false);&#10;            setSelectedTask(null);&#10;          }}&#10;          onSave={handleSaveTask}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import { useState } from 'react';&#13;&#10;import { PlusIcon, FunnelIcon, UsersIcon, CalendarIcon, MagnifyingGlassIcon, ArrowLeftIcon } from '@phosphor-icons/react';&#13;&#10;import { Button } from '@/components/ui/button';&#13;&#10;import { Input } from '@/components/ui/input';&#13;&#10;import { Badge } from '@/components/ui/badge';&#13;&#10;import { Solicitacao } from '@/lib/types';&#13;&#10;import { mockSolicitacoes } from '@/lib/mockData';&#13;&#10;import { getResponsavelNameById } from '@/lib/mockData';&#13;&#10;import SolicitacaoModal from './SolicitacaoModal';&#13;&#10;import Link from 'next/link';&#13;&#10;&#13;&#10;interface Column {&#13;&#10;  id: Solicitacao['status'];&#13;&#10;  title: string;&#13;&#10;  tasks: Solicitacao[];&#13;&#10;  color: string;&#13;&#10;}&#13;&#10;&#13;&#10;export default function SolicitacoesKanban() {&#13;&#10;  // Initialize columns with mock data&#13;&#10;  const initialColumns: Column[] = [&#13;&#10;    {&#13;&#10;      id: 'pendente',&#13;&#10;      title: 'Pendente',&#13;&#10;      color: 'bg-yellow-500',&#13;&#10;      tasks: mockSolicitacoes.filter(s =&gt; s.status === 'pendente'),&#13;&#10;    },&#13;&#10;    {&#13;&#10;      id: 'em_andamento',&#13;&#10;      title: 'Em Andamento',&#13;&#10;      color: 'bg-blue-500',&#13;&#10;      tasks: mockSolicitacoes.filter(s =&gt; s.status === 'em_andamento'),&#13;&#10;    },&#13;&#10;    {&#13;&#10;      id: 'concluido',&#13;&#10;      title: 'Concluído',&#13;&#10;      color: 'bg-green-500',&#13;&#10;      tasks: mockSolicitacoes.filter(s =&gt; s.status === 'concluido'),&#13;&#10;    },&#13;&#10;    {&#13;&#10;      id: 'atrasado',&#13;&#10;      title: 'Atrasado',&#13;&#10;      color: 'bg-red-500',&#13;&#10;      tasks: mockSolicitacoes.filter(s =&gt; s.status === 'atrasado'),&#13;&#10;    },&#13;&#10;  ];&#13;&#10;&#13;&#10;  const [columns, setColumns] = useState&lt;Column[]&gt;(initialColumns);&#13;&#10;  const [searchQuery, setSearchQuery] = useState('');&#13;&#10;  const [selectedTask, setSelectedTask] = useState&lt;Solicitacao | null&gt;(null);&#13;&#10;  const [showTaskModal, setShowTaskModal] = useState(false);&#13;&#10;&#13;&#10;  const handleDragStart = (e: React.DragEvent, taskId: string) =&gt; {&#13;&#10;    e.dataTransfer.setData('text/plain', taskId);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleDragOver = (e: React.DragEvent) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleDrop = (e: React.DragEvent, targetColumnId: Solicitacao['status']) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;    const taskId = e.dataTransfer.getData('text/plain');&#13;&#10;&#13;&#10;    setColumns(prevColumns =&gt; {&#13;&#10;      const newColumns = [...prevColumns];&#13;&#10;      let task: Solicitacao | null = null;&#13;&#10;&#13;&#10;      // Find and remove task from source column&#13;&#10;      for (let column of newColumns) {&#13;&#10;        const taskIndex = column.tasks.findIndex(t =&gt; t.idSolicitacao === taskId);&#13;&#10;        if (taskIndex &gt; -1) {&#13;&#10;          task = column.tasks[taskIndex];&#13;&#10;          column.tasks.splice(taskIndex, 1);&#13;&#10;          break;&#13;&#10;        }&#13;&#10;      }&#13;&#10;&#13;&#10;      // Add task to target column and update status&#13;&#10;      if (task) {&#13;&#10;        const targetColumn = newColumns.find(col =&gt; col.id === targetColumnId);&#13;&#10;        if (targetColumn) {&#13;&#10;          task.status = targetColumnId;&#13;&#10;          targetColumn.tasks.push(task);&#13;&#10;        }&#13;&#10;      }&#13;&#10;&#13;&#10;      return newColumns;&#13;&#10;    });&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleCreateTask = () =&gt; {&#13;&#10;    setSelectedTask(null);&#13;&#10;    setShowTaskModal(true);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleSaveTask = (task: Solicitacao) =&gt; {&#13;&#10;    if (selectedTask) {&#13;&#10;      // Update existing task&#13;&#10;      setColumns(prevColumns =&gt; {&#13;&#10;        return prevColumns.map(column =&gt; {&#13;&#10;          return {&#13;&#10;            ...column,&#13;&#10;            tasks: column.tasks.map(t =&gt; &#13;&#10;              t.idSolicitacao === task.idSolicitacao ? task : t&#13;&#10;            )&#13;&#10;          };&#13;&#10;        });&#13;&#10;      });&#13;&#10;    } else {&#13;&#10;      // Add new task to the appropriate column&#13;&#10;      setColumns(prevColumns =&gt; {&#13;&#10;        return prevColumns.map(column =&gt; {&#13;&#10;          if (column.id === task.status) {&#13;&#10;            return {&#13;&#10;              ...column,&#13;&#10;              tasks: [...column.tasks, task]&#13;&#10;            };&#13;&#10;          }&#13;&#10;          return column;&#13;&#10;        });&#13;&#10;      });&#13;&#10;    }&#13;&#10;    setShowTaskModal(false);&#13;&#10;    setSelectedTask(null);&#13;&#10;  };&#13;&#10;&#13;&#10;  // Filter tasks based on search query&#13;&#10;  const filteredColumns = columns.map(column =&gt; ({&#13;&#10;    ...column,&#13;&#10;    tasks: column.tasks.filter(task =&gt;&#13;&#10;      task.dsAssunto.toLowerCase().includes(searchQuery.toLowerCase()) ||&#13;&#10;      task.dsDescricao.toLowerCase().includes(searchQuery.toLowerCase()) ||&#13;&#10;      task.cdIdentificacao.toLowerCase().includes(searchQuery.toLowerCase()) ||&#13;&#10;      (task.idResponsavel &amp;&amp; &#13;&#10;        getResponsavelNameById(task.idResponsavel).toLowerCase().includes(searchQuery.toLowerCase()))&#13;&#10;    ),&#13;&#10;  }));&#13;&#10;&#13;&#10;  const totalTasks = columns.reduce((sum, column) =&gt; sum + column.tasks.length, 0);&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;flex flex-col min-h-0 flex-1&quot;&gt;&#13;&#10;      {/* Header */}&#13;&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex space-x-4&quot;&gt;&#13;&#10;            &lt;h1 className=&quot;text-2xl font-bold text-gray-900 flex items-center&quot;&gt;&#13;&#10;              Solicitações - Quadro Kanban&#13;&#10;            &lt;/h1&gt;&#13;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#13;&#10;              &lt;Badge variant=&quot;secondary&quot; className=&quot;text-sm hover:bg-gray-100&quot;&gt;&#13;&#10;                {totalTasks} solicitações&#13;&#10;              &lt;/Badge&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className=&quot;flex space-x-2&quot;&gt;&#13;&#10;            &lt;Button&#13;&#10;              variant=&quot;outline&quot;&#13;&#10;              className=&quot;bg-white hover:bg-gray-50&quot;&#13;&#10;              onClick={() =&gt; {&#13;&#10;                // This would be handled by a router in a real implementation&#13;&#10;                window.location.href = &quot;/solicitacoes&quot;;&#13;&#10;              }}&#13;&#10;            &gt;&#13;&#10;              &lt;ArrowLeftIcon className=&quot;h-4 w-4 mr-2&quot; /&gt;&#13;&#10;              Voltar para Lista&#13;&#10;            &lt;/Button&gt;&#13;&#10;            &lt;Button onClick={handleCreateTask} className=&quot;bg-blue-600 hover:bg-blue-700&quot;&gt;&#13;&#10;              &lt;PlusIcon className=&quot;h-4 w-4 mr-2&quot; /&gt;&#13;&#10;              Nova Solicitação&#13;&#10;            &lt;/Button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex-1 flex flex-row items-center space-x-4&quot;&gt;&#13;&#10;            &lt;div className=&quot;flex-1 relative&quot;&gt;&#13;&#10;              &lt;MagnifyingGlassIcon className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#13;&#10;              &lt;Input&#13;&#10;                placeholder=&quot;Pesquisar por assunto, descrição, identificação ou responsável...&quot;&#13;&#10;                value={searchQuery}&#13;&#10;                onChange={(e) =&gt; setSearchQuery(e.target.value)}&#13;&#10;                className=&quot;pl-10 h-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#13;&#10;              /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;Button variant=&quot;secondary&quot; className=&quot;h-10 px-4&quot;&gt;&#13;&#10;              &lt;FunnelIcon className=&quot;h-4 w-4 mr-2&quot; /&gt;&#13;&#10;              Filtrar&#13;&#10;            &lt;/Button&gt;&#13;&#10;            &lt;Button variant=&quot;secondary&quot; className=&quot;h-10 px-4&quot;&gt;&#13;&#10;              &lt;UsersIcon className=&quot;h-4 w-4 mr-2&quot; /&gt;&#13;&#10;              Responsáveis&#13;&#10;            &lt;/Button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Kanban Board */}&#13;&#10;      &lt;div className=&quot;flex-1 overflow-x-auto p-6&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex space-x-6 min-w-max&quot;&gt;&#13;&#10;          {filteredColumns.map((column) =&gt; (&#13;&#10;            &lt;div&#13;&#10;              key={column.id}&#13;&#10;              className=&quot;w-80 flex flex-col bg-gray-100 rounded-md&quot;&#13;&#10;              onDragOver={handleDragOver}&#13;&#10;              onDrop={(e) =&gt; handleDrop(e, column.id)}&#13;&#10;            &gt;&#13;&#10;              &lt;div &#13;&#10;                className={`p-3 font-medium text-white rounded-t-md ${column.color} flex justify-between items-center`}&#13;&#10;              &gt;&#13;&#10;                &lt;span&gt;{column.title}&lt;/span&gt;&#13;&#10;                &lt;Badge variant=&quot;secondary&quot; className=&quot;bg-white text-gray-800&quot;&gt;&#13;&#10;                  {column.tasks.length}&#13;&#10;                &lt;/Badge&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className=&quot;p-2 flex-1 overflow-y-auto max-h-[calc(100vh-250px)]&quot;&gt;&#13;&#10;                {column.tasks.length === 0 ? (&#13;&#10;                  &lt;div className=&quot;p-3 text-center text-gray-500 text-sm&quot;&gt;&#13;&#10;                    Nenhuma solicitação nesta coluna&#13;&#10;                  &lt;/div&gt;&#13;&#10;                ) : (&#13;&#10;                  column.tasks.map((task) =&gt; (&#13;&#10;                    &lt;div&#13;&#10;                      key={task.idSolicitacao}&#13;&#10;                      className=&quot;bg-white p-3 rounded-md shadow-sm mb-2 cursor-pointer hover:shadow-md&quot;&#13;&#10;                      draggable&#13;&#10;                      onDragStart={(e) =&gt; handleDragStart(e, task.idSolicitacao)}&#13;&#10;                      onClick={() =&gt; setSelectedTask(task)}&#13;&#10;                    &gt;&#13;&#10;                      &lt;div className=&quot;text-sm font-medium mb-1&quot;&gt;{task.dsAssunto}&lt;/div&gt;&#13;&#10;                      &lt;div className=&quot;text-xs text-gray-500 mb-2&quot;&gt;{task.cdIdentificacao}&lt;/div&gt;&#13;&#10;                      &lt;div className=&quot;text-xs text-gray-600 line-clamp-2 mb-2&quot;&gt;&#13;&#10;                        {task.dsDescricao}&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      {task.idResponsavel &amp;&amp; (&#13;&#10;                        &lt;div className=&quot;flex items-center mt-2&quot;&gt;&#13;&#10;                          &lt;div className=&quot;w-5 h-5 rounded-full bg-gray-200 flex items-center justify-center text-xs mr-2&quot;&gt;&#13;&#10;                            {getResponsavelNameById(task.idResponsavel).charAt(0)}&#13;&#10;                          &lt;/div&gt;&#13;&#10;                          &lt;span className=&quot;text-xs&quot;&gt;{getResponsavelNameById(task.idResponsavel)}&lt;/span&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      )}&#13;&#10;                      {task.dsAnexos.length &gt; 0 &amp;&amp; (&#13;&#10;                        &lt;div className=&quot;mt-2&quot;&gt;&#13;&#10;                          &lt;Badge variant=&quot;outline&quot; className=&quot;text-xs&quot;&gt;&#13;&#10;                            {task.dsAnexos.length} anexo(s)&#13;&#10;                          &lt;/Badge&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                      )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  ))&#13;&#10;                )}&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          ))}&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Task Modal */}&#13;&#10;      {showTaskModal &amp;&amp; (&#13;&#10;        &lt;SolicitacaoModal&#13;&#10;          solicitacao={selectedTask}&#13;&#10;          onClose={() =&gt; {&#13;&#10;            setShowTaskModal(false);&#13;&#10;            setSelectedTask(null);&#13;&#10;          }}&#13;&#10;          onSave={handleSaveTask}&#13;&#10;        /&gt;&#13;&#10;      )}&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/ui/checkbox.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/ui/checkbox.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as CheckboxPrimitive from '@radix-ui/react-checkbox';&#10;import { CheckIcon } from 'lucide-react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Checkbox = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CheckboxPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CheckboxPrimitive.Root&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CheckboxPrimitive.Root&#10;    ref={ref}&#10;    className={cn(&#10;      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;CheckboxPrimitive.Indicator&#10;      className={cn('flex items-center justify-center text-current')}&#10;    &gt;&#10;      &lt;CheckIcon className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;/CheckboxPrimitive.Indicator&gt;&#10;  &lt;/CheckboxPrimitive.Root&gt;&#10;));&#10;Checkbox.displayName = CheckboxPrimitive.Root.displayName;&#10;&#10;export { Checkbox };&#10;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import * as React from 'react';&#13;&#10;import * as CheckboxPrimitive from '@radix-ui/react-checkbox';&#13;&#10;import { CheckIcon } from '@phosphor-icons/react';&#13;&#10;&#13;&#10;import { cn } from '@/lib/utils';&#13;&#10;&#13;&#10;const Checkbox = React.forwardRef&lt;&#13;&#10;  React.ElementRef&lt;typeof CheckboxPrimitive.Root&gt;,&#13;&#10;  React.ComponentPropsWithoutRef&lt;typeof CheckboxPrimitive.Root&gt;&#13;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#13;&#10;  &lt;CheckboxPrimitive.Root&#13;&#10;    ref={ref}&#13;&#10;    className={cn(&#13;&#10;      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',&#13;&#10;      className&#13;&#10;    )}&#13;&#10;    {...props}&#13;&#10;  &gt;&#13;&#10;    &lt;CheckboxPrimitive.Indicator&#13;&#10;      className={cn('flex items-center justify-center text-current')}&#13;&#10;    &gt;&#13;&#10;      &lt;CheckIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;    &lt;/CheckboxPrimitive.Indicator&gt;&#13;&#10;  &lt;/CheckboxPrimitive.Root&gt;&#13;&#10;));&#13;&#10;Checkbox.displayName = CheckboxPrimitive.Root.displayName;&#13;&#10;&#13;&#10;export { Checkbox };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/ui/dialog.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/ui/dialog.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as DialogPrimitive from '@radix-ui/react-dialog';&#10;import { XIcon } from 'lucide-react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Dialog = DialogPrimitive.Root;&#10;&#10;const DialogTrigger = DialogPrimitive.Trigger;&#10;&#10;const DialogPortal = DialogPrimitive.Portal;&#10;&#10;const DialogClose = DialogPrimitive.Close;&#10;&#10;const DialogOverlay = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DialogPrimitive.Overlay&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Overlay&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;DialogPrimitive.Overlay&#10;    ref={ref}&#10;    className={cn(&#10;      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;&#10;&#10;const DialogContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DialogPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Content&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;DialogPortal&gt;&#10;    &lt;DialogOverlay /&gt;&#10;    &lt;DialogPrimitive.Content&#10;      ref={ref}&#10;      className={cn(&#10;        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-3xl',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;      &lt;DialogPrimitive.Close className=&quot;absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground&quot;&gt;&#10;        &lt;XIcon className=&quot;h-4 w-4&quot; /&gt;&#10;        &lt;span className=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&#10;      &lt;/DialogPrimitive.Close&gt;&#10;    &lt;/DialogPrimitive.Content&gt;&#10;  &lt;/DialogPortal&gt;&#10;));&#10;DialogContent.displayName = DialogPrimitive.Content.displayName;&#10;&#10;const DialogHeader = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div&#10;    className={cn(&#10;      'flex flex-col space-y-1.5 text-center sm:text-left',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;DialogHeader.displayName = 'DialogHeader';&#10;&#10;const DialogFooter = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div&#10;    className={cn(&#10;      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;DialogFooter.displayName = 'DialogFooter';&#10;&#10;const DialogTitle = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DialogPrimitive.Title&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Title&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;DialogPrimitive.Title&#10;    ref={ref}&#10;    className={cn(&#10;      'text-lg font-semibold leading-none tracking-tight',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DialogTitle.displayName = DialogPrimitive.Title.displayName;&#10;&#10;const DialogDescription = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DialogPrimitive.Description&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Description&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;DialogPrimitive.Description&#10;    ref={ref}&#10;    className={cn('text-sm text-muted-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DialogDescription.displayName = DialogPrimitive.Description.displayName;&#10;&#10;export {&#10;  Dialog,&#10;  DialogPortal,&#10;  DialogOverlay,&#10;  DialogClose,&#10;  DialogTrigger,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogFooter,&#10;  DialogTitle,&#10;  DialogDescription,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import * as React from 'react';&#13;&#10;import * as DialogPrimitive from '@radix-ui/react-dialog';&#13;&#10;import { XIcon } from '@phosphor-icons/react';&#13;&#10;&#13;&#10;import { cn } from '@/lib/utils';&#13;&#10;&#13;&#10;const Dialog = DialogPrimitive.Root;&#13;&#10;&#13;&#10;const DialogTrigger = DialogPrimitive.Trigger;&#13;&#10;&#13;&#10;const DialogPortal = DialogPrimitive.Portal;&#13;&#10;&#13;&#10;const DialogClose = DialogPrimitive.Close;&#13;&#10;&#13;&#10;const DialogOverlay = React.forwardRef&lt;&#13;&#10;  React.ElementRef&lt;typeof DialogPrimitive.Overlay&gt;,&#13;&#10;  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Overlay&gt;&#13;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#13;&#10;  &lt;DialogPrimitive.Overlay&#13;&#10;    ref={ref}&#13;&#10;    className={cn(&#13;&#10;      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',&#13;&#10;      className&#13;&#10;    )}&#13;&#10;    {...props}&#13;&#10;  /&gt;&#13;&#10;));&#13;&#10;DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;&#13;&#10;&#13;&#10;const DialogContent = React.forwardRef&lt;&#13;&#10;  React.ElementRef&lt;typeof DialogPrimitive.Content&gt;,&#13;&#10;  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Content&gt;&#13;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#13;&#10;  &lt;DialogPortal&gt;&#13;&#10;    &lt;DialogOverlay /&gt;&#13;&#10;    &lt;DialogPrimitive.Content&#13;&#10;      ref={ref}&#13;&#10;      className={cn(&#13;&#10;        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-3xl',&#13;&#10;        className&#13;&#10;      )}&#13;&#10;      {...props}&#13;&#10;    &gt;&#13;&#10;      {children}&#13;&#10;      &lt;DialogPrimitive.Close className=&quot;absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground&quot;&gt;&#13;&#10;        &lt;XIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;        &lt;span className=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&#13;&#10;      &lt;/DialogPrimitive.Close&gt;&#13;&#10;    &lt;/DialogPrimitive.Content&gt;&#13;&#10;  &lt;/DialogPortal&gt;&#13;&#10;));&#13;&#10;DialogContent.displayName = DialogPrimitive.Content.displayName;&#13;&#10;&#13;&#10;const DialogHeader = ({&#13;&#10;  className,&#13;&#10;  ...props&#13;&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#13;&#10;  &lt;div&#13;&#10;    className={cn(&#13;&#10;      'flex flex-col space-y-1.5 text-center sm:text-left',&#13;&#10;      className&#13;&#10;    )}&#13;&#10;    {...props}&#13;&#10;  /&gt;&#13;&#10;);&#13;&#10;DialogHeader.displayName = 'DialogHeader';&#13;&#10;&#13;&#10;const DialogFooter = ({&#13;&#10;  className,&#13;&#10;  ...props&#13;&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#13;&#10;  &lt;div&#13;&#10;    className={cn(&#13;&#10;      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',&#13;&#10;      className&#13;&#10;    )}&#13;&#10;    {...props}&#13;&#10;  /&gt;&#13;&#10;);&#13;&#10;DialogFooter.displayName = 'DialogFooter';&#13;&#10;&#13;&#10;const DialogTitle = React.forwardRef&lt;&#13;&#10;  React.ElementRef&lt;typeof DialogPrimitive.Title&gt;,&#13;&#10;  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Title&gt;&#13;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#13;&#10;  &lt;DialogPrimitive.Title&#13;&#10;    ref={ref}&#13;&#10;    className={cn(&#13;&#10;      'text-lg font-semibold leading-none tracking-tight',&#13;&#10;      className&#13;&#10;    )}&#13;&#10;    {...props}&#13;&#10;  /&gt;&#13;&#10;));&#13;&#10;DialogTitle.displayName = DialogPrimitive.Title.displayName;&#13;&#10;&#13;&#10;const DialogDescription = React.forwardRef&lt;&#13;&#10;  React.ElementRef&lt;typeof DialogPrimitive.Description&gt;,&#13;&#10;  React.ComponentPropsWithoutRef&lt;typeof DialogPrimitive.Description&gt;&#13;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#13;&#10;  &lt;DialogPrimitive.Description&#13;&#10;    ref={ref}&#13;&#10;    className={cn('text-sm text-muted-foreground', className)}&#13;&#10;    {...props}&#13;&#10;  /&gt;&#13;&#10;));&#13;&#10;DialogDescription.displayName = DialogPrimitive.Description.displayName;&#13;&#10;&#13;&#10;export {&#13;&#10;  Dialog,&#13;&#10;  DialogPortal,&#13;&#10;  DialogOverlay,&#13;&#10;  DialogClose,&#13;&#10;  DialogTrigger,&#13;&#10;  DialogContent,&#13;&#10;  DialogHeader,&#13;&#10;  DialogFooter,&#13;&#10;  DialogTitle,&#13;&#10;  DialogDescription,&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/ui/toast.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/ui/toast.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as ToastPrimitives from '@radix-ui/react-toast';&#10;import { cva, type VariantProps } from 'class-variance-authority';&#10;import { X } from 'lucide-react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const ToastProvider = ToastPrimitives.Provider;&#10;&#10;const ToastViewport = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Viewport&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Viewport&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ToastPrimitives.Viewport&#10;    ref={ref}&#10;    className={cn(&#10;      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ToastViewport.displayName = ToastPrimitives.Viewport.displayName;&#10;&#10;const toastVariants = cva(&#10;  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-3xl border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',&#10;  {&#10;    variants: {&#10;      variant: {&#10;        default: 'border bg-background text-foreground',&#10;        destructive:&#10;          'destructive group border-destructive bg-destructive text-destructive-foreground',&#10;      },&#10;    },&#10;    defaultVariants: {&#10;      variant: 'default',&#10;    },&#10;  }&#10;);&#10;&#10;const Toast = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Root&gt; &amp;&#10;    VariantProps&lt;typeof toastVariants&gt;&#10;&gt;(({ className, variant, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;ToastPrimitives.Root&#10;      ref={ref}&#10;      className={cn(toastVariants({ variant }), className)}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;});&#10;Toast.displayName = ToastPrimitives.Root.displayName;&#10;&#10;const ToastAction = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Action&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Action&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ToastPrimitives.Action&#10;    ref={ref}&#10;    className={cn(&#10;      'inline-flex h-8 shrink-0 items-center justify-center rounded-3xl border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ToastAction.displayName = ToastPrimitives.Action.displayName;&#10;&#10;const ToastClose = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Close&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Close&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ToastPrimitives.Close&#10;    ref={ref}&#10;    className={cn(&#10;      'absolute right-2 top-2 rounded-3xl p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',&#10;      className&#10;    )}&#10;    toast-close=&quot;&quot;&#10;    {...props}&#10;  &gt;&#10;    &lt;X className=&quot;h-4 w-4&quot; /&gt;&#10;  &lt;/ToastPrimitives.Close&gt;&#10;));&#10;ToastClose.displayName = ToastPrimitives.Close.displayName;&#10;&#10;const ToastTitle = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Title&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Title&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ToastPrimitives.Title&#10;    ref={ref}&#10;    className={cn('text-sm font-semibold', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ToastTitle.displayName = ToastPrimitives.Title.displayName;&#10;&#10;const ToastDescription = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Description&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Description&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ToastPrimitives.Description&#10;    ref={ref}&#10;    className={cn('text-sm opacity-90', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ToastDescription.displayName = ToastPrimitives.Description.displayName;&#10;&#10;type ToastProps = React.ComponentPropsWithoutRef&lt;typeof Toast&gt;;&#10;&#10;type ToastActionElement = React.ReactElement&lt;typeof ToastAction&gt;;&#10;&#10;export {&#10;  type ToastProps,&#10;  type ToastActionElement,&#10;  ToastProvider,&#10;  ToastViewport,&#10;  Toast,&#10;  ToastTitle,&#10;  ToastDescription,&#10;  ToastClose,&#10;  ToastAction,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import * as React from 'react';&#13;&#10;import * as ToastPrimitives from '@radix-ui/react-toast';&#13;&#10;import { cva, type VariantProps } from 'class-variance-authority';&#13;&#10;import { XIcon } from '@phosphor-icons/react';&#13;&#10;&#13;&#10;import { cn } from '@/lib/utils';&#13;&#10;&#13;&#10;const ToastProvider = ToastPrimitives.Provider;&#13;&#10;&#13;&#10;const ToastViewport = React.forwardRef&lt;&#13;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Viewport&gt;,&#13;&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Viewport&gt;&#13;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#13;&#10;  &lt;ToastPrimitives.Viewport&#13;&#10;    ref={ref}&#13;&#10;    className={cn(&#13;&#10;      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',&#13;&#10;      className&#13;&#10;    )}&#13;&#10;    {...props}&#13;&#10;  /&gt;&#13;&#10;));&#13;&#10;ToastViewport.displayName = ToastPrimitives.Viewport.displayName;&#13;&#10;&#13;&#10;const toastVariants = cva(&#13;&#10;  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-3xl border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',&#13;&#10;  {&#13;&#10;    variants: {&#13;&#10;      variant: {&#13;&#10;        default: 'border bg-background text-foreground',&#13;&#10;        destructive:&#13;&#10;          'destructive group border-destructive bg-destructive text-destructive-foreground',&#13;&#10;      },&#13;&#10;    },&#13;&#10;    defaultVariants: {&#13;&#10;      variant: 'default',&#13;&#10;    },&#13;&#10;  }&#13;&#10;);&#13;&#10;&#13;&#10;const Toast = React.forwardRef&lt;&#13;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Root&gt;,&#13;&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Root&gt; &amp;&#13;&#10;    VariantProps&lt;typeof toastVariants&gt;&#13;&#10;&gt;(({ className, variant, ...props }, ref) =&gt; {&#13;&#10;  return (&#13;&#10;    &lt;ToastPrimitives.Root&#13;&#10;      ref={ref}&#13;&#10;      className={cn(toastVariants({ variant }), className)}&#13;&#10;      {...props}&#13;&#10;    /&gt;&#13;&#10;  );&#13;&#10;});&#13;&#10;Toast.displayName = ToastPrimitives.Root.displayName;&#13;&#10;&#13;&#10;const ToastAction = React.forwardRef&lt;&#13;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Action&gt;,&#13;&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Action&gt;&#13;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#13;&#10;  &lt;ToastPrimitives.Action&#13;&#10;    ref={ref}&#13;&#10;    className={cn(&#13;&#10;      'inline-flex h-8 shrink-0 items-center justify-center rounded-3xl border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',&#13;&#10;      className&#13;&#10;    )}&#13;&#10;    {...props}&#13;&#10;  /&gt;&#13;&#10;));&#13;&#10;ToastAction.displayName = ToastPrimitives.Action.displayName;&#13;&#10;&#13;&#10;const ToastClose = React.forwardRef&lt;&#13;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Close&gt;,&#13;&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Close&gt;&#13;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#13;&#10;  &lt;ToastPrimitives.Close&#13;&#10;    ref={ref}&#13;&#10;    className={cn(&#13;&#10;      'absolute right-2 top-2 rounded-3xl p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',&#13;&#10;      className&#13;&#10;    )}&#13;&#10;    toast-close=&quot;&quot;&#13;&#10;    {...props}&#13;&#10;  &gt;&#13;&#10;    &lt;XIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;  &lt;/ToastPrimitives.Close&gt;&#13;&#10;));&#13;&#10;ToastClose.displayName = ToastPrimitives.Close.displayName;&#13;&#10;&#13;&#10;const ToastTitle = React.forwardRef&lt;&#13;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Title&gt;,&#13;&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Title&gt;&#13;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#13;&#10;  &lt;ToastPrimitives.Title&#13;&#10;    ref={ref}&#13;&#10;    className={cn('text-sm font-semibold', className)}&#13;&#10;    {...props}&#13;&#10;  /&gt;&#13;&#10;));&#13;&#10;ToastTitle.displayName = ToastPrimitives.Title.displayName;&#13;&#10;&#13;&#10;const ToastDescription = React.forwardRef&lt;&#13;&#10;  React.ElementRef&lt;typeof ToastPrimitives.Description&gt;,&#13;&#10;  React.ComponentPropsWithoutRef&lt;typeof ToastPrimitives.Description&gt;&#13;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#13;&#10;  &lt;ToastPrimitives.Description&#13;&#10;    ref={ref}&#13;&#10;    className={cn('text-sm opacity-90', className)}&#13;&#10;    {...props}&#13;&#10;  /&gt;&#13;&#10;));&#13;&#10;ToastDescription.displayName = ToastPrimitives.Description.displayName;&#13;&#10;&#13;&#10;type ToastProps = React.ComponentPropsWithoutRef&lt;typeof Toast&gt;;&#13;&#10;&#13;&#10;type ToastActionElement = React.ReactElement&lt;typeof ToastAction&gt;;&#13;&#10;&#13;&#10;export {&#13;&#10;  type ToastProps,&#13;&#10;  type ToastActionElement,&#13;&#10;  ToastProvider,&#13;&#10;  ToastViewport,&#13;&#10;  Toast,&#13;&#10;  ToastTitle,&#13;&#10;  ToastDescription,&#13;&#10;  ToastClose,&#13;&#10;  ToastAction,&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>