<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { Kanban, Mail, BarChart } from &quot;lucide-react&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import EmailClient from &quot;@/components/email/EmailClient&quot;;&#10;import KanbanBoard from &quot;@/components/kanban/KanbanBoard&quot;;&#10;import Sidebar from &quot;@/components/layout/Sidebar&quot;;&#10;import Dashboard from &quot;@/components/dashboard/Dashboard&quot;;&#10;&#10;const NAVIGATION_ITEMS = [&#10;&#9;{ id: &quot;dashboard&quot;, label: &quot;Dashboard&quot;, icon: BarChart, count: 0 },&#10;&#9;{ id: &quot;email&quot;, label: &quot;Email&quot;, icon: Mail, count: 3 },&#10;&#9;{ id: &quot;kanban&quot;, label: &quot;Obrigações Contratuais&quot;, icon: Kanban, count: 4 },&#10;];&#10;&#10;export default function HomePage() {&#10;&#9;const [mounted, setMounted] = useState(false);&#10;&#9;const [user, setUser] = useState&lt;{ nm_responsavel: string; email: string } | undefined&gt;(&#10;&#9;&#9;undefined&#10;&#9;);&#10;&#9;const router = useRouter();&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;setMounted(true);&#10;&#9;}, []);&#10;&#10;&#9;const [activeModule, setActiveModule] = useState&lt;&quot;dashboard&quot; | &quot;email&quot; | &quot;kanban&quot;&gt;(&#10;&#9;&#9;&quot;dashboard&quot;&#10;&#9;);&#10;&#9;const [sidebarOpen, setSidebarOpen] = useState(true);&#10;&#10;&#9;if (!mounted) {&#10;&#9;&#9;return (&#10;&#9;&#9;&#9;&lt;div className=&quot;min-h-screen bg-white flex items-center justify-center&quot;&gt;&#10;&#9;&#9;&#9;&#9;&lt;div className=&quot;text-center&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4&quot; /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-gray-600&quot;&gt;Carregando...&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;);&#10;&#9;}&#10;&#10;&#9;const renderActiveModule = () =&gt; {&#10;&#9;&#9;switch (activeModule) {&#10;&#9;&#9;&#9;case &quot;dashboard&quot;:&#10;&#9;&#9;&#9;&#9;return &lt;Dashboard /&gt;;&#10;&#9;&#9;&#9;case &quot;email&quot;:&#10;&#9;&#9;&#9;&#9;return &lt;EmailClient /&gt;;&#10;&#9;&#9;&#9;case &quot;kanban&quot;:&#10;&#9;&#9;&#9;&#9;return &lt;KanbanBoard /&gt;;&#10;&#9;&#9;&#9;default:&#10;&#9;&#9;&#9;&#9;return &lt;Dashboard /&gt;;&#10;&#9;&#9;}&#10;&#9;};&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;div className=&quot;min-h-screen bg-white flex flex-col&quot;&gt;&#10;&#9;&#9;&#9;&lt;main&#10;&#9;&#9;&#9;&#9;className={cn(&#10;&#9;&#9;&#9;&#9;&#9;&quot;flex flex-row min-w-0 transition-all duration-300 ease-in-out max-h-screen&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;w-full h-full&quot;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&lt;Sidebar&#10;&#9;&#9;&#9;&#9;&#9;navigationItems={NAVIGATION_ITEMS}&#10;&#9;&#9;&#9;&#9;&#9;activeModule={activeModule}&#10;&#9;&#9;&#9;&#9;&#9;onModuleChange={setActiveModule}&#10;&#9;&#9;&#9;&#9;&#9;isOpen={sidebarOpen}&#10;&#9;&#9;&#9;&#9;&#9;onToggle={() =&gt; setSidebarOpen(!sidebarOpen)}&#10;&#9;&#9;&#9;&#9;&#9;user={user}&#10;&#9;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;&#9;&lt;div className=&quot;flex flex-col w-full overflow-auto min-h-screen&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;{renderActiveModule()}&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&lt;/main&gt;&#10;&#9;&#9;&lt;/div&gt;&#10;&#9;);&#10;}&#10;&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { Kanban, Mail, BarChart } from &quot;lucide-react&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import EmailClient from &quot;@/components/email/EmailClient&quot;;&#10;import KanbanBoard from &quot;@/components/kanban/KanbanBoard&quot;;&#10;import Sidebar from &quot;@/components/layout/Sidebar&quot;;&#10;import Dashboard from &quot;@/components/dashboard/Dashboard&quot;;&#10;&#10;const NAVIGATION_ITEMS = [&#10;&#9;{ id: &quot;dashboard&quot;, label: &quot;Dashboard&quot;, icon: BarChart, count: 0 },&#10;&#9;{ id: &quot;email&quot;, label: &quot;Email&quot;, icon: Mail, count: 3 },&#10;&#9;{ id: &quot;kanban&quot;, label: &quot;Obrigações Contratuais&quot;, icon: Kanban, count: 4 },&#10;];&#10;&#10;export default function HomePage() {&#10;&#9;const [mounted, setMounted] = useState(false);&#10;&#9;const [user, setUser] = useState&lt;{ nm_responsavel: string; email: string } | undefined&gt;(&#10;&#9;&#9;undefined&#10;&#9;);&#10;&#9;const router = useRouter();&#10;&#10;&#9;useEffect(() =&gt; {&#10;&#9;&#9;setMounted(true);&#10;&#9;}, []);&#10;&#10;&#9;const [activeModule, setActiveModule] = useState&lt;&quot;dashboard&quot; | &quot;email&quot; | &quot;kanban&quot;&gt;(&#10;&#9;&#9;&quot;dashboard&quot;&#10;&#9;);&#10;&#9;const [sidebarOpen, setSidebarOpen] = useState(true);&#10;&#10;&#9;if (!mounted) {&#10;&#9;&#9;return (&#10;&#9;&#9;&#9;&lt;div className=&quot;min-h-screen bg-white flex items-center justify-center&quot;&gt;&#10;&#9;&#9;&#9;&#9;&lt;div className=&quot;text-center&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4&quot; /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;p className=&quot;text-gray-600&quot;&gt;Carregando...&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;);&#10;&#9;}&#10;&#10;&#9;const renderActiveModule = () =&gt; {&#10;&#9;&#9;switch (activeModule) {&#10;&#9;&#9;&#9;case &quot;dashboard&quot;:&#10;&#9;&#9;&#9;&#9;return &lt;Dashboard /&gt;;&#10;&#9;&#9;&#9;case &quot;email&quot;:&#10;&#9;&#9;&#9;&#9;return &lt;EmailClient /&gt;;&#10;&#9;&#9;&#9;case &quot;kanban&quot;:&#10;&#9;&#9;&#9;&#9;return &lt;KanbanBoard /&gt;;&#10;&#9;&#9;&#9;default:&#10;&#9;&#9;&#9;&#9;return &lt;Dashboard /&gt;;&#10;&#9;&#9;}&#10;&#9;};&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;div className=&quot;min-h-screen bg-white flex flex-col&quot;&gt;&#10;&#9;&#9;&#9;&lt;main&#10;&#9;&#9;&#9;&#9;className={cn(&#10;&#9;&#9;&#9;&#9;&#9;&quot;flex flex-row min-w-0 transition-all duration-300 ease-in-out max-h-screen&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;w-full h-full&quot;&#10;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&lt;Sidebar&#10;&#9;&#9;&#9;&#9;&#9;navigationItems={NAVIGATION_ITEMS}&#10;&#9;&#9;&#9;&#9;&#9;activeModule={activeModule}&#10;&#9;&#9;&#9;&#9;&#9;onModuleChange={setActiveModule}&#10;&#9;&#9;&#9;&#9;&#9;user={user}&#10;&#9;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;&#9;&lt;div className=&quot;flex flex-col w-full overflow-auto min-h-screen&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;{renderActiveModule()}&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&lt;/main&gt;&#10;&#9;&#9;&lt;/div&gt;&#10;&#9;);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/email/EmailClient.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/email/EmailClient.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import {useState, useEffect} from 'react';&#10;import {&#10;  Archive,&#10;  File,&#10;  Filter,&#10;  Folder,&#10;  Inbox,&#10;  Mail,&#10;  OctagonAlert, PanelLeftClose, PanelLeftOpen,&#10;  Plus, RotateCw,&#10;  Search,&#10;  Send,&#10;  Settings,&#10;  Cog&#10;} from 'lucide-react';&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Badge} from '@/components/ui/badge';&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogDescription,&#10;  DialogFooter,&#10;  DialogHeader,&#10;  DialogTitle,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { Textarea } from &quot;@/components/ui/textarea&quot;;&#10;import { useToast } from '@/hooks/use-toast';&#10;import EmailList from './EmailList';&#10;import EmailComposer from './EmailComposer';&#10;import EmailDetail from './EmailDetail';&#10;import FolderManager from './FolderManager';&#10;import {cn} from &quot;@/lib/utils&quot;;&#10;&#10;const EMAIL_FOLDERS = [&#10;  { id: 'inbox', icon: Inbox, label: 'Caixa de Entrada', count: 0 },&#10;  { id: 'sent', icon: Send, label: 'Enviados', count: 0 },&#10;];&#10;&#10;// Mock emails data&#10;const MOCK_EMAILS = [&#10;  {&#10;    id: '1',&#10;    from: 'João Silva &lt;joao@empresa.com&gt;',&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#10;    preview: 'Segue em anexo o relatório mensal de vendas referente ao mês de novembro. Os resultados mostram um crescimento de 15% em relação ao mês anterior...',&#10;    date: new Date().toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['importante', 'trabalho'],&#10;    content: `Prezado(a),&#10;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#10;&#10;Os principais destaques são:&#10;• Crescimento de 15% em relação ao mês anterior&#10;• Aumento de 8% no número de novos clientes&#10;• Melhoria na taxa de conversão para 12%&#10;&#10;Principais produtos vendidos:&#10;1. Produto A - R$ 45.000&#10;2. Produto B - R$ 32.000  &#10;3. Produto C - R$ 28.500&#10;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#10;&#10;Atenciosamente,&#10;João Silva&#10;Gerente Comercial&#10;(11) 9999-8888`&#10;  },&#10;  {&#10;    id: '2',&#10;    from: 'Maria Santos &lt;maria@consultoria.com&gt;',&#10;    subject: 'Proposta de consultoria em marketing digital',&#10;    preview: 'Espero que esteja bem! Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa...',&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['proposta'],&#10;    content: `Olá!&#10;&#10;Espero que esteja bem!&#10;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#10;&#10;Nossa experiência inclui:&#10;• Gestão de redes sociais&#10;• Campanhas no Google Ads&#10;• SEO e marketing de conteúdo&#10;• E-mail marketing&#10;• Análise de métricas e ROI&#10;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#10;&#10;Quando seria um bom momento para conversarmos?&#10;&#10;Abraços,&#10;Maria Santos&#10;Consultora em Marketing Digital&#10;maria@consultoria.com&#10;(11) 8888-7777`&#10;  },&#10;  {&#10;    id: '3',&#10;    from: 'Carlos Oliveira &lt;carlos@fornecedor.com&gt;',&#10;    subject: 'Confirmação do pedido #2024-1156',&#10;    preview: 'Confirmamos o recebimento do seu pedido #2024-1156. Prazo de entrega estimado: 5 dias úteis...',&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1 day ago&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['pedido'],&#10;    content: `Prezado Cliente,&#10;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#10;&#10;Detalhes do pedido:&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#10;• Valor total: R$ 2.850,00&#10;• Prazo de entrega: 5 dias úteis&#10;• Forma de pagamento: Boleto bancário&#10;&#10;Itens do pedido:&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#10;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#10;&#10;Em caso de dúvidas, entre em contato conosco.&#10;&#10;Atenciosamente,&#10;Carlos Oliveira&#10;Departamento de Vendas&#10;carlos@fornecedor.com&#10;(11) 7777-6666`&#10;  },&#10;  {&#10;    id: '4',&#10;    from: 'Ana Costa &lt;ana@juridico.com&gt;',&#10;    subject: 'Revisão do contrato de prestação de serviços',&#10;    preview: 'Conforme solicitado, segue a revisão do contrato de prestação de serviços. Identifiquei alguns pontos que precisam de atenção...',&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days ago&#10;    isRead: true,&#10;    hasAttachment: true,&#10;    labels: ['jurídico', 'urgente'],&#10;    content: `Prezado(a),&#10;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#10;&#10;Pontos que precisam de atenção:&#10;1. Cláusula 5.2 - Prazo de pagamento&#10;2. Cláusula 8.1 - Rescisão contratual  &#10;3. Cláusula 12 - Foro de eleição&#10;&#10;Recomendações:&#10;• Incluir cláusula de reajuste anual&#10;• Especificar melhor as penalidades por atraso&#10;• Definir critérios objetivos para avaliação de performance&#10;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#10;&#10;Podemos agendar uma reunião para discutir estas alterações?&#10;&#10;Cordialmente,&#10;Ana Costa&#10;Advogada&#10;OAB/SP 123.456&#10;ana@juridico.com&#10;(11) 6666-5555`&#10;  },&#10;  {&#10;    id: '5',&#10;    from: 'Ricardo Ferreira &lt;ricardo@ti.com&gt;',&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#10;    preview: 'Informamos que será realizada manutenção programada no sistema no sábado, 09/12, das 02h às 06h...',&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days ago&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['sistema', 'manutenção'],&#10;    content: `Prezados usuários,&#10;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#10;&#10;Durante este período:&#10;• O sistema ficará indisponível&#10;• Não será possível acessar dados&#10;• Funcionalidades estarão offline&#10;&#10;Melhorias que serão implementadas:&#10;• Otimização da performance&#10;• Correção de bugs reportados&#10;• Atualização de segurança&#10;• Nova funcionalidade de relatórios&#10;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#10;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#10;&#10;Obrigado pela compreensão.&#10;&#10;Equipe de TI&#10;Ricardo Ferreira&#10;Coordenador de Sistemas&#10;ricardo@ti.com`&#10;  }&#10;];&#10;&#10;interface SentEmail {&#10;  id: string;&#10;  to: string;&#10;  cc?: string;&#10;  bcc?: string;&#10;  subject: string;&#10;  content: string;&#10;  date: string;&#10;  from: string;&#10;}&#10;&#10;interface EmailConfig {&#10;  defaultMessages: {&#10;    [key: string]: string;&#10;  };&#10;  defaultFooter: string;&#10;}&#10;&#10;export default function EmailClient() {&#10;  const { toast } = useToast();&#10;  const [activeFolder, setActiveFolder] = useState('inbox');&#10;  const [selectedEmail, setSelectedEmail] = useState&lt;string | null&gt;(null);&#10;  const [showComposer, setShowComposer] = useState(false);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [showFolderManager, setShowFolderManager] = useState(false);&#10;  const [showConfigDialog, setShowConfigDialog] = useState(false);&#10;  const [emailConfig, setEmailConfig] = useState&lt;EmailConfig&gt;(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const savedConfig = localStorage.getItem('emailConfig');&#10;      return savedConfig ? JSON.parse(savedConfig) : {&#10;        defaultMessages: {&#10;          'Saudação': 'Olá,\n\nEspero que esteja bem.',&#10;          'Agradecimento': 'Obrigado pelo seu email.\n\nAgradeço o seu contato.',&#10;          'Despedida': 'Atenciosamente,\n\nEquipe de Suporte'&#10;        },&#10;        defaultFooter: 'Atenciosamente,\n\nSeu Nome\nSeu Cargo\nSeu Telefone'&#10;      };&#10;    }&#10;    return {&#10;      defaultMessages: {&#10;        'Saudação': 'Olá,\n\nEspero que esteja bem.',&#10;        'Agradecimento': 'Obrigado pelo seu email.\n\nAgradeço o seu contato.',&#10;        'Despedida': 'Atenciosamente,\n\nEquipe de Suporte'&#10;      },&#10;      defaultFooter: 'Atenciosamente,\n\nSeu Nome\nSeu Cargo\nSeu Telefone'&#10;    };&#10;  });&#10;  const [sentEmails, setSentEmails] = useState&lt;SentEmail[]&gt;(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const savedEmails = localStorage.getItem('sentEmails');&#10;      return savedEmails ? JSON.parse(savedEmails) : [];&#10;    }&#10;    return [];&#10;  });&#10;&#10;  const [folders, setFolders] = useState(() =&gt; {&#10;    const initialFolders = [...EMAIL_FOLDERS];&#10;&#10;    if (typeof window !== 'undefined') {&#10;      const savedEmails = localStorage.getItem('sentEmails');&#10;      const sentEmailsArray = savedEmails ? JSON.parse(savedEmails) : [];&#10;&#10;      const sentFolder = initialFolders.find(folder =&gt; folder.id === 'sent');&#10;      if (sentFolder) {&#10;        sentFolder.count = sentEmailsArray.length;&#10;      }&#10;    }&#10;    &#10;    return initialFolders;&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      localStorage.setItem('sentEmails', JSON.stringify(sentEmails));&#10;    }&#10;  }, [sentEmails]);&#10;&#10;  const addSentEmail = (email: Omit&lt;SentEmail, 'id' | 'from'&gt;) =&gt; {&#10;    const newEmail: SentEmail = {&#10;      ...email,&#10;      id: Date.now().toString(),&#10;      from: 'voce@example.com',&#10;    };&#10;    &#10;    setSentEmails(prev =&gt; [newEmail, ...prev]);&#10;&#10;    setFolders(prev =&gt; &#10;      prev.map(folder =&gt; &#10;        folder.id === 'sent' &#10;          ? { ...folder, count: folder.count + 1 } &#10;          : folder&#10;      )&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;h-full flex flex-col&quot;&gt;&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900 flex items-center&quot;&gt;&#10;            &lt;Mail className=&quot;h-7 w-7 mr-3&quot; /&gt;&#10;            Email&#10;          &lt;/h1&gt;&#10;          &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;            &lt;Button &#10;              onClick={() =&gt; setShowConfigDialog(true)} &#10;              variant=&quot;secondary&quot;&#10;            &gt;&#10;              &lt;Settings className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Configurar&#10;            &lt;/Button&gt;&#10;            &lt;Button onClick={() =&gt; setShowComposer(true)} className=&quot;bg-blue-600 hover:bg-blue-700&quot;&gt;&#10;              &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Escrever&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar emails...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button variant=&quot;secondary&quot; className=&quot;h-10 px-4&quot;&gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex items-center gap-2 border-b border-gray-200 p-4&quot;&gt;&#10;        {folders.map((folder) =&gt; (&#10;          &lt;Button&#10;            key={folder.id}&#10;            variant={activeFolder === folder.id ? &quot;default&quot; : &quot;ghost&quot;}&#10;            className=&quot;flex items-center gap-2 h-10 px-4&quot;&#10;            onClick={() =&gt; setActiveFolder(folder.id)}&#10;          &gt;&#10;            &lt;folder.icon className=&quot;h-4 w-4&quot; /&gt;&#10;            &lt;span&gt;{folder.label}&lt;/span&gt;&#10;            {folder.count &gt; 0 &amp;&amp; (&#10;              &lt;Badge variant=&quot;secondary&quot; className=&quot;ml-1&quot;&gt;&#10;                {folder.count}&#10;              &lt;/Badge&gt;&#10;            )}&#10;          &lt;/Button&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex flex-1 overflow-hidden&quot;&gt;&#10;        &lt;div className=&quot;flex flex-1&quot;&gt;&#10;          &lt;EmailList&#10;            folder={activeFolder}&#10;            searchQuery={searchQuery}&#10;            selectedEmail={selectedEmail || null}&#10;            onEmailSelect={setSelectedEmail}&#10;            sentEmails={sentEmails}&#10;            onUnreadCountChange={(count) =&gt; {&#10;              setFolders(prev =&gt; {&#10;                if (!prev || !Array.isArray(prev)) {&#10;                  return EMAIL_FOLDERS.map(folder =&gt;&#10;                    folder.id === 'inbox' ? { ...folder, count } : folder&#10;                  );&#10;                }&#10;&#10;                return prev.map(folder =&gt;&#10;                  folder.id === 'inbox'&#10;                    ? { ...folder, count }&#10;                    : folder&#10;                );&#10;              });&#10;            }}&#10;          /&gt;&#10;&#10;          {selectedEmail ? (&#10;            &lt;EmailDetail&#10;              emailId={selectedEmail}&#10;              onClose={() =&gt; setSelectedEmail('')}&#10;              onSend={addSentEmail}&#10;              emailConfig={emailConfig}&#10;            /&gt;&#10;          ) : (&#10;            &lt;div className=&quot;w-96 bg-white border-l border-gray-200 flex flex-col items-center justify-center p-8&quot;&gt;&#10;              &lt;Mail className=&quot;h-16 w-16 text-gray-300 mb-4&quot; /&gt;&#10;              &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-2&quot;&gt;Nenhum email selecionado&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-500 text-center&quot;&gt;&#10;                Selecione um email da lista para visualizar seu conteúdo aqui.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {showComposer &amp;&amp; (&#10;        &lt;EmailComposer &#10;          onClose={() =&gt; setShowComposer(false)} &#10;          onSend={addSentEmail}&#10;          emailConfig={emailConfig}&#10;        /&gt;&#10;      )}&#10;&#10;      {showFolderManager &amp;&amp; (&#10;        &lt;FolderManager&#10;          folders={folders}&#10;          onClose={() =&gt; setShowFolderManager(false)}&#10;          onSave={setFolders}&#10;        /&gt;&#10;      )}&#10;&#10;      &lt;Dialog open={showConfigDialog} onOpenChange={setShowConfigDialog}&gt;&#10;        &lt;DialogContent className=&quot;flex flex-col sm:max-w-[600px] max-h-[95vh]&quot;&gt;&#10;          &lt;DialogHeader&gt;&#10;            &lt;DialogTitle&gt;Configurações de Email&lt;/DialogTitle&gt;&#10;            &lt;DialogDescription&gt;&#10;              Configure mensagens padrão e assinatura para seus emails.&#10;            &lt;/DialogDescription&gt;&#10;          &lt;/DialogHeader&gt;&#10;          &#10;          &lt;div className=&quot;grid gap-4 py-4 max-h-full overflow-auto&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;defaultFooter&quot; className=&quot;font-medium&quot;&gt;Assinatura Padrão&lt;/Label&gt;&#10;              &lt;Textarea&#10;                id=&quot;defaultFooter&quot;&#10;                value={emailConfig.defaultFooter}&#10;                onChange={(e) =&gt; setEmailConfig({&#10;                  ...emailConfig,&#10;                  defaultFooter: e.target.value&#10;                })}&#10;                placeholder=&quot;Digite sua assinatura padrão...&quot;&#10;                className=&quot;min-h-[100px]&quot;&#10;              /&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;                Esta assinatura será adicionada ao final dos seus emails.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;div className=&quot;flex flex-col space-y-2&quot;&gt;&#10;              &lt;Label className=&quot;font-medium&quot;&gt;Mensagens Padrão&lt;/Label&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500 mb-2&quot;&gt;&#10;                Configure mensagens padrão que podem ser rapidamente inseridas nos seus emails.&#10;              &lt;/p&gt;&#10;              &#10;              {Object.entries(emailConfig.defaultMessages).map(([key, value], index) =&gt; (&#10;                &lt;div key={index} className=&quot;grid grid-rows-[1fr,3fr] gap-2 mb-3&quot;&gt;&#10;                  &lt;Input&#10;                    value={key}&#10;                    onChange={(e) =&gt; {&#10;                      const newMessages = { ...emailConfig.defaultMessages };&#10;                      const oldValue = newMessages[key];&#10;                      delete newMessages[key];&#10;                      newMessages[e.target.value] = oldValue;&#10;                      setEmailConfig({&#10;                        ...emailConfig,&#10;                        defaultMessages: newMessages&#10;                      });&#10;                    }}&#10;                    placeholder=&quot;Nome da mensagem&quot;&#10;                  /&gt;&#10;                  &lt;Textarea&#10;                    value={value}&#10;                    onChange={(e) =&gt; {&#10;                      const newMessages = { ...emailConfig.defaultMessages };&#10;                      newMessages[key] = e.target.value;&#10;                      setEmailConfig({&#10;                        ...emailConfig,&#10;                        defaultMessages: newMessages&#10;                      });&#10;                    }}&#10;                    placeholder=&quot;Conteúdo da mensagem&quot;&#10;                    className=&quot;min-h-[80px]&quot;&#10;                  /&gt;&#10;                  &lt;div className=&quot;flex-grow-1 h-px bg-gray-200 my-2&quot; /&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;              &#10;              &lt;Button&#10;                type=&quot;button&quot;&#10;                variant=&quot;outline&quot;&#10;                onClick={() =&gt; {&#10;                  const newMessages = { ...emailConfig.defaultMessages };&#10;                  newMessages[`Nova Mensagem ${Object.keys(newMessages).length + 1}`] = '';&#10;                  setEmailConfig({&#10;                    ...emailConfig,&#10;                    defaultMessages: newMessages&#10;                  });&#10;                }}&#10;                className=&quot;mt-2 flex-grow-1&quot;&#10;              &gt;&#10;                &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                Adicionar Mensagem&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;DialogFooter&gt;&#10;            &lt;Button&#10;              type=&quot;button&quot;&#10;              variant=&quot;outline&quot;&#10;              onClick={() =&gt; setShowConfigDialog(false)}&#10;            &gt;&#10;              Cancelar&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              type=&quot;button&quot;&#10;              onClick={() =&gt; {&#10;                if (typeof window !== 'undefined') {&#10;                  localStorage.setItem('emailConfig', JSON.stringify(emailConfig));&#10;                }&#10;                setShowConfigDialog(false);&#10;                &#10;                toast({&#10;                  title: &quot;Configurações salvas&quot;,&#10;                  description: &quot;Suas configurações de email foram salvas com sucesso.&quot;,&#10;                });&#10;              }}&#10;            &gt;&#10;              Salvar Configurações&#10;            &lt;/Button&gt;&#10;          &lt;/DialogFooter&gt;&#10;        &lt;/DialogContent&gt;&#10;      &lt;/Dialog&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import {useState, useEffect} from 'react';&#10;import {&#10;  Archive,&#10;  File,&#10;  Filter,&#10;  Folder,&#10;  Inbox,&#10;  Mail,&#10;  OctagonAlert, PanelLeftClose, PanelLeftOpen,&#10;  Plus, RotateCw,&#10;  Search,&#10;  Send,&#10;  Settings,&#10;  Cog&#10;} from 'lucide-react';&#10;import {Button} from '@/components/ui/button';&#10;import {Input} from '@/components/ui/input';&#10;import {Badge} from '@/components/ui/badge';&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogDescription,&#10;  DialogFooter,&#10;  DialogHeader,&#10;  DialogTitle,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { Textarea } from &quot;@/components/ui/textarea&quot;;&#10;import { useToast } from '@/hooks/use-toast';&#10;import EmailList from './EmailList';&#10;import EmailComposer from './EmailComposer';&#10;import EmailDetail from './EmailDetail';&#10;import FolderManager from './FolderManager';&#10;import {cn} from &quot;@/lib/utils&quot;;&#10;&#10;const EMAIL_FOLDERS = [&#10;  { id: 'inbox', icon: Inbox, label: 'Caixa de Entrada', count: 0 },&#10;  { id: 'sent', icon: Send, label: 'Enviados', count: 0 },&#10;];&#10;&#10;// Mock emails data&#10;const MOCK_EMAILS = [&#10;  {&#10;    id: '1',&#10;    from: 'João Silva &lt;joao@empresa.com&gt;',&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#10;    preview: 'Segue em anexo o relatório mensal de vendas referente ao mês de novembro. Os resultados mostram um crescimento de 15% em relação ao mês anterior...',&#10;    date: new Date().toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['importante', 'trabalho'],&#10;    content: `Prezado(a),&#10;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#10;&#10;Os principais destaques são:&#10;• Crescimento de 15% em relação ao mês anterior&#10;• Aumento de 8% no número de novos clientes&#10;• Melhoria na taxa de conversão para 12%&#10;&#10;Principais produtos vendidos:&#10;1. Produto A - R$ 45.000&#10;2. Produto B - R$ 32.000  &#10;3. Produto C - R$ 28.500&#10;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#10;&#10;Atenciosamente,&#10;João Silva&#10;Gerente Comercial&#10;(11) 9999-8888`&#10;  },&#10;  {&#10;    id: '2',&#10;    from: 'Maria Santos &lt;maria@consultoria.com&gt;',&#10;    subject: 'Proposta de consultoria em marketing digital',&#10;    preview: 'Espero que esteja bem! Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa...',&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['proposta'],&#10;    content: `Olá!&#10;&#10;Espero que esteja bem!&#10;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#10;&#10;Nossa experiência inclui:&#10;• Gestão de redes sociais&#10;• Campanhas no Google Ads&#10;• SEO e marketing de conteúdo&#10;• E-mail marketing&#10;• Análise de métricas e ROI&#10;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#10;&#10;Quando seria um bom momento para conversarmos?&#10;&#10;Abraços,&#10;Maria Santos&#10;Consultora em Marketing Digital&#10;maria@consultoria.com&#10;(11) 8888-7777`&#10;  },&#10;  {&#10;    id: '3',&#10;    from: 'Carlos Oliveira &lt;carlos@fornecedor.com&gt;',&#10;    subject: 'Confirmação do pedido #2024-1156',&#10;    preview: 'Confirmamos o recebimento do seu pedido #2024-1156. Prazo de entrega estimado: 5 dias úteis...',&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1 day ago&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['pedido'],&#10;    content: `Prezado Cliente,&#10;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#10;&#10;Detalhes do pedido:&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#10;• Valor total: R$ 2.850,00&#10;• Prazo de entrega: 5 dias úteis&#10;• Forma de pagamento: Boleto bancário&#10;&#10;Itens do pedido:&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#10;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#10;&#10;Em caso de dúvidas, entre em contato conosco.&#10;&#10;Atenciosamente,&#10;Carlos Oliveira&#10;Departamento de Vendas&#10;carlos@fornecedor.com&#10;(11) 7777-6666`&#10;  },&#10;  {&#10;    id: '4',&#10;    from: 'Ana Costa &lt;ana@juridico.com&gt;',&#10;    subject: 'Revisão do contrato de prestação de serviços',&#10;    preview: 'Conforme solicitado, segue a revisão do contrato de prestação de serviços. Identifiquei alguns pontos que precisam de atenção...',&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days ago&#10;    isRead: true,&#10;    hasAttachment: true,&#10;    labels: ['jurídico', 'urgente'],&#10;    content: `Prezado(a),&#10;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#10;&#10;Pontos que precisam de atenção:&#10;1. Cláusula 5.2 - Prazo de pagamento&#10;2. Cláusula 8.1 - Rescisão contratual  &#10;3. Cláusula 12 - Foro de eleição&#10;&#10;Recomendações:&#10;• Incluir cláusula de reajuste anual&#10;• Especificar melhor as penalidades por atraso&#10;• Definir critérios objetivos para avaliação de performance&#10;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#10;&#10;Podemos agendar uma reunião para discutir estas alterações?&#10;&#10;Cordialmente,&#10;Ana Costa&#10;Advogada&#10;OAB/SP 123.456&#10;ana@juridico.com&#10;(11) 6666-5555`&#10;  },&#10;  {&#10;    id: '5',&#10;    from: 'Ricardo Ferreira &lt;ricardo@ti.com&gt;',&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#10;    preview: 'Informamos que será realizada manutenção programada no sistema no sábado, 09/12, das 02h às 06h...',&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days ago&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['sistema', 'manutenção'],&#10;    content: `Prezados usuários,&#10;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#10;&#10;Durante este período:&#10;• O sistema ficará indisponível&#10;• Não será possível acessar dados&#10;• Funcionalidades estarão offline&#10;&#10;Melhorias que serão implementadas:&#10;• Otimização da performance&#10;• Correção de bugs reportados&#10;• Atualização de segurança&#10;• Nova funcionalidade de relatórios&#10;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#10;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#10;&#10;Obrigado pela compreensão.&#10;&#10;Equipe de TI&#10;Ricardo Ferreira&#10;Coordenador de Sistemas&#10;ricardo@ti.com`&#10;  }&#10;];&#10;&#10;interface SentEmail {&#10;  id: string;&#10;  to: string;&#10;  cc?: string;&#10;  bcc?: string;&#10;  subject: string;&#10;  content: string;&#10;  date: string;&#10;  from: string;&#10;}&#10;&#10;interface EmailConfig {&#10;  defaultMessages: {&#10;    [key: string]: string;&#10;  };&#10;  defaultFooter: string;&#10;}&#10;&#10;export default function EmailClient() {&#10;  const { toast } = useToast();&#10;  const [activeFolder, setActiveFolder] = useState('inbox');&#10;  const [selectedEmail, setSelectedEmail] = useState&lt;string | null&gt;(null);&#10;  const [showComposer, setShowComposer] = useState(false);&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [showFolderManager, setShowFolderManager] = useState(false);&#10;  const [showConfigDialog, setShowConfigDialog] = useState(false);&#10;  const [emailConfig, setEmailConfig] = useState&lt;EmailConfig&gt;(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const savedConfig = localStorage.getItem('emailConfig');&#10;      return savedConfig ? JSON.parse(savedConfig) : {&#10;        defaultMessages: {&#10;          'Saudação': 'Olá,\n\nEspero que esteja bem.',&#10;          'Agradecimento': 'Obrigado pelo seu email.\n\nAgradeço o seu contato.',&#10;          'Despedida': 'Atenciosamente,\n\nEquipe de Suporte'&#10;        },&#10;        defaultFooter: 'Atenciosamente,\n\nSeu Nome\nSeu Cargo\nSeu Telefone'&#10;      };&#10;    }&#10;    return {&#10;      defaultMessages: {&#10;        'Saudação': 'Olá,\n\nEspero que esteja bem.',&#10;        'Agradecimento': 'Obrigado pelo seu email.\n\nAgradeço o seu contato.',&#10;        'Despedida': 'Atenciosamente,\n\nEquipe de Suporte'&#10;      },&#10;      defaultFooter: 'Atenciosamente,\n\nSeu Nome\nSeu Cargo\nSeu Telefone'&#10;    };&#10;  });&#10;  const [sentEmails, setSentEmails] = useState&lt;SentEmail[]&gt;(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const savedEmails = localStorage.getItem('sentEmails');&#10;      return savedEmails ? JSON.parse(savedEmails) : [];&#10;    }&#10;    return [];&#10;  });&#10;&#10;  const [folders, setFolders] = useState(() =&gt; {&#10;    const initialFolders = [...EMAIL_FOLDERS];&#10;&#10;    if (typeof window !== 'undefined') {&#10;      const savedEmails = localStorage.getItem('sentEmails');&#10;      const sentEmailsArray = savedEmails ? JSON.parse(savedEmails) : [];&#10;&#10;      const sentFolder = initialFolders.find(folder =&gt; folder.id === 'sent');&#10;      if (sentFolder) {&#10;        sentFolder.count = sentEmailsArray.length;&#10;      }&#10;    }&#10;    &#10;    return initialFolders;&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      localStorage.setItem('sentEmails', JSON.stringify(sentEmails));&#10;    }&#10;  }, [sentEmails]);&#10;&#10;  const addSentEmail = (email: Omit&lt;SentEmail, 'id' | 'from'&gt;) =&gt; {&#10;    const newEmail: SentEmail = {&#10;      ...email,&#10;      id: Date.now().toString(),&#10;      from: 'voce@example.com',&#10;    };&#10;    &#10;    setSentEmails(prev =&gt; [newEmail, ...prev]);&#10;&#10;    setFolders(prev =&gt; &#10;      prev.map(folder =&gt; &#10;        folder.id === 'sent' &#10;          ? { ...folder, count: folder.count + 1 } &#10;          : folder&#10;      )&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;h-full flex flex-col&quot;&gt;&#10;      &lt;div className=&quot;bg-white border-b border-gray-200 p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900 flex items-center&quot;&gt;&#10;            &lt;Mail className=&quot;h-7 w-7 mr-3&quot; /&gt;&#10;            Email&#10;          &lt;/h1&gt;&#10;          &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;            &lt;Button &#10;              onClick={() =&gt; setShowConfigDialog(true)} &#10;              variant=&quot;secondary&quot;&#10;            &gt;&#10;              &lt;Settings className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Configurar&#10;            &lt;/Button&gt;&#10;            &lt;Button onClick={() =&gt; setShowComposer(true)} className=&quot;bg-blue-600 hover:bg-blue-700&quot;&gt;&#10;              &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Escrever&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;            &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;            &lt;Input&#10;              placeholder=&quot;Pesquisar emails...&quot;&#10;              value={searchQuery}&#10;              onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;              className=&quot;pl-10 bg-gray-50 border-gray-200 focus:bg-white&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button variant=&quot;secondary&quot; className=&quot;h-10 px-4&quot;&gt;&#10;            &lt;Filter className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Filtrar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex items-center gap-2 border-b border-gray-200 p-4&quot;&gt;&#10;        {folders.map((folder) =&gt; (&#10;          &lt;Button&#10;            key={folder.id}&#10;            variant={activeFolder === folder.id ? &quot;default&quot; : &quot;ghost&quot;}&#10;            className=&quot;flex items-center gap-2 h-10 px-4&quot;&#10;            onClick={() =&gt; setActiveFolder(folder.id)}&#10;          &gt;&#10;            &lt;folder.icon className=&quot;h-4 w-4&quot; /&gt;&#10;            &lt;span&gt;{folder.label}&lt;/span&gt;&#10;            {folder.count &gt; 0 &amp;&amp; (&#10;              &lt;Badge variant=&quot;secondary&quot; className=&quot;ml-1&quot;&gt;&#10;                {folder.count}&#10;              &lt;/Badge&gt;&#10;            )}&#10;          &lt;/Button&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex flex-1 overflow-hidden&quot;&gt;&#10;        {/* Show email list when no email is selected, or email detail when one is selected */}&#10;        {!selectedEmail ? (&#10;          &lt;EmailList&#10;            folder={activeFolder}&#10;            searchQuery={searchQuery}&#10;            selectedEmail={selectedEmail || null}&#10;            onEmailSelect={setSelectedEmail}&#10;            sentEmails={sentEmails}&#10;            onUnreadCountChange={(count) =&gt; {&#10;              setFolders(prev =&gt; {&#10;                if (!prev || !Array.isArray(prev)) {&#10;                  return EMAIL_FOLDERS.map(folder =&gt;&#10;                    folder.id === 'inbox' ? { ...folder, count } : folder&#10;                  );&#10;                }&#10;&#10;                return prev.map(folder =&gt;&#10;                  folder.id === 'inbox'&#10;                    ? { ...folder, count }&#10;                    : folder&#10;                );&#10;              });&#10;            }}&#10;          /&gt;&#10;        ) : (&#10;          &lt;EmailDetail&#10;            emailId={selectedEmail}&#10;            onClose={() =&gt; setSelectedEmail('')}&#10;            onSend={addSentEmail}&#10;            emailConfig={emailConfig}&#10;          /&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {showComposer &amp;&amp; (&#10;        &lt;EmailComposer &#10;          onClose={() =&gt; setShowComposer(false)} &#10;          onSend={addSentEmail}&#10;          emailConfig={emailConfig}&#10;        /&gt;&#10;      )}&#10;&#10;      {showFolderManager &amp;&amp; (&#10;        &lt;FolderManager&#10;          folders={folders}&#10;          onClose={() =&gt; setShowFolderManager(false)}&#10;          onSave={setFolders}&#10;        /&gt;&#10;      )}&#10;&#10;      &lt;Dialog open={showConfigDialog} onOpenChange={setShowConfigDialog}&gt;&#10;        &lt;DialogContent className=&quot;flex flex-col sm:max-w-[600px] max-h-[95vh]&quot;&gt;&#10;          &lt;DialogHeader&gt;&#10;            &lt;DialogTitle&gt;Configurações de Email&lt;/DialogTitle&gt;&#10;            &lt;DialogDescription&gt;&#10;              Configure mensagens padrão e assinatura para seus emails.&#10;            &lt;/DialogDescription&gt;&#10;          &lt;/DialogHeader&gt;&#10;          &#10;          &lt;div className=&quot;grid gap-4 py-4 max-h-full overflow-auto&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;defaultFooter&quot; className=&quot;font-medium&quot;&gt;Assinatura Padrão&lt;/Label&gt;&#10;              &lt;Textarea&#10;                id=&quot;defaultFooter&quot;&#10;                value={emailConfig.defaultFooter}&#10;                onChange={(e) =&gt; setEmailConfig({&#10;                  ...emailConfig,&#10;                  defaultFooter: e.target.value&#10;                })}&#10;                placeholder=&quot;Digite sua assinatura padrão...&quot;&#10;                className=&quot;min-h-[100px]&quot;&#10;              /&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;                Esta assinatura será adicionada ao final dos seus emails.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;div className=&quot;flex flex-col space-y-2&quot;&gt;&#10;              &lt;Label className=&quot;font-medium&quot;&gt;Mensagens Padrão&lt;/Label&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500 mb-2&quot;&gt;&#10;                Configure mensagens padrão que podem ser rapidamente inseridas nos seus emails.&#10;              &lt;/p&gt;&#10;              &#10;              {Object.entries(emailConfig.defaultMessages).map(([key, value], index) =&gt; (&#10;                &lt;div key={index} className=&quot;grid grid-rows-[1fr,3fr] gap-2 mb-3&quot;&gt;&#10;                  &lt;Input&#10;                    value={key}&#10;                    onChange={(e) =&gt; {&#10;                      const newMessages = { ...emailConfig.defaultMessages };&#10;                      const oldValue = newMessages[key];&#10;                      delete newMessages[key];&#10;                      newMessages[e.target.value] = oldValue;&#10;                      setEmailConfig({&#10;                        ...emailConfig,&#10;                        defaultMessages: newMessages&#10;                      });&#10;                    }}&#10;                    placeholder=&quot;Nome da mensagem&quot;&#10;                  /&gt;&#10;                  &lt;Textarea&#10;                    value={value}&#10;                    onChange={(e) =&gt; {&#10;                      const newMessages = { ...emailConfig.defaultMessages };&#10;                      newMessages[key] = e.target.value;&#10;                      setEmailConfig({&#10;                        ...emailConfig,&#10;                        defaultMessages: newMessages&#10;                      });&#10;                    }}&#10;                    placeholder=&quot;Conteúdo da mensagem&quot;&#10;                    className=&quot;min-h-[80px]&quot;&#10;                  /&gt;&#10;                  &lt;div className=&quot;flex-grow-1 h-px bg-gray-200 my-2&quot; /&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;              &#10;              &lt;Button&#10;                type=&quot;button&quot;&#10;                variant=&quot;outline&quot;&#10;                onClick={() =&gt; {&#10;                  const newMessages = { ...emailConfig.defaultMessages };&#10;                  newMessages[`Nova Mensagem ${Object.keys(newMessages).length + 1}`] = '';&#10;                  setEmailConfig({&#10;                    ...emailConfig,&#10;                    defaultMessages: newMessages&#10;                  });&#10;                }}&#10;                className=&quot;mt-2 flex-grow-1&quot;&#10;              &gt;&#10;                &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                Adicionar Mensagem&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &#10;          &lt;DialogFooter&gt;&#10;            &lt;Button&#10;              type=&quot;button&quot;&#10;              variant=&quot;outline&quot;&#10;              onClick={() =&gt; setShowConfigDialog(false)}&#10;            &gt;&#10;              Cancelar&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              type=&quot;button&quot;&#10;              onClick={() =&gt; {&#10;                if (typeof window !== 'undefined') {&#10;                  localStorage.setItem('emailConfig', JSON.stringify(emailConfig));&#10;                }&#10;                setShowConfigDialog(false);&#10;                &#10;                toast({&#10;                  title: &quot;Configurações salvas&quot;,&#10;                  description: &quot;Suas configurações de email foram salvas com sucesso.&quot;,&#10;                });&#10;              }}&#10;            &gt;&#10;              Salvar Configurações&#10;            &lt;/Button&gt;&#10;          &lt;/DialogFooter&gt;&#10;        &lt;/DialogContent&gt;&#10;      &lt;/Dialog&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/email/EmailDetail.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/email/EmailDetail.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState, useEffect } from 'react';&#10;import { Archive, Trash2, Reply, Forward, MoreHorizontal, Paperclip, Download, Maximize, StretchVertical, Loader2, X, ArrowLeft } from 'lucide-react';&#10;import { Button } from '@/components/ui/button';&#10;import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';&#10;import {&#10;  DropdownMenu,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuTrigger,&#10;} from '@/components/ui/dropdown-menu';&#10;import {LayoutMode} from &quot;@/components/email/EmailClient&quot;;&#10;import EmailComposer from './EmailComposer';&#10;import { useEmail, useResponderEmail } from '@/lib/api/hooks';&#10;import { useToast } from '@/hooks/use-toast';&#10;import { Anexo } from '@/lib/api/types'&#10;import { cn } from '@/lib/utils';&#10;&#10;interface EmailDetailProps {&#10;  emailId: string;&#10;  onClose(): void;&#10;  layoutMode?: LayoutMode;&#10;  onLayoutChange?: (mode: LayoutMode) =&gt; void;&#10;  onSend?: (email: {&#10;    to: string;&#10;    cc?: string;&#10;    bcc?: string;&#10;    subject: string;&#10;    content: string;&#10;    date: string;&#10;  }) =&gt; void;&#10;  emailConfig?: {&#10;    defaultMessages: {&#10;      [key: string]: string;&#10;    };&#10;    defaultFooter: string;&#10;  };&#10;}&#10;&#10;// Helper function to format date&#10;const formatDate = (dateString?: string): string =&gt; {&#10;  if (!dateString) return '';&#10;  &#10;  const date = new Date(dateString);&#10;&#10;  // Format as full date and time&#10;  return date.toLocaleDateString('pt-BR', { &#10;    year: 'numeric', &#10;    month: 'long', &#10;    day: 'numeric',&#10;    hour: '2-digit',&#10;    minute: '2-digit'&#10;  });&#10;};&#10;&#10;// Mock emails data - same as in EmailList&#10;const MOCK_EMAILS = [&#10;  {&#10;    id: 'mock-1',&#10;    from: 'João Silva',&#10;    fromEmail: 'joao@empresa.com',&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#10;    content: `Prezado(a),&#10;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#10;&#10;Os principais destaques são:&#10;• Crescimento de 15% em relação ao mês anterior&#10;• Aumento de 8% no número de novos clientes&#10;• Melhoria na taxa de conversão para 12%&#10;&#10;Principais produtos vendidos:&#10;1. Produto A - R$ 45.000&#10;2. Produto B - R$ 32.000  &#10;3. Produto C - R$ 28.500&#10;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#10;&#10;Atenciosamente,&#10;João Silva&#10;Gerente Comercial&#10;(11) 9999-8888`,&#10;    date: new Date().toISOString(),&#10;    isStarred: true,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-2',&#10;    from: 'Maria Santos',&#10;    fromEmail: 'maria@consultoria.com',&#10;    subject: 'Proposta de consultoria em marketing digital',&#10;    content: `Olá!&#10;&#10;Espero que esteja bem!&#10;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#10;&#10;Nossa experiência inclui:&#10;• Gestão de redes sociais&#10;• Campanhas no Google Ads&#10;• SEO e marketing de conteúdo&#10;• E-mail marketing&#10;• Análise de métricas e ROI&#10;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#10;&#10;Quando seria um bom momento para conversarmos?&#10;&#10;Abraços,&#10;Maria Santos&#10;Consultora em Marketing Digital&#10;maria@consultoria.com&#10;(11) 8888-7777`,&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: false,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-3',&#10;    from: 'Carlos Oliveira',&#10;    fromEmail: 'carlos@fornecedor.com',&#10;    subject: 'Confirmação do pedido #2024-1156',&#10;    content: `Prezado Cliente,&#10;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#10;&#10;Detalhes do pedido:&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#10;• Valor total: R$ 2.850,00&#10;• Prazo de entrega: 5 dias úteis&#10;• Forma de pagamento: Boleto bancário&#10;&#10;Itens do pedido:&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#10;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#10;&#10;Em caso de dúvidas, entre em contato conosco.&#10;&#10;Atenciosamente,&#10;Carlos Oliveira&#10;Departamento de Vendas&#10;carlos@fornecedor.com&#10;(11) 7777-6666`,&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: false,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-4',&#10;    from: 'Ana Costa',&#10;    fromEmail: 'ana@juridico.com',&#10;    subject: 'Revisão do contrato de prestação de serviços',&#10;    content: `Prezado(a),&#10;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#10;&#10;Pontos que precisam de atenção:&#10;1. Cláusula 5.2 - Prazo de pagamento&#10;2. Cláusula 8.1 - Rescisão contratual  &#10;3. Cláusula 12 - Foro de eleição&#10;&#10;Recomendações:&#10;• Incluir cláusula de reajuste anual&#10;• Especificar melhor as penalidades por atraso&#10;• Definir critérios objetivos para avaliação de performance&#10;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#10;&#10;Podemos agendar uma reunião para discutir estas alterações?&#10;&#10;Cordialmente,&#10;Ana Costa&#10;Advogada&#10;OAB/SP 123.456&#10;ana@juridico.com&#10;(11) 6666-5555`,&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: true,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-5',&#10;    from: 'Ricardo Ferreira',&#10;    fromEmail: 'ricardo@ti.com',&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#10;    content: `Prezados usuários,&#10;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#10;&#10;Durante este período:&#10;• O sistema ficará indisponível&#10;• Não será possível acessar dados&#10;• Funcionalidades estarão offline&#10;&#10;Melhorias que serão implementadas:&#10;• Otimização da performance&#10;• Correção de bugs reportados&#10;• Atualização de segurança&#10;• Nova funcionalidade de relatórios&#10;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#10;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#10;&#10;Obrigado pela compreensão.&#10;&#10;Equipe de TI&#10;Ricardo Ferreira&#10;Coordenador de Sistemas&#10;ricardo@ti.com`,&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: false,&#10;    attachments: []&#10;  }&#10;];&#10;&#10;// Sample HTML content for emails that don't have a response&#10;const DEFAULT_EMAIL_CONTENT = `&#10;  &lt;p&gt;Este email não possui conteúdo detalhado.&lt;/p&gt;&#10;  &lt;p&gt;Em uma aplicação real, o conteúdo completo do email seria exibido aqui.&lt;/p&gt;&#10;`;&#10;export default function EmailDetail({&#10;  emailId,&#10;  onClose,&#10;  layoutMode = 'split',&#10;  onLayoutChange,&#10;  onSend,&#10;  emailConfig&#10;}: EmailDetailProps) {&#10;  const { toast } = useToast();&#10;  const [sentEmail, setSentEmail] = useState&lt;any&gt;(null);&#10;  const [isSentEmail, setIsSentEmail] = useState(false);&#10;  const [mockEmail, setMockEmail] = useState&lt;any&gt;(null);&#10;  const [isMockEmail, setIsMockEmail] = useState(false);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const emailIdNumber = parseInt(emailId, 10);&#10;  const [showReplyComposer, setShowReplyComposer] = useState(false);&#10;  const [showForwardComposer, setShowForwardComposer] = useState(false);&#10;  &#10;  // Check if this is a mock email&#10;  useEffect(() =&gt; {&#10;    const foundMockEmail = MOCK_EMAILS.find(email =&gt; email.id === emailId);&#10;    if (foundMockEmail) {&#10;      setMockEmail(foundMockEmail);&#10;      setIsMockEmail(true);&#10;      setIsLoading(false);&#10;      return;&#10;    }&#10;&#10;    // Check if this is a sent email from localStorage&#10;    if (typeof window !== 'undefined') {&#10;      const savedEmails = localStorage.getItem('sentEmails');&#10;      if (savedEmails) {&#10;        const sentEmails = JSON.parse(savedEmails);&#10;        const foundEmail = sentEmails.find((email: any) =&gt; email.id === emailId);&#10;        if (foundEmail) {&#10;          setSentEmail(foundEmail);&#10;          setIsSentEmail(true);&#10;        }&#10;      }&#10;      setIsLoading(false);&#10;    }&#10;  }, [emailId]);&#10;  &#10;  // Only fetch from API if not a sent email, not a mock email, and we have a valid number&#10;  const { data: apiEmail, loading: apiLoading, error } = useEmail(&#10;    !isSentEmail &amp;&amp; !isMockEmail &amp;&amp; !isNaN(emailIdNumber) ? emailIdNumber : 0&#10;  );&#10;  &#10;  // Get the responder email hook - only use loading state&#10;  const { loading: replyLoading } = useResponderEmail();&#10;&#10;  // Show error toast if API call fails&#10;  useEffect(() =&gt; {&#10;    if (error &amp;&amp; !isSentEmail) {&#10;      toast({&#10;        title: &quot;Erro ao carregar email&quot;,&#10;        description: &quot;Não foi possível carregar os detalhes do email. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    }&#10;  }, [error, toast, isSentEmail]);&#10;  &#10;  // Loading state&#10;  if ((apiLoading &amp;&amp; !isSentEmail &amp;&amp; !isMockEmail) || (isLoading &amp;&amp; !isMockEmail)) {&#10;    return (&#10;      &lt;div className=&quot;flex-1 bg-white flex flex-col h-full items-center justify-center&quot;&gt;&#10;        &lt;Loader2 className=&quot;h-8 w-8 text-blue-500 animate-spin mb-4&quot; /&gt;&#10;        &lt;p className=&quot;text-gray-500&quot;&gt;Carregando email...&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;  &#10;  // Email not found state - only show if it's not a mock email and not a sent email&#10;  if (!isMockEmail &amp;&amp; !isSentEmail &amp;&amp; (!apiEmail || (isNaN(emailIdNumber)))) {&#10;    return (&#10;      &lt;div className=&quot;flex-1 bg-white flex items-center justify-center&quot;&gt;&#10;        &lt;p className=&quot;text-gray-500&quot;&gt;Email não encontrado&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;  &#10;  // Map data to the format expected by the component&#10;  const email = isSentEmail ? {&#10;    id: sentEmail.id,&#10;    from: 'voce',&#10;    fromEmail: sentEmail.from || 'voce@example.com',&#10;    subject: sentEmail.subject,&#10;    content: sentEmail.content,&#10;    date: formatDate(sentEmail.date) || formatDate(new Date().toISOString()),&#10;    attachments: [] as Anexo[],&#10;    isStarred: false&#10;  } : isMockEmail ? {&#10;    id: mockEmail.id,&#10;    from: mockEmail.from,&#10;    fromEmail: mockEmail.fromEmail,&#10;    subject: mockEmail.subject,&#10;    content: mockEmail.content,&#10;    date: formatDate(mockEmail.date) || formatDate(new Date().toISOString()),&#10;    attachments: [] as Anexo[],&#10;    isStarred: false&#10;  } : {&#10;    id: apiEmail?.id_email.toString(),&#10;    from: apiEmail?.remetente.split(&quot;@&quot;)[0], // More user-friendly name&#10;    fromEmail: apiEmail?.remetente, // Placeholder email&#10;    subject: apiEmail?.assunto,&#10;    content: apiEmail?.conteudo || DEFAULT_EMAIL_CONTENT,&#10;    date: formatDate(apiEmail?.prazo_resposta) || formatDate(new Date().toISOString()), // Use prazo_resposta or current date&#10;    attachments: [] as Anexo[], // API doesn't have attachments yet&#10;    isStarred: false // API doesn't have this concept yet&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex-1 bg-white flex flex-col overflow-y-auto h-full max-h-full&quot;&gt;&#10;      {/* Email Header */}&#10;      &lt;div className=&quot;p-6 border-b border-gray-200&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={onClose}&gt;&#10;              &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;            &lt;/Button&gt;&#10;            &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;              &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;DropdownMenu&gt;&#10;              &lt;DropdownMenuTrigger asChild&gt;&#10;                &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                  &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;/Button&gt;&#10;              &lt;/DropdownMenuTrigger&gt;&#10;              &lt;DropdownMenuContent&gt;&#10;                &lt;DropdownMenuItem&gt;Marcar como não lido&lt;/DropdownMenuItem&gt;&#10;                &lt;DropdownMenuItem&gt;Adicionar etiqueta&lt;/DropdownMenuItem&gt;&#10;                &lt;DropdownMenuItem&gt;Imprimir&lt;/DropdownMenuItem&gt;&#10;                &lt;DropdownMenuItem&gt;Reportar spam&lt;/DropdownMenuItem&gt;&#10;              &lt;/DropdownMenuContent&gt;&#10;            &lt;/DropdownMenu&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;h1 className=&quot;text-2xl font-bold text-gray-900 mb-2&quot;&gt;{email.subject}&lt;/h1&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-600&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Avatar className=&quot;h-8 w-8&quot;&gt;&#10;              &lt;AvatarImage src=&quot;/placeholder-avatar.jpg&quot; alt={email.from} /&gt;&#10;              &lt;AvatarFallback&gt;MS&lt;/AvatarFallback&gt;&#10;            &lt;/Avatar&gt;&#10;            &lt;div&gt;&#10;              &lt;div className=&quot;font-medium text-gray-900&quot;&gt;{email.from}&lt;/div&gt;&#10;              &lt;div className=&quot;text-gray-500&quot;&gt;{email.fromEmail}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex-1 p-6&quot;&gt;&#10;        &lt;div&#10;          className=&quot;prose max-w-none&quot;&#10;          dangerouslySetInnerHTML={{ __html: email.content }}&#10;        /&gt;&#10;&#10;        {email.attachments.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-8 p-4 bg-gray-50 rounded-3xl&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 mb-3 flex items-center&quot;&gt;&#10;              &lt;Paperclip className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Anexos ({email.attachments.length})&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              {email.attachments.map((attachment, index) =&gt; (&#10;                &lt;div key={index} className=&quot;flex items-center justify-between p-2 bg-white rounded border&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                    &lt;div className=&quot;w-8 h-8 bg-blue-100 rounded flex items-center justify-center&quot;&gt;&#10;                      &lt;Paperclip className=&quot;h-4 w-4 text-blue-600&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;font-medium text-sm&quot;&gt;{attachment?.ds_nome_anexo || &quot;Arquivo&quot;}&lt;/div&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500&quot;&gt;{attachment?.nm_tamanho_anexo || &quot;20MB&quot;}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                    &lt;Download className=&quot;h-4 w-4&quot; /&gt;&#10;                  &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6 border-t border-gray-200 mt-auto&quot;&gt;&#10;        &lt;div className=&quot;flex items-center gap-2 w-full&quot;&gt;&#10;          &lt;Button &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;            onClick={() =&gt; {&#10;              // Open reply composer&#10;              setShowReplyComposer(true);&#10;            }}&#10;            disabled={replyLoading}&#10;          &gt;&#10;            {replyLoading ? (&#10;              &lt;Loader2 className=&quot;h-4 w-4 mr-2 animate-spin&quot; /&gt;&#10;            ) : (&#10;              &lt;Reply className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            )}&#10;            Responder&#10;          &lt;/Button&gt;&#10;          &lt;Button &#10;            variant=&quot;secondary&quot; &#10;            className=&quot;ml-auto&quot;&#10;            onClick={() =&gt; {&#10;              // Open forward composer&#10;              setShowForwardComposer(true);&#10;            }}&#10;          &gt;&#10;            &lt;Forward className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Encaminhar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {showReplyComposer &amp;&amp; (&#10;        &lt;EmailComposer &#10;          onClose={() =&gt; setShowReplyComposer(false)}&#10;          initialTo={email.fromEmail}&#10;          initialSubject={email.subject}&#10;          isReply={true}&#10;          originalEmail={email}&#10;          onSend={onSend}&#10;          emailConfig={emailConfig}&#10;        /&gt;&#10;      )}&#10;&#10;      {showForwardComposer &amp;&amp; (&#10;        &lt;EmailComposer &#10;          onClose={() =&gt; setShowForwardComposer(false)}&#10;          initialSubject={email.subject}&#10;          isForward={true}&#10;          originalEmail={email}&#10;          onSend={onSend}&#10;          emailConfig={emailConfig}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useState, useEffect } from 'react';&#10;import { Archive, Trash2, Reply, Forward, MoreHorizontal, Paperclip, Download, Maximize, StretchVertical, Loader2, X, ArrowLeft } from 'lucide-react';&#10;import { Button } from '@/components/ui/button';&#10;import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';&#10;import {&#10;  DropdownMenu,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuTrigger,&#10;} from '@/components/ui/dropdown-menu';&#10;import EmailComposer from './EmailComposer';&#10;import { useEmail, useResponderEmail } from '@/lib/api/hooks';&#10;import { useToast } from '@/hooks/use-toast';&#10;import { Anexo } from '@/lib/api/types'&#10;import { cn } from '@/lib/utils';&#10;&#10;interface EmailDetailProps {&#10;  emailId: string;&#10;  onClose(): void;&#10;  onSend?: (email: {&#10;    to: string;&#10;    cc?: string;&#10;    bcc?: string;&#10;    subject: string;&#10;    content: string;&#10;    date: string;&#10;  }) =&gt; void;&#10;  emailConfig?: {&#10;    defaultMessages: {&#10;      [key: string]: string;&#10;    };&#10;    defaultFooter: string;&#10;  };&#10;}&#10;&#10;// Helper function to format date&#10;const formatDate = (dateString?: string): string =&gt; {&#10;  if (!dateString) return '';&#10;  &#10;  const date = new Date(dateString);&#10;&#10;  // Format as full date and time&#10;  return date.toLocaleDateString('pt-BR', { &#10;    year: 'numeric', &#10;    month: 'long', &#10;    day: 'numeric',&#10;    hour: '2-digit',&#10;    minute: '2-digit'&#10;  });&#10;};&#10;&#10;// Mock emails data - same as in EmailList&#10;const MOCK_EMAILS = [&#10;  {&#10;    id: 'mock-1',&#10;    from: 'João Silva',&#10;    fromEmail: 'joao@empresa.com',&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#10;    content: `Prezado(a),&#10;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#10;&#10;Os principais destaques são:&#10;• Crescimento de 15% em relação ao mês anterior&#10;• Aumento de 8% no número de novos clientes&#10;• Melhoria na taxa de conversão para 12%&#10;&#10;Principais produtos vendidos:&#10;1. Produto A - R$ 45.000&#10;2. Produto B - R$ 32.000  &#10;3. Produto C - R$ 28.500&#10;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#10;&#10;Atenciosamente,&#10;João Silva&#10;Gerente Comercial&#10;(11) 9999-8888`,&#10;    date: new Date().toISOString(),&#10;    isStarred: true,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-2',&#10;    from: 'Maria Santos',&#10;    fromEmail: 'maria@consultoria.com',&#10;    subject: 'Proposta de consultoria em marketing digital',&#10;    content: `Olá!&#10;&#10;Espero que esteja bem!&#10;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#10;&#10;Nossa experiência inclui:&#10;• Gestão de redes sociais&#10;• Campanhas no Google Ads&#10;• SEO e marketing de conteúdo&#10;• E-mail marketing&#10;• Análise de métricas e ROI&#10;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#10;&#10;Quando seria um bom momento para conversarmos?&#10;&#10;Abraços,&#10;Maria Santos&#10;Consultora em Marketing Digital&#10;maria@consultoria.com&#10;(11) 8888-7777`,&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: false,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-3',&#10;    from: 'Carlos Oliveira',&#10;    fromEmail: 'carlos@fornecedor.com',&#10;    subject: 'Confirmação do pedido #2024-1156',&#10;    content: `Prezado Cliente,&#10;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#10;&#10;Detalhes do pedido:&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#10;• Valor total: R$ 2.850,00&#10;• Prazo de entrega: 5 dias úteis&#10;• Forma de pagamento: Boleto bancário&#10;&#10;Itens do pedido:&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#10;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#10;&#10;Em caso de dúvidas, entre em contato conosco.&#10;&#10;Atenciosamente,&#10;Carlos Oliveira&#10;Departamento de Vendas&#10;carlos@fornecedor.com&#10;(11) 7777-6666`,&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: false,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-4',&#10;    from: 'Ana Costa',&#10;    fromEmail: 'ana@juridico.com',&#10;    subject: 'Revisão do contrato de prestação de serviços',&#10;    content: `Prezado(a),&#10;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#10;&#10;Pontos que precisam de atenção:&#10;1. Cláusula 5.2 - Prazo de pagamento&#10;2. Cláusula 8.1 - Rescisão contratual  &#10;3. Cláusula 12 - Foro de eleição&#10;&#10;Recomendações:&#10;• Incluir cláusula de reajuste anual&#10;• Especificar melhor as penalidades por atraso&#10;• Definir critérios objetivos para avaliação de performance&#10;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#10;&#10;Podemos agendar uma reunião para discutir estas alterações?&#10;&#10;Cordialmente,&#10;Ana Costa&#10;Advogada&#10;OAB/SP 123.456&#10;ana@juridico.com&#10;(11) 6666-5555`,&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: true,&#10;    attachments: []&#10;  },&#10;  {&#10;    id: 'mock-5',&#10;    from: 'Ricardo Ferreira',&#10;    fromEmail: 'ricardo@ti.com',&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#10;    content: `Prezados usuários,&#10;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#10;&#10;Durante este período:&#10;• O sistema ficará indisponível&#10;• Não será possível acessar dados&#10;• Funcionalidades estarão offline&#10;&#10;Melhorias que serão implementadas:&#10;• Otimização da performance&#10;• Correção de bugs reportados&#10;• Atualização de segurança&#10;• Nova funcionalidade de relatórios&#10;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#10;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#10;&#10;Obrigado pela compreensão.&#10;&#10;Equipe de TI&#10;Ricardo Ferreira&#10;Coordenador de Sistemas&#10;ricardo@ti.com`,&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isStarred: false,&#10;    attachments: []&#10;  }&#10;];&#10;&#10;// Sample HTML content for emails that don't have a response&#10;const DEFAULT_EMAIL_CONTENT = `&#10;  &lt;p&gt;Este email não possui conteúdo detalhado.&lt;/p&gt;&#10;  &lt;p&gt;Em uma aplicação real, o conteúdo completo do email seria exibido aqui.&lt;/p&gt;&#10;`;&#10;export default function EmailDetail({&#10;  emailId,&#10;  onClose,&#10;  onSend,&#10;  emailConfig&#10;}: EmailDetailProps) {&#10;  const { toast } = useToast();&#10;  const [sentEmail, setSentEmail] = useState&lt;any&gt;(null);&#10;  const [isSentEmail, setIsSentEmail] = useState(false);&#10;  const [mockEmail, setMockEmail] = useState&lt;any&gt;(null);&#10;  const [isMockEmail, setIsMockEmail] = useState(false);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const emailIdNumber = parseInt(emailId, 10);&#10;  const [showReplyComposer, setShowReplyComposer] = useState(false);&#10;  const [showForwardComposer, setShowForwardComposer] = useState(false);&#10;  &#10;  // Check if this is a mock email&#10;  useEffect(() =&gt; {&#10;    const foundMockEmail = MOCK_EMAILS.find(email =&gt; email.id === emailId);&#10;    if (foundMockEmail) {&#10;      setMockEmail(foundMockEmail);&#10;      setIsMockEmail(true);&#10;      setIsLoading(false);&#10;      return;&#10;    }&#10;&#10;    // Check if this is a sent email from localStorage&#10;    if (typeof window !== 'undefined') {&#10;      const savedEmails = localStorage.getItem('sentEmails');&#10;      if (savedEmails) {&#10;        const sentEmails = JSON.parse(savedEmails);&#10;        const foundEmail = sentEmails.find((email: any) =&gt; email.id === emailId);&#10;        if (foundEmail) {&#10;          setSentEmail(foundEmail);&#10;          setIsSentEmail(true);&#10;        }&#10;      }&#10;      setIsLoading(false);&#10;    }&#10;  }, [emailId]);&#10;  &#10;  // Only fetch from API if not a sent email, not a mock email, and we have a valid number&#10;  const { data: apiEmail, loading: apiLoading, error } = useEmail(&#10;    !isSentEmail &amp;&amp; !isMockEmail &amp;&amp; !isNaN(emailIdNumber) ? emailIdNumber : 0&#10;  );&#10;  &#10;  // Get the responder email hook - only use loading state&#10;  const { loading: replyLoading } = useResponderEmail();&#10;&#10;  // Show error toast if API call fails&#10;  useEffect(() =&gt; {&#10;    if (error &amp;&amp; !isSentEmail) {&#10;      toast({&#10;        title: &quot;Erro ao carregar email&quot;,&#10;        description: &quot;Não foi possível carregar os detalhes do email. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    }&#10;  }, [error, toast, isSentEmail]);&#10;  &#10;  // Loading state&#10;  if ((apiLoading &amp;&amp; !isSentEmail &amp;&amp; !isMockEmail) || (isLoading &amp;&amp; !isMockEmail)) {&#10;    return (&#10;      &lt;div className=&quot;flex-1 bg-white flex flex-col h-full items-center justify-center&quot;&gt;&#10;        &lt;Loader2 className=&quot;h-8 w-8 text-blue-500 animate-spin mb-4&quot; /&gt;&#10;        &lt;p className=&quot;text-gray-500&quot;&gt;Carregando email...&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;  &#10;  // Email not found state - only show if it's not a mock email and not a sent email&#10;  if (!isMockEmail &amp;&amp; !isSentEmail &amp;&amp; (!apiEmail || (isNaN(emailIdNumber)))) {&#10;    return (&#10;      &lt;div className=&quot;flex-1 bg-white flex items-center justify-center&quot;&gt;&#10;        &lt;p className=&quot;text-gray-500&quot;&gt;Email não encontrado&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;  &#10;  // Map data to the format expected by the component&#10;  const email = isSentEmail ? {&#10;    id: sentEmail.id,&#10;    from: 'voce',&#10;    fromEmail: sentEmail.from || 'voce@example.com',&#10;    subject: sentEmail.subject,&#10;    content: sentEmail.content,&#10;    date: formatDate(sentEmail.date) || formatDate(new Date().toISOString()),&#10;    attachments: [] as Anexo[],&#10;    isStarred: false&#10;  } : isMockEmail ? {&#10;    id: mockEmail.id,&#10;    from: mockEmail.from,&#10;    fromEmail: mockEmail.fromEmail,&#10;    subject: mockEmail.subject,&#10;    content: mockEmail.content,&#10;    date: formatDate(mockEmail.date) || formatDate(new Date().toISOString()),&#10;    attachments: [] as Anexo[],&#10;    isStarred: false&#10;  } : {&#10;    id: apiEmail?.id_email.toString(),&#10;    from: apiEmail?.remetente.split(&quot;@&quot;)[0], // More user-friendly name&#10;    fromEmail: apiEmail?.remetente, // Placeholder email&#10;    subject: apiEmail?.assunto,&#10;    content: apiEmail?.conteudo || DEFAULT_EMAIL_CONTENT,&#10;    date: formatDate(apiEmail?.prazo_resposta) || formatDate(new Date().toISOString()), // Use prazo_resposta or current date&#10;    attachments: [] as Anexo[], // API doesn't have attachments yet&#10;    isStarred: false // API doesn't have this concept yet&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex-1 bg-white flex flex-col overflow-y-auto h-full max-h-full&quot;&gt;&#10;      {/* Email Header */}&#10;      &lt;div className=&quot;p-6 border-b border-gray-200&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={onClose}&gt;&#10;              &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;            &lt;/Button&gt;&#10;            &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;              &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;DropdownMenu&gt;&#10;              &lt;DropdownMenuTrigger asChild&gt;&#10;                &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                  &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;/Button&gt;&#10;              &lt;/DropdownMenuTrigger&gt;&#10;              &lt;DropdownMenuContent&gt;&#10;                &lt;DropdownMenuItem&gt;Marcar como não lido&lt;/DropdownMenuItem&gt;&#10;                &lt;DropdownMenuItem&gt;Adicionar etiqueta&lt;/DropdownMenuItem&gt;&#10;                &lt;DropdownMenuItem&gt;Imprimir&lt;/DropdownMenuItem&gt;&#10;                &lt;DropdownMenuItem&gt;Reportar spam&lt;/DropdownMenuItem&gt;&#10;              &lt;/DropdownMenuContent&gt;&#10;            &lt;/DropdownMenu&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;h1 className=&quot;text-2xl font-bold text-gray-900 mb-2&quot;&gt;{email.subject}&lt;/h1&gt;&#10;&#10;        &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-600&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Avatar className=&quot;h-8 w-8&quot;&gt;&#10;              &lt;AvatarImage src=&quot;/placeholder-avatar.jpg&quot; alt={email.from} /&gt;&#10;              &lt;AvatarFallback&gt;MS&lt;/AvatarFallback&gt;&#10;            &lt;/Avatar&gt;&#10;            &lt;div&gt;&#10;              &lt;div className=&quot;font-medium text-gray-900&quot;&gt;{email.from}&lt;/div&gt;&#10;              &lt;div className=&quot;text-gray-500&quot;&gt;{email.fromEmail}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;flex-1 p-6&quot;&gt;&#10;        &lt;div&#10;          className=&quot;prose max-w-none&quot;&#10;          dangerouslySetInnerHTML={{ __html: email.content }}&#10;        /&gt;&#10;&#10;        {email.attachments.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mt-8 p-4 bg-gray-50 rounded-3xl&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 mb-3 flex items-center&quot;&gt;&#10;              &lt;Paperclip className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;              Anexos ({email.attachments.length})&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              {email.attachments.map((attachment, index) =&gt; (&#10;                &lt;div key={index} className=&quot;flex items-center justify-between p-2 bg-white rounded border&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                    &lt;div className=&quot;w-8 h-8 bg-blue-100 rounded flex items-center justify-center&quot;&gt;&#10;                      &lt;Paperclip className=&quot;h-4 w-4 text-blue-600&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;font-medium text-sm&quot;&gt;{attachment?.ds_nome_anexo || &quot;Arquivo&quot;}&lt;/div&gt;&#10;                      &lt;div className=&quot;text-xs text-gray-500&quot;&gt;{attachment?.nm_tamanho_anexo || &quot;20MB&quot;}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                    &lt;Download className=&quot;h-4 w-4&quot; /&gt;&#10;                  &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;p-6 border-t border-gray-200 mt-auto&quot;&gt;&#10;        &lt;div className=&quot;flex items-center gap-2 w-full&quot;&gt;&#10;          &lt;Button &#10;            className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;            onClick={() =&gt; {&#10;              // Open reply composer&#10;              setShowReplyComposer(true);&#10;            }}&#10;            disabled={replyLoading}&#10;          &gt;&#10;            {replyLoading ? (&#10;              &lt;Loader2 className=&quot;h-4 w-4 mr-2 animate-spin&quot; /&gt;&#10;            ) : (&#10;              &lt;Reply className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            )}&#10;            Responder&#10;          &lt;/Button&gt;&#10;          &lt;Button &#10;            variant=&quot;secondary&quot; &#10;            className=&quot;ml-auto&quot;&#10;            onClick={() =&gt; {&#10;              // Open forward composer&#10;              setShowForwardComposer(true);&#10;            }}&#10;          &gt;&#10;            &lt;Forward className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Encaminhar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {showReplyComposer &amp;&amp; (&#10;        &lt;EmailComposer &#10;          onClose={() =&gt; setShowReplyComposer(false)}&#10;          initialTo={email.fromEmail}&#10;          initialSubject={email.subject}&#10;          isReply={true}&#10;          originalEmail={email}&#10;          onSend={onSend}&#10;          emailConfig={emailConfig}&#10;        /&gt;&#10;      )}&#10;&#10;      {showForwardComposer &amp;&amp; (&#10;        &lt;EmailComposer &#10;          onClose={() =&gt; setShowForwardComposer(false)}&#10;          initialSubject={email.subject}&#10;          isForward={true}&#10;          originalEmail={email}&#10;          onSend={onSend}&#10;          emailConfig={emailConfig}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/email/EmailList.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/email/EmailList.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, {useState, useCallback, useMemo, useEffect} from 'react';&#10;import {Archive, Paperclip, RotateCw, Trash2, Loader2, Mail} from 'lucide-react';&#10;import {Button} from '@/components/ui/button';&#10;import {Checkbox} from '@/components/ui/checkbox';&#10;import {cn} from '@/lib/utils';&#10;import {useEmails} from '@/lib/api/hooks';&#10;import {Email as ApiEmail} from '@/lib/api/types';&#10;import {useToast} from '@/hooks/use-toast';&#10;import {apiClient} from '@/lib/api/client';&#10;&#10;interface Email {&#10;  id: string;&#10;  from: string;&#10;  subject: string;&#10;  preview: string;&#10;  date: string;&#10;  isRead: boolean;&#10;  hasAttachment: boolean;&#10;  labels: string[];&#10;  content?: string;&#10;}&#10;&#10;&#10;const MOCK_EMAILS = [&#10;  {&#10;    id: 'mock-1',&#10;    from: 'João Silva &lt;joao@empresa.com&gt;',&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#10;    preview: 'Segue em anexo o relatório mensal de vendas referente ao mês de novembro. Os resultados mostram um crescimento de 15% em relação ao mês anterior...',&#10;    date: new Date().toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['importante', 'trabalho'],&#10;    content: `Prezado(a),&#10;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#10;&#10;Os principais destaques são:&#10;• Crescimento de 15% em relação ao mês anterior&#10;• Aumento de 8% no número de novos clientes&#10;• Melhoria na taxa de conversão para 12%&#10;&#10;Principais produtos vendidos:&#10;1. Produto A - R$ 45.000&#10;2. Produto B - R$ 32.000  &#10;3. Produto C - R$ 28.500&#10;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#10;&#10;Atenciosamente,&#10;João Silva&#10;Gerente Comercial&#10;(11) 9999-8888`&#10;  },&#10;  {&#10;    id: 'mock-2',&#10;    from: 'Maria Santos &lt;maria@consultoria.com&gt;',&#10;    subject: 'Proposta de consultoria em marketing digital',&#10;    preview: 'Espero que esteja bem! Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa...',&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['proposta'],&#10;    content: `Olá!&#10;&#10;Espero que esteja bem!&#10;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#10;&#10;Nossa experiência inclui:&#10;• Gestão de redes sociais&#10;• Campanhas no Google Ads&#10;• SEO e marketing de conteúdo&#10;• E-mail marketing&#10;• Análise de métricas e ROI&#10;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#10;&#10;Quando seria um bom momento para conversarmos?&#10;&#10;Abraços,&#10;Maria Santos&#10;Consultora em Marketing Digital&#10;maria@consultoria.com&#10;(11) 8888-7777`&#10;  },&#10;  {&#10;    id: 'mock-3',&#10;    from: 'Carlos Oliveira &lt;carlos@fornecedor.com&gt;',&#10;    subject: 'Confirmação do pedido #2024-1156',&#10;    preview: 'Confirmamos o recebimento do seu pedido #2024-1156. Prazo de entrega estimado: 5 dias úteis...',&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['pedido'],&#10;    content: `Prezado Cliente,&#10;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#10;&#10;Detalhes do pedido:&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#10;• Valor total: R$ 2.850,00&#10;• Prazo de entrega: 5 dias úteis&#10;• Forma de pagamento: Boleto banceiro&#10;&#10;Itens do pedido:&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#10;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#10;&#10;Em caso de dúvidas, entre em contato conosco.&#10;&#10;Atenciosamente,&#10;Carlos Oliveira&#10;Departamento de Vendas&#10;carlos@fornecedor.com&#10;(11) 7777-6666`&#10;  },&#10;  {&#10;    id: 'mock-4',&#10;    from: 'Ana Costa &lt;ana@juridico.com&gt;',&#10;    subject: 'Revisão do contrato de prestação de serviços',&#10;    preview: 'Conforme solicitado, segue a revisão do contrato de prestação de serviços. Identifiquei alguns pontos que precisam de atenção...',&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: true,&#10;    labels: ['jurídico', 'urgente'],&#10;    content: `Prezado(a),&#10;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#10;&#10;Pontos que precisam de atenção:&#10;1. Cláusula 5.2 - Prazo de pagamento&#10;2. Cláusula 8.1 - Rescisão contratual  &#10;3. Cláusula 12 - Foro de eleição&#10;&#10;Recomendações:&#10;• Incluir cláusula de reajuste anual&#10;• Especificar melhor as penalidades por atraso&#10;• Definir critérios objetivos para avaliação de performance&#10;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#10;&#10;Podemos agendar uma reunião para discutir estas alterações?&#10;&#10;Cordialmente,&#10;Ana Costa&#10;Advogada&#10;OAB/SP 123.456&#10;ana@juridico.com&#10;(11) 6666-5555`&#10;  },&#10;  {&#10;    id: 'mock-5',&#10;    from: 'Ricardo Ferreira &lt;ricardo@ti.com&gt;',&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#10;    preview: 'Informamos que será realizada manutenção programada no sistema no sábado, 09/12, das 02h às 06h...',&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['sistema', 'manutenção'],&#10;    content: `Prezados usuários,&#10;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#10;&#10;Durante este período:&#10;• O sistema ficará indisponível&#10;• Não será possível acessar dados&#10;• Funcionalidades estarão offline&#10;&#10;Melhorias que serão implementadas:&#10;• Otimização da performance&#10;• Correção de bugs reportados&#10;• Atualização de segurança&#10;• Nova funcionalidade de relatórios&#10;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#10;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#10;&#10;Obrigado pela compreensão.&#10;&#10;Equipe de TI&#10;Ricardo Ferreira&#10;Coordenador de Sistemas&#10;ricardo@ti.com`&#10;  }&#10;];&#10;&#10;&#10;const formatDate = (dateString?: string): string =&gt; {&#10;  if (!dateString) return '';&#10;&#10;  const date = new Date(dateString);&#10;&#10;  // Format as dd/MM/yyyy HH:mm&#10;  const day = date.getDate().toString().padStart(2, '0');&#10;  const month = (date.getMonth() + 1).toString().padStart(2, '0');&#10;  const year = date.getFullYear();&#10;  const hours = date.getHours().toString().padStart(2, '0');&#10;  const minutes = date.getMinutes().toString().padStart(2, '0');&#10;&#10;  return `${day}/${month}/${year} ${hours}:${minutes}`;&#10;};&#10;&#10;interface SentEmail {&#10;  id: string;&#10;  to: string;&#10;  cc?: string;&#10;  bcc?: string;&#10;  subject: string;&#10;  content: string;&#10;  date: string;&#10;  from: string;&#10;}&#10;&#10;interface EmailListProps {&#10;  folder: string;&#10;  searchQuery: string;&#10;  selectedEmail: string | null;&#10;  onEmailSelect: (emailId: string) =&gt; void;&#10;  sentEmails?: SentEmail[];&#10;  onUnreadCountChange?: (count: number) =&gt; void;&#10;}&#10;&#10;function EmailList({&#10;  folder,&#10;  searchQuery,&#10;  selectedEmail,&#10;  onEmailSelect,&#10;  sentEmails = [],&#10;  onUnreadCountChange&#10;}: EmailListProps) {&#10;  const [selectedEmails, setSelectedEmails] = useState&lt;string[]&gt;([]);&#10;  const [syncLoading, setSyncLoading] = useState(false);&#10;  const {toast} = useToast();&#10;&#10;&#10;  const {data, error, loading, refetch} = useEmails({});&#10;&#10;&#10;  const syncAndFetchEmails = async () =&gt; {&#10;    try {&#10;      setSyncLoading(true);&#10;&#10;&#10;      await apiClient.sincronizarEmails();&#10;&#10;&#10;      await refetch();&#10;&#10;      toast({&#10;        title: &quot;Emails sincronizados&quot;,&#10;        description: &quot;Seus emails foram sincronizados com sucesso.&quot;,&#10;      });&#10;    } catch (err) {&#10;      console.error('Error syncing emails:', err);&#10;      toast({&#10;        title: &quot;Erro ao sincronizar emails&quot;,&#10;        description: &quot;Não foi possível sincronizar seus emails. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    } finally {&#10;      setSyncLoading(false);&#10;    }&#10;  };&#10;&#10;&#10;  useEffect(() =&gt; {&#10;    if (error) {&#10;      toast({&#10;        title: &quot;Erro ao carregar emails&quot;,&#10;        description: &quot;Não foi possível carregar os emails. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    }&#10;  }, [error, toast]);&#10;&#10;  useEffect(() =&gt; {&#10;    syncAndFetchEmails().then(r =&gt; {&#10;    })&#10;  }, []);&#10;&#10;&#10;  const apiEmails: Email[] = useMemo(() =&gt; {&#10;    return data?.items?.map((apiEmail: ApiEmail) =&gt; ({&#10;      id: apiEmail.id_email.toString(),&#10;      from: apiEmail.remetente,&#10;      subject: apiEmail.assunto,&#10;      preview: apiEmail.conteudo,&#10;      date: formatDate(apiEmail.prazo_resposta),&#10;      isRead: apiEmail.tp_status !== 'NOVO',&#10;      hasAttachment: false,&#10;      labels: [],&#10;    })) || [];&#10;  }, [data]);&#10;&#10;&#10;  const emails: Email[] = useMemo(() =&gt; {&#10;    // Format mock emails dates&#10;    const formattedMockEmails = MOCK_EMAILS.map(email =&gt; ({&#10;      ...email,&#10;      date: formatDate(email.date)&#10;    }));&#10;&#10;    if (folder === 'inbox') {&#10;      return [...formattedMockEmails, ...apiEmails];&#10;    }&#10;    return apiEmails;&#10;  }, [apiEmails, folder]);&#10;&#10;&#10;  useEffect(() =&gt; {&#10;    if (onUnreadCountChange &amp;&amp; folder === 'inbox') {&#10;      const allEmails = [...MOCK_EMAILS, ...apiEmails];&#10;      const unreadCount = allEmails.filter(email =&gt; !email.isRead).length;&#10;      const safeCount = Math.max(0, unreadCount);&#10;      onUnreadCountChange(safeCount);&#10;    }&#10;  }, [apiEmails, onUnreadCountChange, folder]);&#10;&#10;&#10;  const sentEmailsFormatted: Email[] = useMemo(() =&gt; {&#10;    return sentEmails.map(email =&gt; ({&#10;      id: email.id,&#10;      from: 'Você',&#10;      subject: email.subject,&#10;      preview: email.content.replace(/&lt;[^&gt;]*&gt;/g, ''),&#10;      date: formatDate(email.date),&#10;      isRead: true,&#10;      hasAttachment: false,&#10;      labels: [],&#10;    }));&#10;  }, [sentEmails]);&#10;&#10;&#10;  const filteredEmails = useMemo(() =&gt; {&#10;    // If showing sent emails folder&#10;    if (folder === 'sent') {&#10;      return sentEmailsFormatted.filter(email =&gt; {&#10;        if (searchQuery) {&#10;          return email?.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;            email?.preview?.toLowerCase().includes(searchQuery.toLowerCase());&#10;        }&#10;        return true;&#10;      });&#10;    }&#10;&#10;    // Filter all other emails&#10;    return emails.filter(email =&gt; {&#10;      if (searchQuery) {&#10;        return email?.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;          email?.from?.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;          email?.preview?.toLowerCase().includes(searchQuery.toLowerCase());&#10;      }&#10;&#10;      switch (folder) {&#10;        case 'inbox':&#10;          return true;&#10;        case 'drafts':&#10;          return false;&#10;        default:&#10;          return true;&#10;      }&#10;    });&#10;  }, [emails, sentEmailsFormatted, searchQuery, folder]);&#10;&#10;  const toggleEmailSelection = useCallback((emailId: string) =&gt; {&#10;    setSelectedEmails(prev =&gt;&#10;      prev.includes(emailId)&#10;        ? prev.filter(id =&gt; id !== emailId)&#10;        : [...prev, emailId]&#10;    );&#10;  }, []);&#10;&#10;  const selectAllEmails = useCallback(() =&gt; {&#10;    setSelectedEmails(&#10;      selectedEmails.length === filteredEmails.length&#10;        ? []&#10;        : filteredEmails.map(email =&gt; email.id)&#10;    );&#10;  }, [selectedEmails.length, filteredEmails]);&#10;&#10;  return (&#10;    &lt;div className=&quot;w-96 bg-white border-r border-gray-200 flex flex-col&quot;&gt;&#10;      {/* Email Actions */}&#10;      &lt;div className=&quot;p-4 border-b border-gray-200&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between min-h-[2rem]&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Checkbox&#10;              checked={selectedEmails.length === filteredEmails.length &amp;&amp; filteredEmails.length &gt; 0}&#10;              onCheckedChange={selectAllEmails}&#10;              disabled={loading || filteredEmails.length === 0}&#10;            /&gt;&#10;            &lt;span className=&quot;text-sm text-gray-600 whitespace-nowrap&quot;&gt;&#10;              {loading ? (&#10;                &quot;Carregando...&quot;&#10;              ) : selectedEmails.length &gt; 0 ? (&#10;                `${selectedEmails.length} selecionados`&#10;              ) : (&#10;                `${filteredEmails.length} emails`&#10;              )}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;            {selectedEmails.length &gt; 0 ? (&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                &lt;Trash2 className=&quot;h-4 w-4&quot;/&gt;&#10;              &lt;/Button&gt;&#10;            ) : (&#10;              &lt;Button&#10;                variant=&quot;ghost&quot;&#10;                size=&quot;sm&quot;&#10;                onClick={() =&gt; syncAndFetchEmails()}&#10;                disabled={loading || syncLoading}&#10;              &gt;&#10;                {loading || syncLoading ? (&#10;                  &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot;/&gt;&#10;                ) : (&#10;                  &lt;RotateCw className=&quot;h-4 w-4&quot;/&gt;&#10;                )}&#10;              &lt;/Button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Email List */}&#10;      &lt;div className=&quot;flex flex-col-reverse overflow-y-auto&quot;&gt;&#10;        {loading ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#10;            &lt;Loader2 className=&quot;h-8 w-8 text-blue-500 animate-spin mb-4&quot;/&gt;&#10;            &lt;p className=&quot;text-gray-500&quot;&gt;Carregando emails...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : filteredEmails.length === 0 ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#10;            &lt;Mail className=&quot;h-12 w-12 text-gray-300 mb-4&quot;/&gt;&#10;            &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-1&quot;&gt;Nenhum email encontrado&lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-500 text-center&quot;&gt;&#10;              {searchQuery ?&#10;                &quot;Não encontramos emails correspondentes à sua pesquisa.&quot; :&#10;                &quot;Não há emails nesta pasta no momento.&quot;}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          filteredEmails.map((email) =&gt; (&#10;            &lt;div&#10;              key={email.id}&#10;              className={cn(&#10;                &quot;p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 transition-colors&quot;,&#10;                selectedEmail === email.id &amp;&amp; &quot;bg-blue-100&quot;,&#10;                !email.isRead &amp;&amp; &quot;bg-blue-50/30&quot;&#10;              )}&#10;              onClick={() =&gt; {&#10;                if (selectedEmail === email.id) {&#10;                  onEmailSelect('');&#10;                } else {&#10;                  onEmailSelect(email.id);&#10;                }&#10;              }}&#10;            &gt;&#10;              &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;                &lt;Checkbox&#10;                  checked={selectedEmails.includes(email.id)}&#10;                  onCheckedChange={() =&gt; toggleEmailSelection(email.id)}&#10;                  onClick={(e) =&gt; e.stopPropagation()}&#10;                /&gt;&#10;&#10;&#10;                &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between mb-1&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      &lt;span className={cn(&#10;                        &quot;text-sm truncate&quot;,&#10;                        &quot;font-semibold text-gray-700&quot;&#10;                      )}&gt;&#10;                        {email.from}&#10;                      &lt;/span&gt;&#10;                      {email.hasAttachment &amp;&amp; (&#10;                        &lt;Paperclip className=&quot;h-3 w-3 text-gray-400&quot;/&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                    &lt;span className=&quot;text-xs text-gray-500&quot;&gt;{email.date}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;h3 className={cn(&#10;                    &quot;text-sm mb-1 truncate&quot;,&#10;                    &quot;font-bold text-gray-900&quot;&#10;                  )}&gt;&#10;                    {email.subject}&#10;                  &lt;/h3&gt;&#10;&#10;                  &lt;p className=&quot;text-xs text-gray-500 line-clamp-2&quot;&gt;&#10;                    {email.preview}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;&#10;export default React.memo(EmailList);&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, {useState, useCallback, useMemo, useEffect} from 'react';&#10;import {Archive, Paperclip, RotateCw, Trash2, Loader2, Mail} from 'lucide-react';&#10;import {Button} from '@/components/ui/button';&#10;import {Checkbox} from '@/components/ui/checkbox';&#10;import {cn} from '@/lib/utils';&#10;import {useEmails} from '@/lib/api/hooks';&#10;import {Email as ApiEmail} from '@/lib/api/types';&#10;import {useToast} from '@/hooks/use-toast';&#10;import {apiClient} from '@/lib/api/client';&#10;&#10;interface Email {&#10;  id: string;&#10;  from: string;&#10;  subject: string;&#10;  preview: string;&#10;  date: string;&#10;  isRead: boolean;&#10;  hasAttachment: boolean;&#10;  labels: string[];&#10;  content?: string;&#10;}&#10;&#10;&#10;const MOCK_EMAILS = [&#10;  {&#10;    id: 'mock-1',&#10;    from: 'João Silva &lt;joao@empresa.com&gt;',&#10;    subject: 'Relatório mensal de vendas - Novembro 2024',&#10;    preview: 'Segue em anexo o relatório mensal de vendas referente ao mês de novembro. Os resultados mostram um crescimento de 15% em relação ao mês anterior...',&#10;    date: new Date().toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['importante', 'trabalho'],&#10;    content: `Prezado(a),&#10;&#10;Segue em anexo o relatório mensal de vendas referente ao mês de novembro de 2024.&#10;&#10;Os principais destaques são:&#10;• Crescimento de 15% em relação ao mês anterior&#10;• Aumento de 8% no número de novos clientes&#10;• Melhoria na taxa de conversão para 12%&#10;&#10;Principais produtos vendidos:&#10;1. Produto A - R$ 45.000&#10;2. Produto B - R$ 32.000  &#10;3. Produto C - R$ 28.500&#10;&#10;Gostaria de agendar uma reunião para discutir estes resultados e planejar as estratégias para dezembro.&#10;&#10;Atenciosamente,&#10;João Silva&#10;Gerente Comercial&#10;(11) 9999-8888`&#10;  },&#10;  {&#10;    id: 'mock-2',&#10;    from: 'Maria Santos &lt;maria@consultoria.com&gt;',&#10;    subject: 'Proposta de consultoria em marketing digital',&#10;    preview: 'Espero que esteja bem! Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa...',&#10;    date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),&#10;    isRead: false,&#10;    hasAttachment: true,&#10;    labels: ['proposta'],&#10;    content: `Olá!&#10;&#10;Espero que esteja bem!&#10;&#10;Gostaria de apresentar nossa proposta de consultoria em marketing digital para sua empresa.&#10;&#10;Nossa experiência inclui:&#10;• Gestão de redes sociais&#10;• Campanhas no Google Ads&#10;• SEO e marketing de conteúdo&#10;• E-mail marketing&#10;• Análise de métricas e ROI&#10;&#10;Temos cases de sucesso com empresas do seu segmento e gostaríamos de agendar uma conversa para entender melhor suas necessidades.&#10;&#10;Quando seria um bom momento para conversarmos?&#10;&#10;Abraços,&#10;Maria Santos&#10;Consultora em Marketing Digital&#10;maria@consultoria.com&#10;(11) 8888-7777`&#10;  },&#10;  {&#10;    id: 'mock-3',&#10;    from: 'Carlos Oliveira &lt;carlos@fornecedor.com&gt;',&#10;    subject: 'Confirmação do pedido #2024-1156',&#10;    preview: 'Confirmamos o recebimento do seu pedido #2024-1156. Prazo de entrega estimado: 5 dias úteis...',&#10;    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['pedido'],&#10;    content: `Prezado Cliente,&#10;&#10;Confirmamos o recebimento do seu pedido #2024-1156.&#10;&#10;Detalhes do pedido:&#10;• Data do pedido: ${new Date(Date.now() - 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR')}&#10;• Valor total: R$ 2.850,00&#10;• Prazo de entrega: 5 dias úteis&#10;• Forma de pagamento: Boleto banceiro&#10;&#10;Itens do pedido:&#10;1. Item A - Qtd: 10 - R$ 150,00 cada&#10;2. Item B - Qtd: 5 - R$ 300,00 cada&#10;&#10;Você receberá o código de rastreamento assim que o pedido for despachado.&#10;&#10;Em caso de dúvidas, entre em contato conosco.&#10;&#10;Atenciosamente,&#10;Carlos Oliveira&#10;Departamento de Vendas&#10;carlos@fornecedor.com&#10;(11) 7777-6666`&#10;  },&#10;  {&#10;    id: 'mock-4',&#10;    from: 'Ana Costa &lt;ana@juridico.com&gt;',&#10;    subject: 'Revisão do contrato de prestação de serviços',&#10;    preview: 'Conforme solicitado, segue a revisão do contrato de prestação de serviços. Identifiquei alguns pontos que precisam de atenção...',&#10;    date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: true,&#10;    labels: ['jurídico', 'urgente'],&#10;    content: `Prezado(a),&#10;&#10;Conforme solicitado, realizei a revisão do contrato de prestação de serviços.&#10;&#10;Pontos que precisam de atenção:&#10;1. Cláusula 5.2 - Prazo de pagamento&#10;2. Cláusula 8.1 - Rescisão contratual  &#10;3. Cláusula 12 - Foro de eleição&#10;&#10;Recomendações:&#10;• Incluir cláusula de reajuste anual&#10;• Especificar melhor as penalidades por atraso&#10;• Definir critérios objetivos para avaliação de performance&#10;&#10;O documento revisado está em anexo com todas as sugestões destacadas.&#10;&#10;Podemos agendar uma reunião para discutir estas alterações?&#10;&#10;Cordialmente,&#10;Ana Costa&#10;Advogada&#10;OAB/SP 123.456&#10;ana@juridico.com&#10;(11) 6666-5555`&#10;  },&#10;  {&#10;    id: 'mock-5',&#10;    from: 'Ricardo Ferreira &lt;ricardo@ti.com&gt;',&#10;    subject: 'Manutenção programada do sistema - Sábado 09/12',&#10;    preview: 'Informamos que será realizada manutenção programada no sistema no sábado, 09/12, das 02h às 06h...',&#10;    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),&#10;    isRead: true,&#10;    hasAttachment: false,&#10;    labels: ['sistema', 'manutenção'],&#10;    content: `Prezados usuários,&#10;&#10;Informamos que será realizada manutenção programada no sistema no sábado, 09/12/2024, das 02h às 06h.&#10;&#10;Durante este período:&#10;• O sistema ficará indisponível&#10;• Não será possível acessar dados&#10;• Funcionalidades estarão offline&#10;&#10;Melhorias que serão implementadas:&#10;• Otimização da performance&#10;• Correção de bugs reportados&#10;• Atualização de segurança&#10;• Nova funcionalidade de relatórios&#10;&#10;Recomendamos que finalizem suas atividades até sexta-feira às 18h.&#10;&#10;Em caso de emergência durante a manutenção, entrar em contato pelo telefone (11) 5555-4444.&#10;&#10;Obrigado pela compreensão.&#10;&#10;Equipe de TI&#10;Ricardo Ferreira&#10;Coordenador de Sistemas&#10;ricardo@ti.com`&#10;  }&#10;];&#10;&#10;&#10;const formatDate = (dateString?: string): string =&gt; {&#10;  if (!dateString) return '';&#10;&#10;  const date = new Date(dateString);&#10;&#10;  // Format as dd/MM/yyyy HH:mm&#10;  const day = date.getDate().toString().padStart(2, '0');&#10;  const month = (date.getMonth() + 1).toString().padStart(2, '0');&#10;  const year = date.getFullYear();&#10;  const hours = date.getHours().toString().padStart(2, '0');&#10;  const minutes = date.getMinutes().toString().padStart(2, '0');&#10;&#10;  return `${day}/${month}/${year} ${hours}:${minutes}`;&#10;};&#10;&#10;interface SentEmail {&#10;  id: string;&#10;  to: string;&#10;  cc?: string;&#10;  bcc?: string;&#10;  subject: string;&#10;  content: string;&#10;  date: string;&#10;  from: string;&#10;}&#10;&#10;interface EmailListProps {&#10;  folder: string;&#10;  searchQuery: string;&#10;  selectedEmail: string | null;&#10;  onEmailSelect: (emailId: string) =&gt; void;&#10;  sentEmails?: SentEmail[];&#10;  onUnreadCountChange?: (count: number) =&gt; void;&#10;}&#10;&#10;function EmailList({&#10;  folder,&#10;  searchQuery,&#10;  selectedEmail,&#10;  onEmailSelect,&#10;  sentEmails = [],&#10;  onUnreadCountChange&#10;}: EmailListProps) {&#10;  const [selectedEmails, setSelectedEmails] = useState&lt;string[]&gt;([]);&#10;  const [syncLoading, setSyncLoading] = useState(false);&#10;  const {toast} = useToast();&#10;&#10;&#10;  const {data, error, loading, refetch} = useEmails({});&#10;&#10;&#10;  const syncAndFetchEmails = async () =&gt; {&#10;    try {&#10;      setSyncLoading(true);&#10;&#10;&#10;      await apiClient.sincronizarEmails();&#10;&#10;&#10;      await refetch();&#10;&#10;      toast({&#10;        title: &quot;Emails sincronizados&quot;,&#10;        description: &quot;Seus emails foram sincronizados com sucesso.&quot;,&#10;      });&#10;    } catch (err) {&#10;      console.error('Error syncing emails:', err);&#10;      toast({&#10;        title: &quot;Erro ao sincronizar emails&quot;,&#10;        description: &quot;Não foi possível sincronizar seus emails. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    } finally {&#10;      setSyncLoading(false);&#10;    }&#10;  };&#10;&#10;&#10;  useEffect(() =&gt; {&#10;    if (error) {&#10;      toast({&#10;        title: &quot;Erro ao carregar emails&quot;,&#10;        description: &quot;Não foi possível carregar os emails. Tente novamente mais tarde.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    }&#10;  }, [error, toast]);&#10;&#10;  useEffect(() =&gt; {&#10;    syncAndFetchEmails().then(r =&gt; {&#10;    })&#10;  }, []);&#10;&#10;&#10;  const apiEmails: Email[] = useMemo(() =&gt; {&#10;    return data?.items?.map((apiEmail: ApiEmail) =&gt; ({&#10;      id: apiEmail.id_email.toString(),&#10;      from: apiEmail.remetente,&#10;      subject: apiEmail.assunto,&#10;      preview: apiEmail.conteudo,&#10;      date: formatDate(apiEmail.prazo_resposta),&#10;      isRead: apiEmail.tp_status !== 'NOVO',&#10;      hasAttachment: false,&#10;      labels: [],&#10;    })) || [];&#10;  }, [data]);&#10;&#10;&#10;  const emails: Email[] = useMemo(() =&gt; {&#10;    // Format mock emails dates&#10;    const formattedMockEmails = MOCK_EMAILS.map(email =&gt; ({&#10;      ...email,&#10;      date: formatDate(email.date)&#10;    }));&#10;&#10;    if (folder === 'inbox') {&#10;      return [...formattedMockEmails, ...apiEmails];&#10;    }&#10;    return apiEmails;&#10;  }, [apiEmails, folder]);&#10;&#10;&#10;  useEffect(() =&gt; {&#10;    if (onUnreadCountChange &amp;&amp; folder === 'inbox') {&#10;      const allEmails = [...MOCK_EMAILS, ...apiEmails];&#10;      const unreadCount = allEmails.filter(email =&gt; !email.isRead).length;&#10;      const safeCount = Math.max(0, unreadCount);&#10;      onUnreadCountChange(safeCount);&#10;    }&#10;  }, [apiEmails, onUnreadCountChange, folder]);&#10;&#10;&#10;  const sentEmailsFormatted: Email[] = useMemo(() =&gt; {&#10;    return sentEmails.map(email =&gt; ({&#10;      id: email.id,&#10;      from: 'Você',&#10;      subject: email.subject,&#10;      preview: email.content.replace(/&lt;[^&gt;]*&gt;/g, ''),&#10;      date: formatDate(email.date),&#10;      isRead: true,&#10;      hasAttachment: false,&#10;      labels: [],&#10;    }));&#10;  }, [sentEmails]);&#10;&#10;&#10;  const filteredEmails = useMemo(() =&gt; {&#10;    // If showing sent emails folder&#10;    if (folder === 'sent') {&#10;      return sentEmailsFormatted.filter(email =&gt; {&#10;        if (searchQuery) {&#10;          return email?.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;            email?.preview?.toLowerCase().includes(searchQuery.toLowerCase());&#10;        }&#10;        return true;&#10;      });&#10;    }&#10;&#10;    // Filter all other emails&#10;    return emails.filter(email =&gt; {&#10;      if (searchQuery) {&#10;        return email?.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;          email?.from?.toLowerCase().includes(searchQuery.toLowerCase()) ||&#10;          email?.preview?.toLowerCase().includes(searchQuery.toLowerCase());&#10;      }&#10;&#10;      switch (folder) {&#10;        case 'inbox':&#10;          return true;&#10;        case 'drafts':&#10;          return false;&#10;        default:&#10;          return true;&#10;      }&#10;    });&#10;  }, [emails, sentEmailsFormatted, searchQuery, folder]);&#10;&#10;  const toggleEmailSelection = useCallback((emailId: string) =&gt; {&#10;    setSelectedEmails(prev =&gt;&#10;      prev.includes(emailId)&#10;        ? prev.filter(id =&gt; id !== emailId)&#10;        : [...prev, emailId]&#10;    );&#10;  }, []);&#10;&#10;  const selectAllEmails = useCallback(() =&gt; {&#10;    setSelectedEmails(&#10;      selectedEmails.length === filteredEmails.length&#10;        ? []&#10;        : filteredEmails.map(email =&gt; email.id)&#10;    );&#10;  }, [selectedEmails.length, filteredEmails]);&#10;&#10;  return (&#10;    &lt;div className=&quot;flex-1 bg-white flex flex-col&quot;&gt;&#10;      {/* Email Actions */}&#10;      &lt;div className=&quot;p-4 border-b border-gray-200&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between min-h-[2rem]&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Checkbox&#10;              checked={selectedEmails.length === filteredEmails.length &amp;&amp; filteredEmails.length &gt; 0}&#10;              onCheckedChange={selectAllEmails}&#10;              disabled={loading || filteredEmails.length === 0}&#10;            /&gt;&#10;            &lt;span className=&quot;text-sm text-gray-600 whitespace-nowrap&quot;&gt;&#10;              {loading ? (&#10;                &quot;Carregando...&quot;&#10;              ) : selectedEmails.length &gt; 0 ? (&#10;                `${selectedEmails.length} selecionados`&#10;              ) : (&#10;                `${filteredEmails.length} emails`&#10;              )}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;            {selectedEmails.length &gt; 0 ? (&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;                &lt;Trash2 className=&quot;h-4 w-4&quot;/&gt;&#10;              &lt;/Button&gt;&#10;            ) : (&#10;              &lt;Button&#10;                variant=&quot;ghost&quot;&#10;                size=&quot;sm&quot;&#10;                onClick={() =&gt; syncAndFetchEmails()}&#10;                disabled={loading || syncLoading}&#10;              &gt;&#10;                {loading || syncLoading ? (&#10;                  &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot;/&gt;&#10;                ) : (&#10;                  &lt;RotateCw className=&quot;h-4 w-4&quot;/&gt;&#10;                )}&#10;              &lt;/Button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Email List */}&#10;      &lt;div className=&quot;flex flex-col-reverse overflow-y-auto&quot;&gt;&#10;        {loading ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#10;            &lt;Loader2 className=&quot;h-8 w-8 text-blue-500 animate-spin mb-4&quot;/&gt;&#10;            &lt;p className=&quot;text-gray-500&quot;&gt;Carregando emails...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : filteredEmails.length === 0 ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center h-full p-8&quot;&gt;&#10;            &lt;Mail className=&quot;h-12 w-12 text-gray-300 mb-4&quot;/&gt;&#10;            &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-1&quot;&gt;Nenhum email encontrado&lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-500 text-center&quot;&gt;&#10;              {searchQuery ?&#10;                &quot;Não encontramos emails correspondentes à sua pesquisa.&quot; :&#10;                &quot;Não há emails nesta pasta no momento.&quot;}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          filteredEmails.map((email) =&gt; (&#10;            &lt;div&#10;              key={email.id}&#10;              className={cn(&#10;                &quot;p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 transition-colors&quot;,&#10;                selectedEmail === email.id &amp;&amp; &quot;bg-blue-100&quot;,&#10;                !email.isRead &amp;&amp; &quot;bg-blue-50/30&quot;&#10;              )}&#10;              onClick={() =&gt; {&#10;                if (selectedEmail === email.id) {&#10;                  onEmailSelect('');&#10;                } else {&#10;                  onEmailSelect(email.id);&#10;                }&#10;              }}&#10;            &gt;&#10;              &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;                &lt;Checkbox&#10;                  checked={selectedEmails.includes(email.id)}&#10;                  onCheckedChange={() =&gt; toggleEmailSelection(email.id)}&#10;                  onClick={(e) =&gt; e.stopPropagation()}&#10;                /&gt;&#10;&#10;&#10;                &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between mb-1&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      &lt;span className={cn(&#10;                        &quot;text-sm truncate&quot;,&#10;                        &quot;font-semibold text-gray-700&quot;&#10;                      )}&gt;&#10;                        {email.from}&#10;                      &lt;/span&gt;&#10;                      {email.hasAttachment &amp;&amp; (&#10;                        &lt;Paperclip className=&quot;h-3 w-3 text-gray-400&quot;/&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                    &lt;span className=&quot;text-xs text-gray-500&quot;&gt;{email.date}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;h3 className={cn(&#10;                    &quot;text-sm mb-1 truncate&quot;,&#10;                    &quot;font-bold text-gray-900&quot;&#10;                  )}&gt;&#10;                    {email.subject}&#10;                  &lt;/h3&gt;&#10;&#10;                  &lt;p className=&quot;text-xs text-gray-500 line-clamp-2&quot;&gt;&#10;                    {email.preview}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;&#10;export default React.memo(EmailList);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/layout/Sidebar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/layout/Sidebar.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import {cn} from '@/lib/utils';&#10;import {Button} from '@/components/ui/button';&#10;import {Badge} from '@/components/ui/badge';&#10;import {Bell, LucideIcon, User} from 'lucide-react';&#10;import {Avatar, AvatarFallback, AvatarImage} from '@/components/ui/avatar';&#10;import {&#10;  DropdownMenu,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuLabel,&#10;  DropdownMenuSeparator,&#10;  DropdownMenuTrigger,&#10;} from '@/components/ui/dropdown-menu';&#10;import {useState} from &quot;react&quot;;&#10;import {useRouter} from 'next/navigation';&#10;import Image from 'next/image';&#10;&#10;interface NavigationItem {&#10;  id: string;&#10;  label: string;&#10;  icon: LucideIcon;&#10;  count: number;&#10;}&#10;&#10;interface SidebarProps {&#10;  navigationItems: NavigationItem[];&#10;  activeModule: string;&#10;  onModuleChange(module: any): void;&#10;  user?: {&#10;    nm_responsavel: string;&#10;    email: string;&#10;  };&#10;}&#10;&#10;const MOCK_NOTIFICATIONS = [&#10;  {&#10;    id: '1',&#10;    title: 'Novo email recebido',&#10;    message: 'Maria Silva enviou um relatório de compliance',&#10;    time: '5 min atrás',&#10;    unread: true,&#10;  },&#10;  {&#10;    id: '2',&#10;    title: 'Tarefa atualizada',&#10;    message: 'João atualizou a tarefa &quot;Implementar autenticação JWT&quot;',&#10;    time: '15 min atrás',&#10;    unread: true,&#10;  },&#10;  {&#10;    id: '3',&#10;    title: 'Documento aprovado',&#10;    message: 'Processo de compliance foi aprovado',&#10;    time: '1 hora atrás',&#10;    unread: false,&#10;  },&#10;];&#10;&#10;export default function Sidebar({&#10;  navigationItems,&#10;  activeModule,&#10;  onModuleChange,&#10;  user&#10;}: SidebarProps) {&#10;  const [notificationsOpen, setNotificationsOpen] = useState(false);&#10;  const unreadCount = MOCK_NOTIFICATIONS.filter(n =&gt; n.unread).length;&#10;  const router = useRouter();&#10;&#10;  const handleLogout = () =&gt; {&#10;    localStorage.removeItem('user');&#10;    localStorage.removeItem('rememberMe');&#10;    router.push('/login');&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white border-r border-gray-200 rounded-r-3xl overflow-hidden w-80 min-w-80 max-w-80&quot;&gt;&#10;      &lt;div className=&quot;flex flex-col h-full&quot;&gt;&#10;        &lt;div className=&quot;flex justify-start space-x-3 p-6 border-b border-gray-200&quot;&gt;&#10;          &lt;Image&#10;            src=&quot;/images/logo.png&quot;&#10;            alt=&quot;Logo&quot;&#10;            width={400}&#10;            height={221}&#10;            className=&quot;h-12 w-auto&quot;&#10;          /&gt;&#10;          &lt;div className=&quot;items-start whitespace-nowrap&quot;&gt;&#10;            &lt;h1 className=&quot;w-fit text-xl font-bold text-gray-900&quot;&gt;Way 262&lt;/h1&gt;&#10;            &lt;p className=&quot;w-fit text-xs text-gray-500&quot;&gt;Software Regulatório&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Navigation */}&#10;        &lt;nav className=&quot;flex flex-col grow gap-2 p-2&quot;&gt;&#10;          {navigationItems.map((item) =&gt; {&#10;            const Icon = item.icon;&#10;            const isActive = activeModule === item.id;&#10;&#10;            return (&#10;              &lt;Button&#10;                key={item.id}&#10;                variant={isActive ? &quot;default&quot; : &quot;ghost&quot;}&#10;                className={cn(&#10;                  &quot;flex justify-start w-full text-left h-11 text-sm px-4&quot;,&#10;                  isActive &amp;&amp; &quot;bg-blue-600 text-white&quot;&#10;                )}&#10;                onClick={() =&gt; onModuleChange(item.id)}&#10;              &gt;&#10;                &lt;Icon className=&quot;h-4 w-4 flex-shrink-0 mr-3&quot; /&gt;&#10;                &lt;span className=&quot;flex-1&quot;&gt;{item.label}&lt;/span&gt;&#10;                {item.count &gt; 0 &amp;&amp; (&#10;                  &lt;Badge&#10;                    variant={isActive ? &quot;secondary&quot; : &quot;default&quot;}&#10;                    className={cn(&#10;                      &quot;ml-auto&quot;,&#10;                      isActive ? &quot;bg-blue-100 text-blue-800&quot; : &quot;bg-gray-100 text-gray-800&quot;&#10;                    )}&#10;                  &gt;&#10;                    {item.count}&#10;                  &lt;/Badge&gt;&#10;                )}&#10;              &lt;/Button&gt;&#10;            );&#10;          })}&#10;          &#10;          &lt;DropdownMenu open={notificationsOpen} onOpenChange={setNotificationsOpen}&gt;&#10;            &lt;DropdownMenuTrigger asChild&gt;&#10;              &lt;div&#10;                className=&quot;mt-auto&quot;&#10;                onMouseEnter={() =&gt; setNotificationsOpen(true)}&#10;                onMouseLeave={() =&gt; setNotificationsOpen(false)}&#10;              &gt;&#10;                &lt;Button&#10;                  variant=&quot;ghost&quot;&#10;                  className=&quot;flex justify-start w-full text-left h-11 text-sm relative px-4&quot;&#10;                &gt;&#10;                  &lt;Bell className=&quot;h-4 w-4 flex-shrink-0 mr-3&quot; /&gt;&#10;                  &lt;span className=&quot;flex-1 text-start&quot;&gt;Notificações&lt;/span&gt;&#10;                  {unreadCount &gt; 0 &amp;&amp; (&#10;                    &lt;Badge variant=&quot;destructive&quot; className=&quot;ml-auto&quot;&gt;&#10;                      {unreadCount}&#10;                    &lt;/Badge&gt;&#10;                  )}&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/DropdownMenuTrigger&gt;&#10;            &lt;DropdownMenuContent&#10;              className=&quot;w-full m-4 mb-0&quot;&#10;              align=&quot;end&quot;&#10;              onMouseEnter={() =&gt; setNotificationsOpen(true)}&#10;              onMouseLeave={() =&gt; setNotificationsOpen(false)}&#10;            &gt;&#10;              &lt;DropdownMenuLabel&gt;Notificações&lt;/DropdownMenuLabel&gt;&#10;              &lt;DropdownMenuSeparator /&gt;&#10;              &lt;div className=&quot;max-h-96 overflow-y-auto&quot;&gt;&#10;                {MOCK_NOTIFICATIONS.map((notification) =&gt; (&#10;                  &lt;DropdownMenuItem key={notification.id} className=&quot;flex flex-col items-start p-4 cursor-pointer&quot;&gt;&#10;                    &lt;div className=&quot;flex items-start justify-between w-full&quot;&gt;&#10;                      &lt;div className=&quot;flex-1&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center space-x-2 mb-1&quot;&gt;&#10;                          &lt;h4 className=&quot;text-sm font-medium&quot;&gt;{notification.title}&lt;/h4&gt;&#10;                          {notification.unread &amp;&amp; (&#10;                            &lt;div className=&quot;w-2 h-2 bg-blue-500 rounded-full&quot;&gt;&lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                        &lt;p className=&quot;text-xs text-gray-600 mb-1&quot;&gt;{notification.message}&lt;/p&gt;&#10;                        &lt;span className=&quot;text-xs text-gray-400&quot;&gt;{notification.time}&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/DropdownMenuItem&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;              &lt;DropdownMenuSeparator /&gt;&#10;              &lt;DropdownMenuItem className=&quot;text-center text-blue-600 hover:text-blue-700&quot;&gt;&#10;                Ver todas as notificações&#10;              &lt;/DropdownMenuItem&gt;&#10;            &lt;/DropdownMenuContent&gt;&#10;          &lt;/DropdownMenu&gt;&#10;        &lt;/nav&gt;&#10;&#10;        &lt;div className=&quot;flex-col justify-end space-y-2&quot;&gt;&#10;          &lt;DropdownMenu&gt;&#10;            &lt;DropdownMenuTrigger asChild&gt;&#10;              &lt;Button&#10;                variant=&quot;ghost&quot;&#10;                className=&quot;flex items-center justify-start w-full h-16 px-4 rounded-none group&quot;&#10;              &gt;&#10;                &lt;div className=&quot;flex items-center&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-start space-x-3&quot;&gt;&#10;                    &lt;Avatar className=&quot;h-12 w-12&quot;&gt;&#10;                      &lt;AvatarImage src=&quot;/placeholder-avatar.jpg&quot; alt=&quot;Profile Picture&quot;/&gt;&#10;                      &lt;AvatarFallback className=&quot;w-12 h-12 group-hover:bg-white&quot;&gt;JD&lt;/AvatarFallback&gt;&#10;                    &lt;/Avatar&gt;&#10;                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                      &lt;h1 className=&quot;w-fit text-md font-bold text-gray-900&quot;&gt;{user?.nm_responsavel || &quot;John Doe&quot;}&lt;/h1&gt;&#10;                      &lt;p className=&quot;w-fit text-xs text-gray-500&quot;&gt;{user?.email || &quot;john.doe@waybrasil.com&quot;}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/Button&gt;&#10;            &lt;/DropdownMenuTrigger&gt;&#10;            &lt;DropdownMenuContent className=&quot;w-72 mx-4&quot; align=&quot;center&quot; forceMount&gt;&#10;              &lt;DropdownMenuLabel className=&quot;font-normal&quot;&gt;&#10;                &lt;div className=&quot;flex flex-col space-y-1&quot;&gt;&#10;                  &lt;p className=&quot;text-sm font-medium leading-none&quot;&gt;{user?.nm_responsavel || &quot;John Doe&quot;}&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xs leading-none text-muted-foreground&quot;&gt;&#10;                    {user?.email || &quot;john.doe@waybrasil.com&quot;}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/DropdownMenuLabel&gt;&#10;              &lt;DropdownMenuSeparator /&gt;&#10;              &lt;DropdownMenuItem&gt;&#10;                &lt;User className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                Perfil&#10;              &lt;/DropdownMenuItem&gt;&#10;              &lt;DropdownMenuItem&gt;&#10;                Configurações&#10;              &lt;/DropdownMenuItem&gt;&#10;              &lt;DropdownMenuItem&gt;&#10;                Suporte&#10;              &lt;/DropdownMenuItem&gt;&#10;              &lt;DropdownMenuSeparator /&gt;&#10;              &lt;DropdownMenuItem onClick={handleLogout}&gt;&#10;                Sair&#10;              &lt;/DropdownMenuItem&gt;&#10;            &lt;/DropdownMenuContent&gt;&#10;          &lt;/DropdownMenu&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>